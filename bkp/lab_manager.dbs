<?xml version="1.0" encoding="UTF-8" ?>
<project name="lab_manager" id="Project_2e90a94c" database="PostgreSQL" >
	<schema name="information_schema" catalogname="labman" schemaname="information_schema" >
		<function name="_pg_char_max_length" id="Function_2caaada0" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION information_schema._pg_char_max_length(typid oid, typmod integer)
 RETURNS integer
 LANGUAGE sql
 IMMUTABLE STRICT
AS $function$SELECT
  CASE WHEN $2 = -1 /* default typmod */
       THEN null
       WHEN $1 IN (1042, 1043) /* char, varchar */
       THEN $2 - 4
       WHEN $1 IN (1560, 1562) /* bit, varbit */
       THEN $2
       ELSE null
  END$function$
]]></string>
		</function>
		<function name="_pg_char_octet_length" id="Function_1464b67b" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION information_schema._pg_char_octet_length(typid oid, typmod integer)
 RETURNS integer
 LANGUAGE sql
 IMMUTABLE STRICT
AS $function$SELECT
  CASE WHEN $1 IN (25, 1042, 1043) /* text, char, varchar */
       THEN CASE WHEN $2 = -1 /* default typmod */
                 THEN CAST(2^30 AS integer)
                 ELSE information_schema._pg_char_max_length($1, $2) *
                      pg_catalog.pg_encoding_max_length((SELECT encoding FROM pg_catalog.pg_database WHERE datname = pg_catalog.current_database()))
            END
       ELSE null
  END$function$
]]></string>
		</function>
		<function name="_pg_datetime_precision" id="Function_37937515" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION information_schema._pg_datetime_precision(typid oid, typmod integer)
 RETURNS integer
 LANGUAGE sql
 IMMUTABLE STRICT
AS $function$SELECT
  CASE WHEN $1 IN (1082) /* date */
           THEN 0
       WHEN $1 IN (1083, 1114, 1184, 1266) /* time, timestamp, same + tz */
           THEN CASE WHEN $2 < 0 THEN 6 ELSE $2 END
       WHEN $1 IN (1186) /* interval */
           THEN CASE WHEN $2 < 0 OR $2 & 65535 = 65535 THEN 6 ELSE $2 & 65535 END
       ELSE null
  END$function$
]]></string>
		</function>
		<function name="_pg_expandarray" id="Function_2f30362c" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION information_schema._pg_expandarray(anyarray, OUT x anyelement, OUT n integer)
 RETURNS SETOF record
 LANGUAGE sql
 IMMUTABLE STRICT
AS $function$select $1[s], s - pg_catalog.array_lower($1,1) + 1
        from pg_catalog.generate_series(pg_catalog.array_lower($1,1),
                                        pg_catalog.array_upper($1,1),
                                        1) as g(s)$function$
]]></string>
		</function>
		<function name="_pg_index_position" id="Function_26e30767" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION information_schema._pg_index_position(oid, smallint)
 RETURNS integer
 LANGUAGE sql
 STABLE STRICT
AS $function$
SELECT (ss.a).n FROM
  (SELECT information_schema._pg_expandarray(indkey) AS a
   FROM pg_catalog.pg_index WHERE indexrelid = $1) ss
  WHERE (ss.a).x = $2;
$function$
]]></string>
		</function>
		<function name="_pg_interval_type" id="Function_1188cc58" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION information_schema._pg_interval_type(typid oid, mod integer)
 RETURNS text
 LANGUAGE sql
 IMMUTABLE STRICT
AS $function$SELECT
  CASE WHEN $1 IN (1186) /* interval */
           THEN upper(substring(format_type($1, $2) from 'interval[()0-9]* #"%#"' for '#'))
       ELSE null
  END$function$
]]></string>
		</function>
		<function name="_pg_keysequal" id="Function_24324396" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION information_schema._pg_keysequal(smallint[], smallint[])
 RETURNS boolean
 LANGUAGE sql
 IMMUTABLE
AS $function$select $1 operator(pg_catalog.<@) $2 and $2 operator(pg_catalog.<@) $1$function$
]]></string>
		</function>
		<function name="_pg_numeric_precision" id="Function_17a1cb27" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION information_schema._pg_numeric_precision(typid oid, typmod integer)
 RETURNS integer
 LANGUAGE sql
 IMMUTABLE STRICT
AS $function$SELECT
  CASE $1
         WHEN 21 /*int2*/ THEN 16
         WHEN 23 /*int4*/ THEN 32
         WHEN 20 /*int8*/ THEN 64
         WHEN 1700 /*numeric*/ THEN
              CASE WHEN $2 = -1
                   THEN null
                   ELSE (($2 - 4) >> 16) & 65535
                   END
         WHEN 700 /*float4*/ THEN 24 /*FLT_MANT_DIG*/
         WHEN 701 /*float8*/ THEN 53 /*DBL_MANT_DIG*/
         ELSE null
  END$function$
]]></string>
		</function>
		<function name="_pg_numeric_precision_radix" id="Function_25ad9028" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION information_schema._pg_numeric_precision_radix(typid oid, typmod integer)
 RETURNS integer
 LANGUAGE sql
 IMMUTABLE STRICT
AS $function$SELECT
  CASE WHEN $1 IN (21, 23, 20, 700, 701) THEN 2
       WHEN $1 IN (1700) THEN 10
       ELSE null
  END$function$
]]></string>
		</function>
		<function name="_pg_numeric_scale" id="Function_1d341ff3" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION information_schema._pg_numeric_scale(typid oid, typmod integer)
 RETURNS integer
 LANGUAGE sql
 IMMUTABLE STRICT
AS $function$SELECT
  CASE WHEN $1 IN (21, 23, 20) THEN 0
       WHEN $1 IN (1700) THEN
            CASE WHEN $2 = -1
                 THEN null
                 ELSE ($2 - 4) & 65535
                 END
       ELSE null
  END$function$
]]></string>
		</function>
		<function name="_pg_truetypid" id="Function_1c7c712d" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION information_schema._pg_truetypid(pg_attribute, pg_type)
 RETURNS oid
 LANGUAGE sql
 IMMUTABLE STRICT
AS $function$SELECT CASE WHEN $2.typtype = 'd' THEN $2.typbasetype ELSE $1.atttypid END$function$
]]></string>
		</function>
		<function name="_pg_truetypmod" id="Function_16001233" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION information_schema._pg_truetypmod(pg_attribute, pg_type)
 RETURNS integer
 LANGUAGE sql
 IMMUTABLE STRICT
AS $function$SELECT CASE WHEN $2.typtype = 'd' THEN $2.typtypmod ELSE $1.atttypmod END$function$
]]></string>
		</function>
	</schema>
	<schema name="pg_catalog" catalogname="labman" schemaname="pg_catalog" >
		<function name="RI_FKey_cascade_del" id="Function_38ff5c4a" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog."RI_FKey_cascade_del"()
 RETURNS trigger
 LANGUAGE internal
 PARALLEL SAFE STRICT
AS $function$RI_FKey_cascade_del$function$
]]></string>
			<comment><![CDATA[referential integrity ON DELETE CASCADE]]></comment>
		</function>
		<function name="RI_FKey_cascade_upd" id="Function_1c50f4ab" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog."RI_FKey_cascade_upd"()
 RETURNS trigger
 LANGUAGE internal
 PARALLEL SAFE STRICT
AS $function$RI_FKey_cascade_upd$function$
]]></string>
			<comment><![CDATA[referential integrity ON UPDATE CASCADE]]></comment>
		</function>
		<function name="RI_FKey_check_ins" id="Function_14e90ef7" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog."RI_FKey_check_ins"()
 RETURNS trigger
 LANGUAGE internal
 PARALLEL SAFE STRICT
AS $function$RI_FKey_check_ins$function$
]]></string>
			<comment><![CDATA[referential integrity FOREIGN KEY ... REFERENCES]]></comment>
		</function>
		<function name="RI_FKey_check_upd" id="Function_3296e947" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog."RI_FKey_check_upd"()
 RETURNS trigger
 LANGUAGE internal
 PARALLEL SAFE STRICT
AS $function$RI_FKey_check_upd$function$
]]></string>
			<comment><![CDATA[referential integrity FOREIGN KEY ... REFERENCES]]></comment>
		</function>
		<function name="RI_FKey_noaction_del" id="Function_10045bf" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog."RI_FKey_noaction_del"()
 RETURNS trigger
 LANGUAGE internal
 PARALLEL SAFE STRICT
AS $function$RI_FKey_noaction_del$function$
]]></string>
			<comment><![CDATA[referential integrity ON DELETE NO ACTION]]></comment>
		</function>
		<function name="RI_FKey_noaction_upd" id="Function_2cb524f9" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog."RI_FKey_noaction_upd"()
 RETURNS trigger
 LANGUAGE internal
 PARALLEL SAFE STRICT
AS $function$RI_FKey_noaction_upd$function$
]]></string>
			<comment><![CDATA[referential integrity ON UPDATE NO ACTION]]></comment>
		</function>
		<function name="RI_FKey_restrict_del" id="Function_23b5cecf" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog."RI_FKey_restrict_del"()
 RETURNS trigger
 LANGUAGE internal
 PARALLEL SAFE STRICT
AS $function$RI_FKey_restrict_del$function$
]]></string>
			<comment><![CDATA[referential integrity ON DELETE RESTRICT]]></comment>
		</function>
		<function name="RI_FKey_restrict_upd" id="Function_200d6897" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog."RI_FKey_restrict_upd"()
 RETURNS trigger
 LANGUAGE internal
 PARALLEL SAFE STRICT
AS $function$RI_FKey_restrict_upd$function$
]]></string>
			<comment><![CDATA[referential integrity ON UPDATE RESTRICT]]></comment>
		</function>
		<function name="RI_FKey_setdefault_del" id="Function_c55809d" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog."RI_FKey_setdefault_del"()
 RETURNS trigger
 LANGUAGE internal
 PARALLEL SAFE STRICT
AS $function$RI_FKey_setdefault_del$function$
]]></string>
			<comment><![CDATA[referential integrity ON DELETE SET DEFAULT]]></comment>
		</function>
		<function name="RI_FKey_setdefault_upd" id="Function_e4767d6" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog."RI_FKey_setdefault_upd"()
 RETURNS trigger
 LANGUAGE internal
 PARALLEL SAFE STRICT
AS $function$RI_FKey_setdefault_upd$function$
]]></string>
			<comment><![CDATA[referential integrity ON UPDATE SET DEFAULT]]></comment>
		</function>
		<function name="RI_FKey_setnull_del" id="Function_e617105" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog."RI_FKey_setnull_del"()
 RETURNS trigger
 LANGUAGE internal
 PARALLEL SAFE STRICT
AS $function$RI_FKey_setnull_del$function$
]]></string>
			<comment><![CDATA[referential integrity ON DELETE SET NULL]]></comment>
		</function>
		<function name="RI_FKey_setnull_upd" id="Function_29ad137b" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog."RI_FKey_setnull_upd"()
 RETURNS trigger
 LANGUAGE internal
 PARALLEL SAFE STRICT
AS $function$RI_FKey_setnull_upd$function$
]]></string>
			<comment><![CDATA[referential integrity ON UPDATE SET NULL]]></comment>
		</function>
		<function name="abbrev" id="Function_2bb2da8d" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.abbrev(cidr)
 RETURNS text
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$cidr_abbrev$function$
CREATE OR REPLACE FUNCTION pg_catalog.abbrev(inet)
 RETURNS text
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$inet_abbrev$function$
]]></string>
			<comment><![CDATA[abbreviated display of inet value]]></comment>
		</function>
		<function name="abbrev_001" id="Function_253dd9a5" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.abbrev(cidr)
 RETURNS text
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$cidr_abbrev$function$
CREATE OR REPLACE FUNCTION pg_catalog.abbrev(inet)
 RETURNS text
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$inet_abbrev$function$
]]></string>
			<comment><![CDATA[abbreviated display of inet value]]></comment>
		</function>
		<function name="abs" id="Function_25426861" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.abs(real)
 RETURNS real
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$float4abs$function$
CREATE OR REPLACE FUNCTION pg_catalog.abs(double precision)
 RETURNS double precision
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$float8abs$function$
CREATE OR REPLACE FUNCTION pg_catalog.abs(bigint)
 RETURNS bigint
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$int8abs$function$
CREATE OR REPLACE FUNCTION pg_catalog.abs(integer)
 RETURNS integer
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$int4abs$function$
CREATE OR REPLACE FUNCTION pg_catalog.abs(smallint)
 RETURNS smallint
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$int2abs$function$
CREATE OR REPLACE FUNCTION pg_catalog.abs(numeric)
 RETURNS numeric
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$numeric_abs$function$
]]></string>
			<comment><![CDATA[absolute value]]></comment>
		</function>
		<function name="abs_001" id="Function_15edd227" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.abs(real)
 RETURNS real
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$float4abs$function$
CREATE OR REPLACE FUNCTION pg_catalog.abs(double precision)
 RETURNS double precision
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$float8abs$function$
CREATE OR REPLACE FUNCTION pg_catalog.abs(bigint)
 RETURNS bigint
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$int8abs$function$
CREATE OR REPLACE FUNCTION pg_catalog.abs(integer)
 RETURNS integer
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$int4abs$function$
CREATE OR REPLACE FUNCTION pg_catalog.abs(smallint)
 RETURNS smallint
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$int2abs$function$
CREATE OR REPLACE FUNCTION pg_catalog.abs(numeric)
 RETURNS numeric
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$numeric_abs$function$
]]></string>
			<comment><![CDATA[absolute value]]></comment>
		</function>
		<function name="abs_002" id="Function_9ef660b" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.abs(real)
 RETURNS real
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$float4abs$function$
CREATE OR REPLACE FUNCTION pg_catalog.abs(double precision)
 RETURNS double precision
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$float8abs$function$
CREATE OR REPLACE FUNCTION pg_catalog.abs(bigint)
 RETURNS bigint
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$int8abs$function$
CREATE OR REPLACE FUNCTION pg_catalog.abs(integer)
 RETURNS integer
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$int4abs$function$
CREATE OR REPLACE FUNCTION pg_catalog.abs(smallint)
 RETURNS smallint
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$int2abs$function$
CREATE OR REPLACE FUNCTION pg_catalog.abs(numeric)
 RETURNS numeric
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$numeric_abs$function$
]]></string>
			<comment><![CDATA[absolute value]]></comment>
		</function>
		<function name="abs_003" id="Function_92e561c" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.abs(real)
 RETURNS real
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$float4abs$function$
CREATE OR REPLACE FUNCTION pg_catalog.abs(double precision)
 RETURNS double precision
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$float8abs$function$
CREATE OR REPLACE FUNCTION pg_catalog.abs(bigint)
 RETURNS bigint
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$int8abs$function$
CREATE OR REPLACE FUNCTION pg_catalog.abs(integer)
 RETURNS integer
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$int4abs$function$
CREATE OR REPLACE FUNCTION pg_catalog.abs(smallint)
 RETURNS smallint
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$int2abs$function$
CREATE OR REPLACE FUNCTION pg_catalog.abs(numeric)
 RETURNS numeric
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$numeric_abs$function$
]]></string>
			<comment><![CDATA[absolute value]]></comment>
		</function>
		<function name="abs_004" id="Function_34c7b88" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.abs(real)
 RETURNS real
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$float4abs$function$
CREATE OR REPLACE FUNCTION pg_catalog.abs(double precision)
 RETURNS double precision
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$float8abs$function$
CREATE OR REPLACE FUNCTION pg_catalog.abs(bigint)
 RETURNS bigint
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$int8abs$function$
CREATE OR REPLACE FUNCTION pg_catalog.abs(integer)
 RETURNS integer
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$int4abs$function$
CREATE OR REPLACE FUNCTION pg_catalog.abs(smallint)
 RETURNS smallint
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$int2abs$function$
CREATE OR REPLACE FUNCTION pg_catalog.abs(numeric)
 RETURNS numeric
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$numeric_abs$function$
]]></string>
			<comment><![CDATA[absolute value]]></comment>
		</function>
		<function name="abs_005" id="Function_307633a2" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.abs(real)
 RETURNS real
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$float4abs$function$
CREATE OR REPLACE FUNCTION pg_catalog.abs(double precision)
 RETURNS double precision
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$float8abs$function$
CREATE OR REPLACE FUNCTION pg_catalog.abs(bigint)
 RETURNS bigint
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$int8abs$function$
CREATE OR REPLACE FUNCTION pg_catalog.abs(integer)
 RETURNS integer
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$int4abs$function$
CREATE OR REPLACE FUNCTION pg_catalog.abs(smallint)
 RETURNS smallint
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$int2abs$function$
CREATE OR REPLACE FUNCTION pg_catalog.abs(numeric)
 RETURNS numeric
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$numeric_abs$function$
]]></string>
			<comment><![CDATA[absolute value]]></comment>
		</function>
		<function name="abstime" id="Function_6cabc73" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.abstime(timestamp without time zone)
 RETURNS abstime
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$timestamp_abstime$function$
CREATE OR REPLACE FUNCTION pg_catalog.abstime(timestamp with time zone)
 RETURNS abstime
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$timestamptz_abstime$function$
]]></string>
			<comment><![CDATA[convert timestamp with time zone to abstime]]></comment>
		</function>
		<function name="abstime_001" id="Function_180569a8" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.abstime(timestamp without time zone)
 RETURNS abstime
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$timestamp_abstime$function$
CREATE OR REPLACE FUNCTION pg_catalog.abstime(timestamp with time zone)
 RETURNS abstime
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$timestamptz_abstime$function$
]]></string>
			<comment><![CDATA[convert timestamp with time zone to abstime]]></comment>
		</function>
		<function name="abstimeeq" id="Function_293866fb" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.abstimeeq(abstime, abstime)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT LEAKPROOF
AS $function$abstimeeq$function$
]]></string>
			<comment><![CDATA[implementation of = operator]]></comment>
		</function>
		<function name="abstimege" id="Function_1e44e910" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.abstimege(abstime, abstime)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT LEAKPROOF
AS $function$abstimege$function$
]]></string>
			<comment><![CDATA[implementation of >= operator]]></comment>
		</function>
		<function name="abstimegt" id="Function_3439bd55" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.abstimegt(abstime, abstime)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT LEAKPROOF
AS $function$abstimegt$function$
]]></string>
			<comment><![CDATA[implementation of > operator]]></comment>
		</function>
		<function name="abstimein" id="Function_29ac6a70" isSystem="false" >
			<comment><![CDATA[I/O]]></comment>
		</function>
		<function name="abstimele" id="Function_18484260" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.abstimele(abstime, abstime)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT LEAKPROOF
AS $function$abstimele$function$
]]></string>
			<comment><![CDATA[implementation of <= operator]]></comment>
		</function>
		<function name="abstimelt" id="Function_11753b40" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.abstimelt(abstime, abstime)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT LEAKPROOF
AS $function$abstimelt$function$
]]></string>
			<comment><![CDATA[implementation of < operator]]></comment>
		</function>
		<function name="abstimene" id="Function_1551554" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.abstimene(abstime, abstime)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT LEAKPROOF
AS $function$abstimene$function$
]]></string>
			<comment><![CDATA[implementation of <> operator]]></comment>
		</function>
		<function name="abstimeout" id="Function_18088e52" isSystem="false" >
			<comment><![CDATA[I/O]]></comment>
		</function>
		<function name="abstimerecv" id="Function_73a9fb" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.abstimerecv(internal)
 RETURNS abstime
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$abstimerecv$function$
]]></string>
			<comment><![CDATA[I/O]]></comment>
		</function>
		<function name="abstimesend" id="Function_294fe417" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.abstimesend(abstime)
 RETURNS bytea
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$abstimesend$function$
]]></string>
			<comment><![CDATA[I/O]]></comment>
		</function>
		<function name="aclcontains" id="Function_13118c03" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.aclcontains(aclitem[], aclitem)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$aclcontains$function$
]]></string>
			<comment><![CDATA[contains]]></comment>
		</function>
		<function name="acldefault" id="Function_1cf94804" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.acldefault("char", oid)
 RETURNS aclitem[]
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$acldefault_sql$function$
]]></string>
			<comment><![CDATA[TODO]]></comment>
		</function>
		<function name="aclexplode" id="Function_5aea7b4" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.aclexplode(acl aclitem[], OUT grantor oid, OUT grantee oid, OUT privilege_type text, OUT is_grantable boolean)
 RETURNS SETOF record
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT ROWS 10
AS $function$aclexplode$function$
]]></string>
			<comment><![CDATA[convert ACL item array to table, for use by information schema]]></comment>
		</function>
		<function name="aclinsert" id="Function_edd812d" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.aclinsert(aclitem[], aclitem)
 RETURNS aclitem[]
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$aclinsert$function$
]]></string>
			<comment><![CDATA[add/update ACL item]]></comment>
		</function>
		<function name="aclitemeq" id="Function_30443415" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.aclitemeq(aclitem, aclitem)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$aclitem_eq$function$
]]></string>
			<comment><![CDATA[implementation of = operator]]></comment>
		</function>
		<function name="aclitemin" id="Function_3b81633a" isSystem="false" >
			<comment><![CDATA[I/O]]></comment>
		</function>
		<function name="aclitemout" id="Function_163e43b4" isSystem="false" >
			<comment><![CDATA[I/O]]></comment>
		</function>
		<function name="aclremove" id="Function_c31f36c" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.aclremove(aclitem[], aclitem)
 RETURNS aclitem[]
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$aclremove$function$
]]></string>
			<comment><![CDATA[remove ACL item]]></comment>
		</function>
		<function name="acos" id="Function_2bd67854" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.acos(double precision)
 RETURNS double precision
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$dacos$function$
]]></string>
			<comment><![CDATA[arccosine]]></comment>
		</function>
		<function name="acosd" id="Function_23ff2c50" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.acosd(double precision)
 RETURNS double precision
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$dacosd$function$
]]></string>
			<comment><![CDATA[arccosine, degrees]]></comment>
		</function>
		<function name="age" id="Function_1d39e5e6" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.age(xid)
 RETURNS integer
 LANGUAGE internal
 STABLE PARALLEL RESTRICTED STRICT
AS $function$xid_age$function$
CREATE OR REPLACE FUNCTION pg_catalog.age(timestamp with time zone, timestamp with time zone)
 RETURNS interval
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$timestamptz_age$function$
CREATE OR REPLACE FUNCTION pg_catalog.age(timestamp with time zone)
 RETURNS interval
 LANGUAGE sql
 STABLE PARALLEL SAFE STRICT COST 1
AS $function$select pg_catalog.age(cast(current_date as timestamp with time zone), $1)$function$
CREATE OR REPLACE FUNCTION pg_catalog.age(timestamp without time zone, timestamp without time zone)
 RETURNS interval
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$timestamp_age$function$
CREATE OR REPLACE FUNCTION pg_catalog.age(timestamp without time zone)
 RETURNS interval
 LANGUAGE sql
 STABLE PARALLEL SAFE STRICT COST 1
AS $function$select pg_catalog.age(cast(current_date as timestamp without time zone), $1)$function$
]]></string>
			<comment><![CDATA[age of a transaction ID, in transactions before current transaction]]></comment>
		</function>
		<function name="age_001" id="Function_28fb97b5" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.age(xid)
 RETURNS integer
 LANGUAGE internal
 STABLE PARALLEL RESTRICTED STRICT
AS $function$xid_age$function$
CREATE OR REPLACE FUNCTION pg_catalog.age(timestamp with time zone, timestamp with time zone)
 RETURNS interval
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$timestamptz_age$function$
CREATE OR REPLACE FUNCTION pg_catalog.age(timestamp with time zone)
 RETURNS interval
 LANGUAGE sql
 STABLE PARALLEL SAFE STRICT COST 1
AS $function$select pg_catalog.age(cast(current_date as timestamp with time zone), $1)$function$
CREATE OR REPLACE FUNCTION pg_catalog.age(timestamp without time zone, timestamp without time zone)
 RETURNS interval
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$timestamp_age$function$
CREATE OR REPLACE FUNCTION pg_catalog.age(timestamp without time zone)
 RETURNS interval
 LANGUAGE sql
 STABLE PARALLEL SAFE STRICT COST 1
AS $function$select pg_catalog.age(cast(current_date as timestamp without time zone), $1)$function$
]]></string>
			<comment><![CDATA[age of a transaction ID, in transactions before current transaction]]></comment>
		</function>
		<function name="age_002" id="Function_bfc4436" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.age(xid)
 RETURNS integer
 LANGUAGE internal
 STABLE PARALLEL RESTRICTED STRICT
AS $function$xid_age$function$
CREATE OR REPLACE FUNCTION pg_catalog.age(timestamp with time zone, timestamp with time zone)
 RETURNS interval
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$timestamptz_age$function$
CREATE OR REPLACE FUNCTION pg_catalog.age(timestamp with time zone)
 RETURNS interval
 LANGUAGE sql
 STABLE PARALLEL SAFE STRICT COST 1
AS $function$select pg_catalog.age(cast(current_date as timestamp with time zone), $1)$function$
CREATE OR REPLACE FUNCTION pg_catalog.age(timestamp without time zone, timestamp without time zone)
 RETURNS interval
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$timestamp_age$function$
CREATE OR REPLACE FUNCTION pg_catalog.age(timestamp without time zone)
 RETURNS interval
 LANGUAGE sql
 STABLE PARALLEL SAFE STRICT COST 1
AS $function$select pg_catalog.age(cast(current_date as timestamp without time zone), $1)$function$
]]></string>
			<comment><![CDATA[age of a transaction ID, in transactions before current transaction]]></comment>
		</function>
		<function name="age_003" id="Function_35461649" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.age(xid)
 RETURNS integer
 LANGUAGE internal
 STABLE PARALLEL RESTRICTED STRICT
AS $function$xid_age$function$
CREATE OR REPLACE FUNCTION pg_catalog.age(timestamp with time zone, timestamp with time zone)
 RETURNS interval
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$timestamptz_age$function$
CREATE OR REPLACE FUNCTION pg_catalog.age(timestamp with time zone)
 RETURNS interval
 LANGUAGE sql
 STABLE PARALLEL SAFE STRICT COST 1
AS $function$select pg_catalog.age(cast(current_date as timestamp with time zone), $1)$function$
CREATE OR REPLACE FUNCTION pg_catalog.age(timestamp without time zone, timestamp without time zone)
 RETURNS interval
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$timestamp_age$function$
CREATE OR REPLACE FUNCTION pg_catalog.age(timestamp without time zone)
 RETURNS interval
 LANGUAGE sql
 STABLE PARALLEL SAFE STRICT COST 1
AS $function$select pg_catalog.age(cast(current_date as timestamp without time zone), $1)$function$
]]></string>
			<comment><![CDATA[age of a transaction ID, in transactions before current transaction]]></comment>
		</function>
		<function name="age_004" id="Function_9b1b240" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.age(xid)
 RETURNS integer
 LANGUAGE internal
 STABLE PARALLEL RESTRICTED STRICT
AS $function$xid_age$function$
CREATE OR REPLACE FUNCTION pg_catalog.age(timestamp with time zone, timestamp with time zone)
 RETURNS interval
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$timestamptz_age$function$
CREATE OR REPLACE FUNCTION pg_catalog.age(timestamp with time zone)
 RETURNS interval
 LANGUAGE sql
 STABLE PARALLEL SAFE STRICT COST 1
AS $function$select pg_catalog.age(cast(current_date as timestamp with time zone), $1)$function$
CREATE OR REPLACE FUNCTION pg_catalog.age(timestamp without time zone, timestamp without time zone)
 RETURNS interval
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$timestamp_age$function$
CREATE OR REPLACE FUNCTION pg_catalog.age(timestamp without time zone)
 RETURNS interval
 LANGUAGE sql
 STABLE PARALLEL SAFE STRICT COST 1
AS $function$select pg_catalog.age(cast(current_date as timestamp without time zone), $1)$function$
]]></string>
			<comment><![CDATA[age of a transaction ID, in transactions before current transaction]]></comment>
		</function>
		<function name="amvalidate" id="Function_ed76845" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.amvalidate(oid)
 RETURNS boolean
 LANGUAGE internal
 PARALLEL SAFE STRICT
AS $function$amvalidate$function$
]]></string>
			<comment><![CDATA[validate an operator class]]></comment>
		</function>
		<function name="any_in" id="Function_6853cb" isSystem="false" >
			<comment><![CDATA[I/O]]></comment>
		</function>
		<function name="any_out" id="Function_1bf18d3f" isSystem="false" >
			<comment><![CDATA[I/O]]></comment>
		</function>
		<function name="anyarray_in" id="Function_1885acc" isSystem="false" >
			<comment><![CDATA[I/O]]></comment>
		</function>
		<function name="anyarray_out" id="Function_fd9cd05" isSystem="false" >
			<comment><![CDATA[I/O]]></comment>
		</function>
		<function name="anyarray_recv" id="Function_4565dbc" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.anyarray_recv(internal)
 RETURNS anyarray
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$anyarray_recv$function$
]]></string>
			<comment><![CDATA[I/O]]></comment>
		</function>
		<function name="anyarray_send" id="Function_5b384eb" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.anyarray_send(anyarray)
 RETURNS bytea
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$anyarray_send$function$
]]></string>
			<comment><![CDATA[I/O]]></comment>
		</function>
		<function name="anyelement_in" id="Function_182cc635" isSystem="false" >
			<comment><![CDATA[I/O]]></comment>
		</function>
		<function name="anyelement_out" id="Function_1f9af413" isSystem="false" >
			<comment><![CDATA[I/O]]></comment>
		</function>
		<function name="anyenum_in" id="Function_694a4d3" isSystem="false" >
			<comment><![CDATA[I/O]]></comment>
		</function>
		<function name="anyenum_out" id="Function_380e3e51" isSystem="false" >
			<comment><![CDATA[I/O]]></comment>
		</function>
		<function name="anynonarray_in" id="Function_2b8ba0de" isSystem="false" >
			<comment><![CDATA[I/O]]></comment>
		</function>
		<function name="anynonarray_out" id="Function_902c76f" isSystem="false" >
			<comment><![CDATA[I/O]]></comment>
		</function>
		<function name="anyrange_in" id="Function_1afc7541" isSystem="false" >
			<comment><![CDATA[I/O]]></comment>
		</function>
		<function name="anyrange_out" id="Function_22045e95" isSystem="false" >
			<comment><![CDATA[I/O]]></comment>
		</function>
		<function name="anytextcat" id="Function_1002fc03" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.anytextcat(anynonarray, text)
 RETURNS text
 LANGUAGE sql
 STABLE PARALLEL SAFE STRICT COST 1
AS $function$select $1::pg_catalog.text || $2$function$
]]></string>
			<comment><![CDATA[implementation of || operator]]></comment>
		</function>
		<function name="area" id="Function_6fd3a94" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.area(path)
 RETURNS double precision
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$path_area$function$
CREATE OR REPLACE FUNCTION pg_catalog.area(box)
 RETURNS double precision
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$box_area$function$
CREATE OR REPLACE FUNCTION pg_catalog.area(circle)
 RETURNS double precision
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$circle_area$function$
]]></string>
			<comment><![CDATA[area of circle]]></comment>
		</function>
		<function name="area_001" id="Function_c14f8e7" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.area(path)
 RETURNS double precision
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$path_area$function$
CREATE OR REPLACE FUNCTION pg_catalog.area(box)
 RETURNS double precision
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$box_area$function$
CREATE OR REPLACE FUNCTION pg_catalog.area(circle)
 RETURNS double precision
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$circle_area$function$
]]></string>
			<comment><![CDATA[area of circle]]></comment>
		</function>
		<function name="area_002" id="Function_29ba12f8" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.area(path)
 RETURNS double precision
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$path_area$function$
CREATE OR REPLACE FUNCTION pg_catalog.area(box)
 RETURNS double precision
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$box_area$function$
CREATE OR REPLACE FUNCTION pg_catalog.area(circle)
 RETURNS double precision
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$circle_area$function$
]]></string>
			<comment><![CDATA[area of circle]]></comment>
		</function>
		<function name="areajoinsel" id="Function_26cbaa48" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.areajoinsel(internal, oid, internal, smallint, internal)
 RETURNS double precision
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$areajoinsel$function$
]]></string>
			<comment><![CDATA[join selectivity for area-comparison operators]]></comment>
		</function>
		<function name="areasel" id="Function_16ee17" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.areasel(internal, oid, internal, integer)
 RETURNS double precision
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$areasel$function$
]]></string>
			<comment><![CDATA[restriction selectivity for area-comparison operators]]></comment>
		</function>
		<function name="array_agg" id="Function_c2a131" isSystem="false" >
			<comment><![CDATA[concatenate aggregate input into an array]]></comment>
		</function>
		<function name="array_agg_001" id="Function_68e66df" isSystem="false" >
			<comment><![CDATA[concatenate aggregate input into an array]]></comment>
		</function>
		<function name="array_agg_array_finalfn" id="Function_5a64200" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.array_agg_array_finalfn(internal, anyarray)
 RETURNS anyarray
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE
AS $function$array_agg_array_finalfn$function$
]]></string>
			<comment><![CDATA[aggregate final function]]></comment>
		</function>
		<function name="array_agg_array_transfn" id="Function_3423f37a" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.array_agg_array_transfn(internal, anyarray)
 RETURNS internal
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE
AS $function$array_agg_array_transfn$function$
]]></string>
			<comment><![CDATA[aggregate transition function]]></comment>
		</function>
		<function name="array_agg_finalfn" id="Function_31e2d8c0" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.array_agg_finalfn(internal, anynonarray)
 RETURNS anyarray
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE
AS $function$array_agg_finalfn$function$
]]></string>
			<comment><![CDATA[aggregate final function]]></comment>
		</function>
		<function name="array_agg_transfn" id="Function_133fbe25" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.array_agg_transfn(internal, anynonarray)
 RETURNS internal
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE
AS $function$array_agg_transfn$function$
]]></string>
			<comment><![CDATA[aggregate transition function]]></comment>
		</function>
		<function name="array_append" id="Function_1a384ada" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.array_append(anyarray, anyelement)
 RETURNS anyarray
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE
AS $function$array_append$function$
]]></string>
			<comment><![CDATA[append element onto end of array]]></comment>
		</function>
		<function name="array_cat" id="Function_a517a1d" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.array_cat(anyarray, anyarray)
 RETURNS anyarray
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE
AS $function$array_cat$function$
]]></string>
			<comment><![CDATA[implementation of || operator]]></comment>
		</function>
		<function name="array_dims" id="Function_1f2d0550" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.array_dims(anyarray)
 RETURNS text
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$array_dims$function$
]]></string>
			<comment><![CDATA[array dimensions]]></comment>
		</function>
		<function name="array_eq" id="Function_88c811e" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.array_eq(anyarray, anyarray)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$array_eq$function$
]]></string>
			<comment><![CDATA[implementation of = operator]]></comment>
		</function>
		<function name="array_fill" id="Function_2ad57681" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.array_fill(anyelement, integer[])
 RETURNS anyarray
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE
AS $function$array_fill$function$
CREATE OR REPLACE FUNCTION pg_catalog.array_fill(anyelement, integer[], integer[])
 RETURNS anyarray
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE
AS $function$array_fill_with_lower_bounds$function$
]]></string>
			<comment><![CDATA[array constructor with value]]></comment>
		</function>
		<function name="array_fill_001" id="Function_1deb849" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.array_fill(anyelement, integer[])
 RETURNS anyarray
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE
AS $function$array_fill$function$
CREATE OR REPLACE FUNCTION pg_catalog.array_fill(anyelement, integer[], integer[])
 RETURNS anyarray
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE
AS $function$array_fill_with_lower_bounds$function$
]]></string>
			<comment><![CDATA[array constructor with value]]></comment>
		</function>
		<function name="array_ge" id="Function_3031c5f0" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.array_ge(anyarray, anyarray)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$array_ge$function$
]]></string>
			<comment><![CDATA[implementation of >= operator]]></comment>
		</function>
		<function name="array_gt" id="Function_2ec38eb0" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.array_gt(anyarray, anyarray)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$array_gt$function$
]]></string>
			<comment><![CDATA[implementation of > operator]]></comment>
		</function>
		<function name="array_in" id="Function_2be2ee17" isSystem="false" >
			<comment><![CDATA[I/O]]></comment>
		</function>
		<function name="array_larger" id="Function_3a6fec38" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.array_larger(anyarray, anyarray)
 RETURNS anyarray
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$array_larger$function$
]]></string>
			<comment><![CDATA[larger of two]]></comment>
		</function>
		<function name="array_le" id="Function_2b5c509b" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.array_le(anyarray, anyarray)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$array_le$function$
]]></string>
			<comment><![CDATA[implementation of <= operator]]></comment>
		</function>
		<function name="array_length" id="Function_2ac00659" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.array_length(anyarray, integer)
 RETURNS integer
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$array_length$function$
]]></string>
			<comment><![CDATA[array length]]></comment>
		</function>
		<function name="array_lower" id="Function_256f4136" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.array_lower(anyarray, integer)
 RETURNS integer
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$array_lower$function$
]]></string>
			<comment><![CDATA[array lower dimension]]></comment>
		</function>
		<function name="array_lt" id="Function_23600b1f" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.array_lt(anyarray, anyarray)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$array_lt$function$
]]></string>
			<comment><![CDATA[implementation of < operator]]></comment>
		</function>
		<function name="array_ndims" id="Function_7b8e84c" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.array_ndims(anyarray)
 RETURNS integer
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$array_ndims$function$
]]></string>
			<comment><![CDATA[number of array dimensions]]></comment>
		</function>
		<function name="array_ne" id="Function_1deac945" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.array_ne(anyarray, anyarray)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$array_ne$function$
]]></string>
			<comment><![CDATA[implementation of <> operator]]></comment>
		</function>
		<function name="array_out" id="Function_762cdea" isSystem="false" >
			<comment><![CDATA[I/O]]></comment>
		</function>
		<function name="array_position" id="Function_2051a395" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.array_position(anyarray, anyelement)
 RETURNS integer
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE
AS $function$array_position$function$
CREATE OR REPLACE FUNCTION pg_catalog.array_position(anyarray, anyelement, integer)
 RETURNS integer
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE
AS $function$array_position_start$function$
]]></string>
			<comment><![CDATA[returns an offset of value in array]]></comment>
		</function>
		<function name="array_position_001" id="Function_3f56a76" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.array_position(anyarray, anyelement)
 RETURNS integer
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE
AS $function$array_position$function$
CREATE OR REPLACE FUNCTION pg_catalog.array_position(anyarray, anyelement, integer)
 RETURNS integer
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE
AS $function$array_position_start$function$
]]></string>
			<comment><![CDATA[returns an offset of value in array]]></comment>
		</function>
		<function name="array_positions" id="Function_a613726" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.array_positions(anyarray, anyelement)
 RETURNS integer[]
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE
AS $function$array_positions$function$
]]></string>
			<comment><![CDATA[returns an array of offsets of some value in array]]></comment>
		</function>
		<function name="array_prepend" id="Function_246a7f94" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.array_prepend(anyelement, anyarray)
 RETURNS anyarray
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE
AS $function$array_prepend$function$
]]></string>
			<comment><![CDATA[prepend element onto front of array]]></comment>
		</function>
		<function name="array_recv" id="Function_1062d899" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.array_recv(internal, oid, integer)
 RETURNS anyarray
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$array_recv$function$
]]></string>
			<comment><![CDATA[I/O]]></comment>
		</function>
		<function name="array_remove" id="Function_25a8b618" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.array_remove(anyarray, anyelement)
 RETURNS anyarray
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE
AS $function$array_remove$function$
]]></string>
			<comment><![CDATA[remove any occurrences of an element from an array]]></comment>
		</function>
		<function name="array_replace" id="Function_302eeb00" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.array_replace(anyarray, anyelement, anyelement)
 RETURNS anyarray
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE
AS $function$array_replace$function$
]]></string>
			<comment><![CDATA[replace any occurrences of an element in an array]]></comment>
		</function>
		<function name="array_send" id="Function_3264622f" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.array_send(anyarray)
 RETURNS bytea
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$array_send$function$
]]></string>
			<comment><![CDATA[I/O]]></comment>
		</function>
		<function name="array_smaller" id="Function_23235f83" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.array_smaller(anyarray, anyarray)
 RETURNS anyarray
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$array_smaller$function$
]]></string>
			<comment><![CDATA[smaller of two]]></comment>
		</function>
		<function name="array_to_json" id="Function_ded589e" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.array_to_json(anyarray)
 RETURNS json
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$array_to_json$function$
CREATE OR REPLACE FUNCTION pg_catalog.array_to_json(anyarray, boolean)
 RETURNS json
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$array_to_json_pretty$function$
]]></string>
			<comment><![CDATA[map array to json]]></comment>
		</function>
		<function name="array_to_json_001" id="Function_2839c49c" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.array_to_json(anyarray)
 RETURNS json
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$array_to_json$function$
CREATE OR REPLACE FUNCTION pg_catalog.array_to_json(anyarray, boolean)
 RETURNS json
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$array_to_json_pretty$function$
]]></string>
			<comment><![CDATA[map array to json]]></comment>
		</function>
		<function name="array_to_string" id="Function_2bc98d79" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.array_to_string(anyarray, text)
 RETURNS text
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$array_to_text$function$
CREATE OR REPLACE FUNCTION pg_catalog.array_to_string(anyarray, text, text)
 RETURNS text
 LANGUAGE internal
 STABLE PARALLEL SAFE
AS $function$array_to_text_null$function$
]]></string>
			<comment><![CDATA[concatenate array elements, using delimiter and null string, into text]]></comment>
		</function>
		<function name="array_to_string_001" id="Function_27642bf7" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.array_to_string(anyarray, text)
 RETURNS text
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$array_to_text$function$
CREATE OR REPLACE FUNCTION pg_catalog.array_to_string(anyarray, text, text)
 RETURNS text
 LANGUAGE internal
 STABLE PARALLEL SAFE
AS $function$array_to_text_null$function$
]]></string>
			<comment><![CDATA[concatenate array elements, using delimiter and null string, into text]]></comment>
		</function>
		<function name="array_to_tsvector" id="Function_29aed4c7" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.array_to_tsvector(text[])
 RETURNS tsvector
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$array_to_tsvector$function$
]]></string>
			<comment><![CDATA[build tsvector from array of lexemes]]></comment>
		</function>
		<function name="array_typanalyze" id="Function_7562b31" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.array_typanalyze(internal)
 RETURNS boolean
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$array_typanalyze$function$
]]></string>
			<comment><![CDATA[array typanalyze]]></comment>
		</function>
		<function name="array_upper" id="Function_2de410d1" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.array_upper(anyarray, integer)
 RETURNS integer
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$array_upper$function$
]]></string>
			<comment><![CDATA[array upper dimension]]></comment>
		</function>
		<function name="arraycontained" id="Function_2b511748" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.arraycontained(anyarray, anyarray)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$arraycontained$function$
]]></string>
			<comment><![CDATA[implementation of <@ operator]]></comment>
		</function>
		<function name="arraycontains" id="Function_c443ed1" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.arraycontains(anyarray, anyarray)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$arraycontains$function$
]]></string>
			<comment><![CDATA[implementation of @> operator]]></comment>
		</function>
		<function name="arraycontjoinsel" id="Function_37719f1d" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.arraycontjoinsel(internal, oid, internal, smallint, internal)
 RETURNS double precision
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$arraycontjoinsel$function$
]]></string>
			<comment><![CDATA[join selectivity for array-containment operators]]></comment>
		</function>
		<function name="arraycontsel" id="Function_296fe3e1" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.arraycontsel(internal, oid, internal, integer)
 RETURNS double precision
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$arraycontsel$function$
]]></string>
			<comment><![CDATA[restriction selectivity for array-containment operators]]></comment>
		</function>
		<function name="arrayoverlap" id="Function_1d2d1f91" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.arrayoverlap(anyarray, anyarray)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$arrayoverlap$function$
]]></string>
			<comment><![CDATA[implementation of && operator]]></comment>
		</function>
		<function name="ascii" id="Function_2582365b" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.ascii(text)
 RETURNS integer
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$ascii$function$
]]></string>
			<comment><![CDATA[convert first char to int4]]></comment>
		</function>
		<function name="ascii_to_mic" id="Function_17858885" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.ascii_to_mic(integer, integer, cstring, internal, integer)
 RETURNS void
 LANGUAGE c
 PARALLEL SAFE STRICT
AS '$libdir/ascii_and_mic', $function$ascii_to_mic$function$
]]></string>
			<comment><![CDATA[internal conversion function for SQL_ASCII to MULE_INTERNAL]]></comment>
		</function>
		<function name="ascii_to_utf8" id="Function_6cf9d21" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.ascii_to_utf8(integer, integer, cstring, internal, integer)
 RETURNS void
 LANGUAGE c
 PARALLEL SAFE STRICT
AS '$libdir/utf8_and_ascii', $function$ascii_to_utf8$function$
]]></string>
			<comment><![CDATA[internal conversion function for SQL_ASCII to UTF8]]></comment>
		</function>
		<function name="asin" id="Function_3b342375" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.asin(double precision)
 RETURNS double precision
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$dasin$function$
]]></string>
			<comment><![CDATA[arcsine]]></comment>
		</function>
		<function name="asind" id="Function_38b28346" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.asind(double precision)
 RETURNS double precision
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$dasind$function$
]]></string>
			<comment><![CDATA[arcsine, degrees]]></comment>
		</function>
		<function name="atan" id="Function_2329bdbd" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.atan(double precision)
 RETURNS double precision
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$datan$function$
]]></string>
			<comment><![CDATA[arctangent]]></comment>
		</function>
		<function name="atan2" id="Function_92bf180" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.atan2(double precision, double precision)
 RETURNS double precision
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$datan2$function$
]]></string>
			<comment><![CDATA[arctangent, two arguments]]></comment>
		</function>
		<function name="atan2d" id="Function_1002345" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.atan2d(double precision, double precision)
 RETURNS double precision
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$datan2d$function$
]]></string>
			<comment><![CDATA[arctangent, two arguments, degrees]]></comment>
		</function>
		<function name="atand" id="Function_747db21" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.atand(double precision)
 RETURNS double precision
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$datand$function$
]]></string>
			<comment><![CDATA[arctangent, degrees]]></comment>
		</function>
		<function name="avg" id="Function_2bdd12f5" isSystem="false" >
			<comment><![CDATA[the average (arithmetic mean) as numeric of all bigint values]]></comment>
		</function>
		<function name="avg_001" id="Function_2f0aa77f" isSystem="false" >
			<comment><![CDATA[the average (arithmetic mean) as numeric of all bigint values]]></comment>
		</function>
		<function name="avg_002" id="Function_ed8f280" isSystem="false" >
			<comment><![CDATA[the average (arithmetic mean) as numeric of all bigint values]]></comment>
		</function>
		<function name="avg_003" id="Function_c3b3857" isSystem="false" >
			<comment><![CDATA[the average (arithmetic mean) as numeric of all bigint values]]></comment>
		</function>
		<function name="avg_004" id="Function_345e0c73" isSystem="false" >
			<comment><![CDATA[the average (arithmetic mean) as numeric of all bigint values]]></comment>
		</function>
		<function name="avg_005" id="Function_18f39382" isSystem="false" >
			<comment><![CDATA[the average (arithmetic mean) as numeric of all bigint values]]></comment>
		</function>
		<function name="avg_006" id="Function_2bdf3558" isSystem="false" >
			<comment><![CDATA[the average (arithmetic mean) as numeric of all bigint values]]></comment>
		</function>
		<function name="bernoulli" id="Function_17df1402" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.bernoulli(internal)
 RETURNS tsm_handler
 LANGUAGE internal
 PARALLEL SAFE STRICT
AS $function$tsm_bernoulli_handler$function$
]]></string>
			<comment><![CDATA[BERNOULLI tablesample method handler]]></comment>
		</function>
		<function name="big5_to_euc_tw" id="Function_2cc8234a" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.big5_to_euc_tw(integer, integer, cstring, internal, integer)
 RETURNS void
 LANGUAGE c
 PARALLEL SAFE STRICT
AS '$libdir/euc_tw_and_big5', $function$big5_to_euc_tw$function$
]]></string>
			<comment><![CDATA[internal conversion function for BIG5 to EUC_TW]]></comment>
		</function>
		<function name="big5_to_mic" id="Function_106d3fe1" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.big5_to_mic(integer, integer, cstring, internal, integer)
 RETURNS void
 LANGUAGE c
 PARALLEL SAFE STRICT
AS '$libdir/euc_tw_and_big5', $function$big5_to_mic$function$
]]></string>
			<comment><![CDATA[internal conversion function for BIG5 to MULE_INTERNAL]]></comment>
		</function>
		<function name="big5_to_utf8" id="Function_11ce8918" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.big5_to_utf8(integer, integer, cstring, internal, integer)
 RETURNS void
 LANGUAGE c
 PARALLEL SAFE STRICT
AS '$libdir/utf8_and_big5', $function$big5_to_utf8$function$
]]></string>
			<comment><![CDATA[internal conversion function for BIG5 to UTF8]]></comment>
		</function>
		<function name="binary_upgrade_create_empty_extension" id="Function_157d3499" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.binary_upgrade_create_empty_extension(text, text, boolean, text, oid[], text[], text[])
 RETURNS void
 LANGUAGE internal
 PARALLEL RESTRICTED
AS $function$binary_upgrade_create_empty_extension$function$
]]></string>
			<comment><![CDATA[for use by pg_upgrade]]></comment>
		</function>
		<function name="binary_upgrade_set_next_array_pg_type_oid" id="Function_ceaf0d" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.binary_upgrade_set_next_array_pg_type_oid(oid)
 RETURNS void
 LANGUAGE internal
 PARALLEL RESTRICTED STRICT
AS $function$binary_upgrade_set_next_array_pg_type_oid$function$
]]></string>
			<comment><![CDATA[for use by pg_upgrade]]></comment>
		</function>
		<function name="binary_upgrade_set_next_heap_pg_class_oid" id="Function_1b663ce0" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.binary_upgrade_set_next_heap_pg_class_oid(oid)
 RETURNS void
 LANGUAGE internal
 PARALLEL RESTRICTED STRICT
AS $function$binary_upgrade_set_next_heap_pg_class_oid$function$
]]></string>
			<comment><![CDATA[for use by pg_upgrade]]></comment>
		</function>
		<function name="binary_upgrade_set_next_index_pg_class_oid" id="Function_35eb650" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.binary_upgrade_set_next_index_pg_class_oid(oid)
 RETURNS void
 LANGUAGE internal
 PARALLEL RESTRICTED STRICT
AS $function$binary_upgrade_set_next_index_pg_class_oid$function$
]]></string>
			<comment><![CDATA[for use by pg_upgrade]]></comment>
		</function>
		<function name="binary_upgrade_set_next_pg_authid_oid" id="Function_1b3bfd72" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.binary_upgrade_set_next_pg_authid_oid(oid)
 RETURNS void
 LANGUAGE internal
 PARALLEL RESTRICTED STRICT
AS $function$binary_upgrade_set_next_pg_authid_oid$function$
]]></string>
			<comment><![CDATA[for use by pg_upgrade]]></comment>
		</function>
		<function name="binary_upgrade_set_next_pg_enum_oid" id="Function_32b07f2" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.binary_upgrade_set_next_pg_enum_oid(oid)
 RETURNS void
 LANGUAGE internal
 PARALLEL RESTRICTED STRICT
AS $function$binary_upgrade_set_next_pg_enum_oid$function$
]]></string>
			<comment><![CDATA[for use by pg_upgrade]]></comment>
		</function>
		<function name="binary_upgrade_set_next_pg_type_oid" id="Function_12b00bae" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.binary_upgrade_set_next_pg_type_oid(oid)
 RETURNS void
 LANGUAGE internal
 PARALLEL RESTRICTED STRICT
AS $function$binary_upgrade_set_next_pg_type_oid$function$
]]></string>
			<comment><![CDATA[for use by pg_upgrade]]></comment>
		</function>
		<function name="binary_upgrade_set_next_toast_pg_class_oid" id="Function_15c6e64f" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.binary_upgrade_set_next_toast_pg_class_oid(oid)
 RETURNS void
 LANGUAGE internal
 PARALLEL RESTRICTED STRICT
AS $function$binary_upgrade_set_next_toast_pg_class_oid$function$
]]></string>
			<comment><![CDATA[for use by pg_upgrade]]></comment>
		</function>
		<function name="binary_upgrade_set_next_toast_pg_type_oid" id="Function_3625ec6b" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.binary_upgrade_set_next_toast_pg_type_oid(oid)
 RETURNS void
 LANGUAGE internal
 PARALLEL RESTRICTED STRICT
AS $function$binary_upgrade_set_next_toast_pg_type_oid$function$
]]></string>
			<comment><![CDATA[for use by pg_upgrade]]></comment>
		</function>
		<function name="binary_upgrade_set_record_init_privs" id="Function_334087b9" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.binary_upgrade_set_record_init_privs(boolean)
 RETURNS void
 LANGUAGE internal
 PARALLEL RESTRICTED STRICT
AS $function$binary_upgrade_set_record_init_privs$function$
]]></string>
			<comment><![CDATA[for use by pg_upgrade]]></comment>
		</function>
		<function name="bit" id="Function_3779d8e9" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog."bit"(bigint, integer)
 RETURNS bit
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$bitfromint8$function$
CREATE OR REPLACE FUNCTION pg_catalog."bit"(integer, integer)
 RETURNS bit
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$bitfromint4$function$
CREATE OR REPLACE FUNCTION pg_catalog."bit"(bit, integer, boolean)
 RETURNS bit
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$bit$function$
]]></string>
			<comment><![CDATA[convert int4 to bitstring]]></comment>
		</function>
		<function name="bit_001" id="Function_3b3241a6" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog."bit"(bigint, integer)
 RETURNS bit
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$bitfromint8$function$
CREATE OR REPLACE FUNCTION pg_catalog."bit"(integer, integer)
 RETURNS bit
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$bitfromint4$function$
CREATE OR REPLACE FUNCTION pg_catalog."bit"(bit, integer, boolean)
 RETURNS bit
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$bit$function$
]]></string>
			<comment><![CDATA[convert int4 to bitstring]]></comment>
		</function>
		<function name="bit_002" id="Function_1979ebf8" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog."bit"(bigint, integer)
 RETURNS bit
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$bitfromint8$function$
CREATE OR REPLACE FUNCTION pg_catalog."bit"(integer, integer)
 RETURNS bit
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$bitfromint4$function$
CREATE OR REPLACE FUNCTION pg_catalog."bit"(bit, integer, boolean)
 RETURNS bit
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$bit$function$
]]></string>
			<comment><![CDATA[convert int4 to bitstring]]></comment>
		</function>
		<function name="bit_and" id="Function_12ec054f" isSystem="false" >
			<comment><![CDATA[bitwise-and smallint aggregate]]></comment>
		</function>
		<function name="bit_and_001" id="Function_39dba552" isSystem="false" >
			<comment><![CDATA[bitwise-and smallint aggregate]]></comment>
		</function>
		<function name="bit_and_002" id="Function_37a43d64" isSystem="false" >
			<comment><![CDATA[bitwise-and smallint aggregate]]></comment>
		</function>
		<function name="bit_and_003" id="Function_1c26fa98" isSystem="false" >
			<comment><![CDATA[bitwise-and smallint aggregate]]></comment>
		</function>
		<function name="bit_in" id="Function_16855428" isSystem="false" >
			<comment><![CDATA[I/O]]></comment>
		</function>
		<function name="bit_length" id="Function_6c60abe" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.bit_length(bytea)
 RETURNS integer
 LANGUAGE sql
 IMMUTABLE PARALLEL SAFE STRICT COST 1
AS $function$select pg_catalog.octet_length($1) * 8$function$
CREATE OR REPLACE FUNCTION pg_catalog.bit_length(text)
 RETURNS integer
 LANGUAGE sql
 IMMUTABLE PARALLEL SAFE STRICT COST 1
AS $function$select pg_catalog.octet_length($1) * 8$function$
CREATE OR REPLACE FUNCTION pg_catalog.bit_length(bit)
 RETURNS integer
 LANGUAGE sql
 IMMUTABLE PARALLEL SAFE STRICT COST 1
AS $function$select pg_catalog.length($1)$function$
]]></string>
			<comment><![CDATA[length in bits]]></comment>
		</function>
		<function name="bit_length_001" id="Function_326c2aa1" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.bit_length(bytea)
 RETURNS integer
 LANGUAGE sql
 IMMUTABLE PARALLEL SAFE STRICT COST 1
AS $function$select pg_catalog.octet_length($1) * 8$function$
CREATE OR REPLACE FUNCTION pg_catalog.bit_length(text)
 RETURNS integer
 LANGUAGE sql
 IMMUTABLE PARALLEL SAFE STRICT COST 1
AS $function$select pg_catalog.octet_length($1) * 8$function$
CREATE OR REPLACE FUNCTION pg_catalog.bit_length(bit)
 RETURNS integer
 LANGUAGE sql
 IMMUTABLE PARALLEL SAFE STRICT COST 1
AS $function$select pg_catalog.length($1)$function$
]]></string>
			<comment><![CDATA[length in bits]]></comment>
		</function>
		<function name="bit_length_002" id="Function_275532bc" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.bit_length(bytea)
 RETURNS integer
 LANGUAGE sql
 IMMUTABLE PARALLEL SAFE STRICT COST 1
AS $function$select pg_catalog.octet_length($1) * 8$function$
CREATE OR REPLACE FUNCTION pg_catalog.bit_length(text)
 RETURNS integer
 LANGUAGE sql
 IMMUTABLE PARALLEL SAFE STRICT COST 1
AS $function$select pg_catalog.octet_length($1) * 8$function$
CREATE OR REPLACE FUNCTION pg_catalog.bit_length(bit)
 RETURNS integer
 LANGUAGE sql
 IMMUTABLE PARALLEL SAFE STRICT COST 1
AS $function$select pg_catalog.length($1)$function$
]]></string>
			<comment><![CDATA[length in bits]]></comment>
		</function>
		<function name="bit_or" id="Function_115522e5" isSystem="false" >
			<comment><![CDATA[bitwise-or smallint aggregate]]></comment>
		</function>
		<function name="bit_or_001" id="Function_2917a8e4" isSystem="false" >
			<comment><![CDATA[bitwise-or smallint aggregate]]></comment>
		</function>
		<function name="bit_or_002" id="Function_11e80630" isSystem="false" >
			<comment><![CDATA[bitwise-or smallint aggregate]]></comment>
		</function>
		<function name="bit_or_003" id="Function_1b506369" isSystem="false" >
			<comment><![CDATA[bitwise-or smallint aggregate]]></comment>
		</function>
		<function name="bit_out" id="Function_38e11b75" isSystem="false" >
			<comment><![CDATA[I/O]]></comment>
		</function>
		<function name="bit_recv" id="Function_25de061e" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.bit_recv(internal, oid, integer)
 RETURNS bit
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$bit_recv$function$
]]></string>
			<comment><![CDATA[I/O]]></comment>
		</function>
		<function name="bit_send" id="Function_1ab771cb" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.bit_send(bit)
 RETURNS bytea
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$bit_send$function$
]]></string>
			<comment><![CDATA[I/O]]></comment>
		</function>
		<function name="bitand" id="Function_22d354eb" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.bitand(bit, bit)
 RETURNS bit
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$bit_and$function$
]]></string>
			<comment><![CDATA[implementation of & operator]]></comment>
		</function>
		<function name="bitcat" id="Function_a33d378" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.bitcat(bit varying, bit varying)
 RETURNS bit varying
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$bitcat$function$
]]></string>
			<comment><![CDATA[implementation of || operator]]></comment>
		</function>
		<function name="bitcmp" id="Function_53bc727" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.bitcmp(bit, bit)
 RETURNS integer
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$bitcmp$function$
]]></string>
			<comment><![CDATA[less-equal-greater]]></comment>
		</function>
		<function name="biteq" id="Function_1d991da0" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.biteq(bit, bit)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT LEAKPROOF
AS $function$biteq$function$
]]></string>
			<comment><![CDATA[implementation of = operator]]></comment>
		</function>
		<function name="bitge" id="Function_35d2dcb7" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.bitge(bit, bit)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT LEAKPROOF
AS $function$bitge$function$
]]></string>
			<comment><![CDATA[implementation of >= operator]]></comment>
		</function>
		<function name="bitgt" id="Function_358b8441" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.bitgt(bit, bit)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT LEAKPROOF
AS $function$bitgt$function$
]]></string>
			<comment><![CDATA[implementation of > operator]]></comment>
		</function>
		<function name="bitle" id="Function_90e9f21" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.bitle(bit, bit)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT LEAKPROOF
AS $function$bitle$function$
]]></string>
			<comment><![CDATA[implementation of <= operator]]></comment>
		</function>
		<function name="bitlt" id="Function_1c9df158" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.bitlt(bit, bit)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT LEAKPROOF
AS $function$bitlt$function$
]]></string>
			<comment><![CDATA[implementation of < operator]]></comment>
		</function>
		<function name="bitne" id="Function_39ea2f85" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.bitne(bit, bit)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT LEAKPROOF
AS $function$bitne$function$
]]></string>
			<comment><![CDATA[implementation of <> operator]]></comment>
		</function>
		<function name="bitnot" id="Function_2da0c201" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.bitnot(bit)
 RETURNS bit
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$bitnot$function$
]]></string>
			<comment><![CDATA[implementation of ~ operator]]></comment>
		</function>
		<function name="bitor" id="Function_1c69f665" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.bitor(bit, bit)
 RETURNS bit
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$bit_or$function$
]]></string>
			<comment><![CDATA[implementation of | operator]]></comment>
		</function>
		<function name="bitshiftleft" id="Function_2fced846" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.bitshiftleft(bit, integer)
 RETURNS bit
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$bitshiftleft$function$
]]></string>
			<comment><![CDATA[implementation of << operator]]></comment>
		</function>
		<function name="bitshiftright" id="Function_6e08191" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.bitshiftright(bit, integer)
 RETURNS bit
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$bitshiftright$function$
]]></string>
			<comment><![CDATA[implementation of >> operator]]></comment>
		</function>
		<function name="bittypmodin" id="Function_7ca3c8" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.bittypmodin(cstring[])
 RETURNS integer
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$bittypmodin$function$
]]></string>
			<comment><![CDATA[I/O typmod]]></comment>
		</function>
		<function name="bittypmodout" id="Function_263c4867" isSystem="false" >
			<comment><![CDATA[I/O typmod]]></comment>
		</function>
		<function name="bitxor" id="Function_14c8ebf1" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.bitxor(bit, bit)
 RETURNS bit
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$bitxor$function$
]]></string>
			<comment><![CDATA[implementation of # operator]]></comment>
		</function>
		<function name="bool" id="Function_14b6f33f" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.bool(integer)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$int4_bool$function$
]]></string>
			<comment><![CDATA[convert int4 to boolean]]></comment>
		</function>
		<function name="bool_accum" id="Function_15bf2774" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.bool_accum(internal, boolean)
 RETURNS internal
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE
AS $function$bool_accum$function$
]]></string>
			<comment><![CDATA[aggregate transition function]]></comment>
		</function>
		<function name="bool_accum_inv" id="Function_3624a829" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.bool_accum_inv(internal, boolean)
 RETURNS internal
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE
AS $function$bool_accum_inv$function$
]]></string>
			<comment><![CDATA[aggregate transition function]]></comment>
		</function>
		<function name="bool_alltrue" id="Function_11f9db36" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.bool_alltrue(internal)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$bool_alltrue$function$
]]></string>
			<comment><![CDATA[aggregate final function]]></comment>
		</function>
		<function name="bool_and" id="Function_a24a2d4" isSystem="false" >
			<comment><![CDATA[boolean-and aggregate]]></comment>
		</function>
		<function name="bool_anytrue" id="Function_4b5c983" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.bool_anytrue(internal)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$bool_anytrue$function$
]]></string>
			<comment><![CDATA[aggregate final function]]></comment>
		</function>
		<function name="bool_or" id="Function_1cf90a6d" isSystem="false" >
			<comment><![CDATA[boolean-or aggregate]]></comment>
		</function>
		<function name="booland_statefunc" id="Function_8074158" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.booland_statefunc(boolean, boolean)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$booland_statefunc$function$
]]></string>
			<comment><![CDATA[aggregate transition function]]></comment>
		</function>
		<function name="booleq" id="Function_2c91627e" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.booleq(boolean, boolean)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT LEAKPROOF
AS $function$booleq$function$
]]></string>
			<comment><![CDATA[implementation of = operator]]></comment>
		</function>
		<function name="boolge" id="Function_d999c49" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.boolge(boolean, boolean)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT LEAKPROOF
AS $function$boolge$function$
]]></string>
			<comment><![CDATA[implementation of >= operator]]></comment>
		</function>
		<function name="boolgt" id="Function_56a9ada" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.boolgt(boolean, boolean)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT LEAKPROOF
AS $function$boolgt$function$
]]></string>
			<comment><![CDATA[implementation of > operator]]></comment>
		</function>
		<function name="boolin" id="Function_890c91d" isSystem="false" >
			<comment><![CDATA[I/O]]></comment>
		</function>
		<function name="boolle" id="Function_15b13a53" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.boolle(boolean, boolean)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT LEAKPROOF
AS $function$boolle$function$
]]></string>
			<comment><![CDATA[implementation of <= operator]]></comment>
		</function>
		<function name="boollt" id="Function_32d3ac26" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.boollt(boolean, boolean)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT LEAKPROOF
AS $function$boollt$function$
]]></string>
			<comment><![CDATA[implementation of < operator]]></comment>
		</function>
		<function name="boolne" id="Function_320a3b5f" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.boolne(boolean, boolean)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT LEAKPROOF
AS $function$boolne$function$
]]></string>
			<comment><![CDATA[implementation of <> operator]]></comment>
		</function>
		<function name="boolor_statefunc" id="Function_645f1af" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.boolor_statefunc(boolean, boolean)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$boolor_statefunc$function$
]]></string>
			<comment><![CDATA[aggregate transition function]]></comment>
		</function>
		<function name="boolout" id="Function_1334a8ca" isSystem="false" >
			<comment><![CDATA[I/O]]></comment>
		</function>
		<function name="boolrecv" id="Function_2436d079" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.boolrecv(internal)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$boolrecv$function$
]]></string>
			<comment><![CDATA[I/O]]></comment>
		</function>
		<function name="boolsend" id="Function_2d471e41" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.boolsend(boolean)
 RETURNS bytea
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$boolsend$function$
]]></string>
			<comment><![CDATA[I/O]]></comment>
		</function>
		<function name="bound_box" id="Function_3676657a" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.bound_box(box, box)
 RETURNS box
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$boxes_bound_box$function$
]]></string>
			<comment><![CDATA[bounding box of two boxes]]></comment>
		</function>
		<function name="box" id="Function_117de74a" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.box(point, point)
 RETURNS box
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$points_box$function$
CREATE OR REPLACE FUNCTION pg_catalog.box(polygon)
 RETURNS box
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$poly_box$function$
CREATE OR REPLACE FUNCTION pg_catalog.box(point)
 RETURNS box
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$point_box$function$
CREATE OR REPLACE FUNCTION pg_catalog.box(circle)
 RETURNS box
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$circle_box$function$
]]></string>
			<comment><![CDATA[convert points to box]]></comment>
		</function>
		<function name="box_001" id="Function_1af3fbd4" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.box(point, point)
 RETURNS box
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$points_box$function$
CREATE OR REPLACE FUNCTION pg_catalog.box(polygon)
 RETURNS box
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$poly_box$function$
CREATE OR REPLACE FUNCTION pg_catalog.box(point)
 RETURNS box
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$point_box$function$
CREATE OR REPLACE FUNCTION pg_catalog.box(circle)
 RETURNS box
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$circle_box$function$
]]></string>
			<comment><![CDATA[convert points to box]]></comment>
		</function>
		<function name="box_002" id="Function_3628758c" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.box(point, point)
 RETURNS box
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$points_box$function$
CREATE OR REPLACE FUNCTION pg_catalog.box(polygon)
 RETURNS box
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$poly_box$function$
CREATE OR REPLACE FUNCTION pg_catalog.box(point)
 RETURNS box
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$point_box$function$
CREATE OR REPLACE FUNCTION pg_catalog.box(circle)
 RETURNS box
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$circle_box$function$
]]></string>
			<comment><![CDATA[convert points to box]]></comment>
		</function>
		<function name="box_003" id="Function_29b2bf62" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.box(point, point)
 RETURNS box
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$points_box$function$
CREATE OR REPLACE FUNCTION pg_catalog.box(polygon)
 RETURNS box
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$poly_box$function$
CREATE OR REPLACE FUNCTION pg_catalog.box(point)
 RETURNS box
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$point_box$function$
CREATE OR REPLACE FUNCTION pg_catalog.box(circle)
 RETURNS box
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$circle_box$function$
]]></string>
			<comment><![CDATA[convert points to box]]></comment>
		</function>
		<function name="box_above" id="Function_249d59bb" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.box_above(box, box)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$box_above$function$
]]></string>
			<comment><![CDATA[implementation of |>> operator]]></comment>
		</function>
		<function name="box_above_eq" id="Function_2f86cb5a" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.box_above_eq(box, box)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$box_above_eq$function$
]]></string>
			<comment><![CDATA[implementation of >^ operator]]></comment>
		</function>
		<function name="box_add" id="Function_293d3b35" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.box_add(box, point)
 RETURNS box
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$box_add$function$
]]></string>
			<comment><![CDATA[implementation of + operator]]></comment>
		</function>
		<function name="box_below" id="Function_37a6d9c1" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.box_below(box, box)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$box_below$function$
]]></string>
			<comment><![CDATA[implementation of <<| operator]]></comment>
		</function>
		<function name="box_below_eq" id="Function_36aef0e2" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.box_below_eq(box, box)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$box_below_eq$function$
]]></string>
			<comment><![CDATA[implementation of <^ operator]]></comment>
		</function>
		<function name="box_center" id="Function_3b5ab77e" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.box_center(box)
 RETURNS point
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$box_center$function$
]]></string>
			<comment><![CDATA[implementation of @@ operator]]></comment>
		</function>
		<function name="box_contain" id="Function_3b999759" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.box_contain(box, box)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$box_contain$function$
]]></string>
			<comment><![CDATA[implementation of @> operator]]></comment>
		</function>
		<function name="box_contain_pt" id="Function_26646dda" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.box_contain_pt(box, point)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$box_contain_pt$function$
]]></string>
			<comment><![CDATA[implementation of @> operator]]></comment>
		</function>
		<function name="box_contained" id="Function_1becbca8" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.box_contained(box, box)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$box_contained$function$
]]></string>
			<comment><![CDATA[implementation of <@ operator]]></comment>
		</function>
		<function name="box_distance" id="Function_3420fac2" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.box_distance(box, box)
 RETURNS double precision
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$box_distance$function$
]]></string>
			<comment><![CDATA[implementation of <-> operator]]></comment>
		</function>
		<function name="box_div" id="Function_1c4f2e2e" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.box_div(box, point)
 RETURNS box
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$box_div$function$
]]></string>
			<comment><![CDATA[implementation of / operator]]></comment>
		</function>
		<function name="box_eq" id="Function_16944b82" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.box_eq(box, box)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$box_eq$function$
]]></string>
			<comment><![CDATA[implementation of = operator]]></comment>
		</function>
		<function name="box_ge" id="Function_1826aa97" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.box_ge(box, box)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$box_ge$function$
]]></string>
			<comment><![CDATA[implementation of >= operator]]></comment>
		</function>
		<function name="box_gt" id="Function_124ac78d" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.box_gt(box, box)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$box_gt$function$
]]></string>
			<comment><![CDATA[implementation of > operator]]></comment>
		</function>
		<function name="box_in" id="Function_18d807a8" isSystem="false" >
			<comment><![CDATA[I/O]]></comment>
		</function>
		<function name="box_intersect" id="Function_d76268c" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.box_intersect(box, box)
 RETURNS box
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$box_intersect$function$
]]></string>
			<comment><![CDATA[implementation of # operator]]></comment>
		</function>
		<function name="box_le" id="Function_406f109" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.box_le(box, box)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$box_le$function$
]]></string>
			<comment><![CDATA[implementation of <= operator]]></comment>
		</function>
		<function name="box_left" id="Function_259a850e" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.box_left(box, box)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$box_left$function$
]]></string>
			<comment><![CDATA[implementation of << operator]]></comment>
		</function>
		<function name="box_lt" id="Function_1f818066" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.box_lt(box, box)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$box_lt$function$
]]></string>
			<comment><![CDATA[implementation of < operator]]></comment>
		</function>
		<function name="box_mul" id="Function_2a5979ba" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.box_mul(box, point)
 RETURNS box
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$box_mul$function$
]]></string>
			<comment><![CDATA[implementation of * operator]]></comment>
		</function>
		<function name="box_out" id="Function_1d02f529" isSystem="false" >
			<comment><![CDATA[I/O]]></comment>
		</function>
		<function name="box_overabove" id="Function_b82f426" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.box_overabove(box, box)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$box_overabove$function$
]]></string>
			<comment><![CDATA[implementation of |&> operator]]></comment>
		</function>
		<function name="box_overbelow" id="Function_2ba083f6" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.box_overbelow(box, box)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$box_overbelow$function$
]]></string>
			<comment><![CDATA[implementation of &<| operator]]></comment>
		</function>
		<function name="box_overlap" id="Function_95068b" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.box_overlap(box, box)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$box_overlap$function$
]]></string>
			<comment><![CDATA[implementation of && operator]]></comment>
		</function>
		<function name="box_overleft" id="Function_23a77943" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.box_overleft(box, box)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$box_overleft$function$
]]></string>
			<comment><![CDATA[implementation of &< operator]]></comment>
		</function>
		<function name="box_overright" id="Function_bad6b1c" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.box_overright(box, box)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$box_overright$function$
]]></string>
			<comment><![CDATA[implementation of &> operator]]></comment>
		</function>
		<function name="box_recv" id="Function_3483680f" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.box_recv(internal)
 RETURNS box
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$box_recv$function$
]]></string>
			<comment><![CDATA[I/O]]></comment>
		</function>
		<function name="box_right" id="Function_372a91bd" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.box_right(box, box)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$box_right$function$
]]></string>
			<comment><![CDATA[implementation of >> operator]]></comment>
		</function>
		<function name="box_same" id="Function_23299b51" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.box_same(box, box)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$box_same$function$
]]></string>
			<comment><![CDATA[implementation of ~= operator]]></comment>
		</function>
		<function name="box_send" id="Function_30ee2229" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.box_send(box)
 RETURNS bytea
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$box_send$function$
]]></string>
			<comment><![CDATA[I/O]]></comment>
		</function>
		<function name="box_sub" id="Function_363cd48a" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.box_sub(box, point)
 RETURNS box
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$box_sub$function$
]]></string>
			<comment><![CDATA[implementation of - operator]]></comment>
		</function>
		<function name="bpchar" id="Function_32c84ac9" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.bpchar("char")
 RETURNS character
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$char_bpchar$function$
CREATE OR REPLACE FUNCTION pg_catalog.bpchar(name)
 RETURNS character
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$name_bpchar$function$
CREATE OR REPLACE FUNCTION pg_catalog.bpchar(character, integer, boolean)
 RETURNS character
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$bpchar$function$
]]></string>
			<comment><![CDATA[convert name to char(n)]]></comment>
		</function>
		<function name="bpchar_001" id="Function_2b991f2" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.bpchar("char")
 RETURNS character
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$char_bpchar$function$
CREATE OR REPLACE FUNCTION pg_catalog.bpchar(name)
 RETURNS character
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$name_bpchar$function$
CREATE OR REPLACE FUNCTION pg_catalog.bpchar(character, integer, boolean)
 RETURNS character
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$bpchar$function$
]]></string>
			<comment><![CDATA[convert name to char(n)]]></comment>
		</function>
		<function name="bpchar_002" id="Function_2a95ab10" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.bpchar("char")
 RETURNS character
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$char_bpchar$function$
CREATE OR REPLACE FUNCTION pg_catalog.bpchar(name)
 RETURNS character
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$name_bpchar$function$
CREATE OR REPLACE FUNCTION pg_catalog.bpchar(character, integer, boolean)
 RETURNS character
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$bpchar$function$
]]></string>
			<comment><![CDATA[convert name to char(n)]]></comment>
		</function>
		<function name="bpchar_larger" id="Function_bdeab73" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.bpchar_larger(character, character)
 RETURNS character
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$bpchar_larger$function$
]]></string>
			<comment><![CDATA[larger of two]]></comment>
		</function>
		<function name="bpchar_pattern_ge" id="Function_742b9d2" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.bpchar_pattern_ge(character, character)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$bpchar_pattern_ge$function$
]]></string>
			<comment><![CDATA[implementation of ~>=~ operator]]></comment>
		</function>
		<function name="bpchar_pattern_gt" id="Function_2f482270" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.bpchar_pattern_gt(character, character)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$bpchar_pattern_gt$function$
]]></string>
			<comment><![CDATA[implementation of ~>~ operator]]></comment>
		</function>
		<function name="bpchar_pattern_le" id="Function_1013519b" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.bpchar_pattern_le(character, character)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$bpchar_pattern_le$function$
]]></string>
			<comment><![CDATA[implementation of ~<=~ operator]]></comment>
		</function>
		<function name="bpchar_pattern_lt" id="Function_ba88aba" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.bpchar_pattern_lt(character, character)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$bpchar_pattern_lt$function$
]]></string>
			<comment><![CDATA[implementation of ~<~ operator]]></comment>
		</function>
		<function name="bpchar_smaller" id="Function_cf48fc3" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.bpchar_smaller(character, character)
 RETURNS character
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$bpchar_smaller$function$
]]></string>
			<comment><![CDATA[smaller of two]]></comment>
		</function>
		<function name="bpchar_sortsupport" id="Function_24d38ff6" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.bpchar_sortsupport(internal)
 RETURNS void
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$bpchar_sortsupport$function$
]]></string>
			<comment><![CDATA[sort support]]></comment>
		</function>
		<function name="bpcharcmp" id="Function_20336a70" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.bpcharcmp(character, character)
 RETURNS integer
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$bpcharcmp$function$
]]></string>
			<comment><![CDATA[less-equal-greater]]></comment>
		</function>
		<function name="bpchareq" id="Function_221d2818" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.bpchareq(character, character)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT LEAKPROOF
AS $function$bpchareq$function$
]]></string>
			<comment><![CDATA[implementation of = operator]]></comment>
		</function>
		<function name="bpcharge" id="Function_347afa99" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.bpcharge(character, character)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$bpcharge$function$
]]></string>
			<comment><![CDATA[implementation of >= operator]]></comment>
		</function>
		<function name="bpchargt" id="Function_efbdb44" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.bpchargt(character, character)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$bpchargt$function$
]]></string>
			<comment><![CDATA[implementation of > operator]]></comment>
		</function>
		<function name="bpchariclike" id="Function_220e9661" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.bpchariclike(character, text)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$texticlike$function$
]]></string>
			<comment><![CDATA[implementation of ~~* operator]]></comment>
		</function>
		<function name="bpcharicnlike" id="Function_1b8b090a" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.bpcharicnlike(character, text)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$texticnlike$function$
]]></string>
			<comment><![CDATA[implementation of !~~* operator]]></comment>
		</function>
		<function name="bpcharicregexeq" id="Function_1f1a6cd" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.bpcharicregexeq(character, text)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$texticregexeq$function$
]]></string>
			<comment><![CDATA[implementation of ~* operator]]></comment>
		</function>
		<function name="bpcharicregexne" id="Function_11b492c0" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.bpcharicregexne(character, text)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$texticregexne$function$
]]></string>
			<comment><![CDATA[implementation of !~* operator]]></comment>
		</function>
		<function name="bpcharin" id="Function_2145145d" isSystem="false" >
			<comment><![CDATA[I/O]]></comment>
		</function>
		<function name="bpcharle" id="Function_20cf2ffc" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.bpcharle(character, character)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$bpcharle$function$
]]></string>
			<comment><![CDATA[implementation of <= operator]]></comment>
		</function>
		<function name="bpcharlike" id="Function_397baabd" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.bpcharlike(character, text)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$textlike$function$
]]></string>
			<comment><![CDATA[implementation of ~~ operator]]></comment>
		</function>
		<function name="bpcharlt" id="Function_3b958ccd" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.bpcharlt(character, character)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$bpcharlt$function$
]]></string>
			<comment><![CDATA[implementation of < operator]]></comment>
		</function>
		<function name="bpcharne" id="Function_b625834" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.bpcharne(character, character)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT LEAKPROOF
AS $function$bpcharne$function$
]]></string>
			<comment><![CDATA[implementation of <> operator]]></comment>
		</function>
		<function name="bpcharnlike" id="Function_3c971b5" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.bpcharnlike(character, text)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$textnlike$function$
]]></string>
			<comment><![CDATA[implementation of !~~ operator]]></comment>
		</function>
		<function name="bpcharout" id="Function_152d24c4" isSystem="false" >
			<comment><![CDATA[I/O]]></comment>
		</function>
		<function name="bpcharrecv" id="Function_150653e" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.bpcharrecv(internal, oid, integer)
 RETURNS character
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$bpcharrecv$function$
]]></string>
			<comment><![CDATA[I/O]]></comment>
		</function>
		<function name="bpcharregexeq" id="Function_388a7ec9" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.bpcharregexeq(character, text)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$textregexeq$function$
]]></string>
			<comment><![CDATA[implementation of ~ operator]]></comment>
		</function>
		<function name="bpcharregexne" id="Function_37c3102b" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.bpcharregexne(character, text)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$textregexne$function$
]]></string>
			<comment><![CDATA[implementation of !~ operator]]></comment>
		</function>
		<function name="bpcharsend" id="Function_31a90ee8" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.bpcharsend(character)
 RETURNS bytea
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$bpcharsend$function$
]]></string>
			<comment><![CDATA[I/O]]></comment>
		</function>
		<function name="bpchartypmodin" id="Function_25feb16b" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.bpchartypmodin(cstring[])
 RETURNS integer
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$bpchartypmodin$function$
]]></string>
			<comment><![CDATA[I/O typmod]]></comment>
		</function>
		<function name="bpchartypmodout" id="Function_1ac18c66" isSystem="false" >
			<comment><![CDATA[I/O typmod]]></comment>
		</function>
		<function name="brin_inclusion_add_value" id="Function_2930717d" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.brin_inclusion_add_value(internal, internal, internal, internal)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$brin_inclusion_add_value$function$
]]></string>
			<comment><![CDATA[BRIN inclusion support]]></comment>
		</function>
		<function name="brin_inclusion_consistent" id="Function_a3f86ab" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.brin_inclusion_consistent(internal, internal, internal)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$brin_inclusion_consistent$function$
]]></string>
			<comment><![CDATA[BRIN inclusion support]]></comment>
		</function>
		<function name="brin_inclusion_opcinfo" id="Function_3b7e6fa0" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.brin_inclusion_opcinfo(internal)
 RETURNS internal
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$brin_inclusion_opcinfo$function$
]]></string>
			<comment><![CDATA[BRIN inclusion support]]></comment>
		</function>
		<function name="brin_inclusion_union" id="Function_4c47cc9" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.brin_inclusion_union(internal, internal, internal)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$brin_inclusion_union$function$
]]></string>
			<comment><![CDATA[BRIN inclusion support]]></comment>
		</function>
		<function name="brin_minmax_add_value" id="Function_31530116" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.brin_minmax_add_value(internal, internal, internal, internal)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$brin_minmax_add_value$function$
]]></string>
			<comment><![CDATA[BRIN minmax support]]></comment>
		</function>
		<function name="brin_minmax_consistent" id="Function_1c454660" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.brin_minmax_consistent(internal, internal, internal)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$brin_minmax_consistent$function$
]]></string>
			<comment><![CDATA[BRIN minmax support]]></comment>
		</function>
		<function name="brin_minmax_opcinfo" id="Function_17463132" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.brin_minmax_opcinfo(internal)
 RETURNS internal
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$brin_minmax_opcinfo$function$
]]></string>
			<comment><![CDATA[BRIN minmax support]]></comment>
		</function>
		<function name="brin_minmax_union" id="Function_16e7cbcb" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.brin_minmax_union(internal, internal, internal)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$brin_minmax_union$function$
]]></string>
			<comment><![CDATA[BRIN minmax support]]></comment>
		</function>
		<function name="brin_summarize_new_values" id="Function_2baffeae" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.brin_summarize_new_values(regclass)
 RETURNS integer
 LANGUAGE internal
 PARALLEL SAFE STRICT
AS $function$brin_summarize_new_values$function$
]]></string>
			<comment><![CDATA[brin: standalone scan new table pages]]></comment>
		</function>
		<function name="brinhandler" id="Function_37e4a1b1" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.brinhandler(internal)
 RETURNS index_am_handler
 LANGUAGE internal
 PARALLEL SAFE STRICT
AS $function$brinhandler$function$
]]></string>
			<comment><![CDATA[brin index access method handler]]></comment>
		</function>
		<function name="broadcast" id="Function_25ef6d3c" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.broadcast(inet)
 RETURNS inet
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$network_broadcast$function$
]]></string>
			<comment><![CDATA[broadcast address of network]]></comment>
		</function>
		<function name="btabstimecmp" id="Function_36baf17a" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.btabstimecmp(abstime, abstime)
 RETURNS integer
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$btabstimecmp$function$
]]></string>
			<comment><![CDATA[less-equal-greater]]></comment>
		</function>
		<function name="btarraycmp" id="Function_194385a6" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.btarraycmp(anyarray, anyarray)
 RETURNS integer
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$btarraycmp$function$
]]></string>
			<comment><![CDATA[less-equal-greater]]></comment>
		</function>
		<function name="btboolcmp" id="Function_30bf3d6" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.btboolcmp(boolean, boolean)
 RETURNS integer
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$btboolcmp$function$
]]></string>
			<comment><![CDATA[less-equal-greater]]></comment>
		</function>
		<function name="btbpchar_pattern_cmp" id="Function_3191b9d" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.btbpchar_pattern_cmp(character, character)
 RETURNS integer
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$btbpchar_pattern_cmp$function$
]]></string>
			<comment><![CDATA[less-equal-greater]]></comment>
		</function>
		<function name="btbpchar_pattern_sortsupport" id="Function_21646f9b" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.btbpchar_pattern_sortsupport(internal)
 RETURNS void
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$btbpchar_pattern_sortsupport$function$
]]></string>
			<comment><![CDATA[sort support]]></comment>
		</function>
		<function name="btcharcmp" id="Function_26142a9a" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.btcharcmp("char", "char")
 RETURNS integer
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$btcharcmp$function$
]]></string>
			<comment><![CDATA[less-equal-greater]]></comment>
		</function>
		<function name="btfloat48cmp" id="Function_13101720" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.btfloat48cmp(real, double precision)
 RETURNS integer
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$btfloat48cmp$function$
]]></string>
			<comment><![CDATA[less-equal-greater]]></comment>
		</function>
		<function name="btfloat4cmp" id="Function_25138ef8" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.btfloat4cmp(real, real)
 RETURNS integer
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$btfloat4cmp$function$
]]></string>
			<comment><![CDATA[less-equal-greater]]></comment>
		</function>
		<function name="btfloat4sortsupport" id="Function_1d31791a" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.btfloat4sortsupport(internal)
 RETURNS void
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$btfloat4sortsupport$function$
]]></string>
			<comment><![CDATA[sort support]]></comment>
		</function>
		<function name="btfloat84cmp" id="Function_458ee49" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.btfloat84cmp(double precision, real)
 RETURNS integer
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$btfloat84cmp$function$
]]></string>
			<comment><![CDATA[less-equal-greater]]></comment>
		</function>
		<function name="btfloat8cmp" id="Function_33a9e0f4" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.btfloat8cmp(double precision, double precision)
 RETURNS integer
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$btfloat8cmp$function$
]]></string>
			<comment><![CDATA[less-equal-greater]]></comment>
		</function>
		<function name="btfloat8sortsupport" id="Function_120c8dc3" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.btfloat8sortsupport(internal)
 RETURNS void
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$btfloat8sortsupport$function$
]]></string>
			<comment><![CDATA[sort support]]></comment>
		</function>
		<function name="bthandler" id="Function_12797c46" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.bthandler(internal)
 RETURNS index_am_handler
 LANGUAGE internal
 PARALLEL SAFE STRICT
AS $function$bthandler$function$
]]></string>
			<comment><![CDATA[btree index access method handler]]></comment>
		</function>
		<function name="btint24cmp" id="Function_2ef0a32d" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.btint24cmp(smallint, integer)
 RETURNS integer
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$btint24cmp$function$
]]></string>
			<comment><![CDATA[less-equal-greater]]></comment>
		</function>
		<function name="btint28cmp" id="Function_1e3b7fdb" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.btint28cmp(smallint, bigint)
 RETURNS integer
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$btint28cmp$function$
]]></string>
			<comment><![CDATA[less-equal-greater]]></comment>
		</function>
		<function name="btint2cmp" id="Function_246b20e8" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.btint2cmp(smallint, smallint)
 RETURNS integer
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$btint2cmp$function$
]]></string>
			<comment><![CDATA[less-equal-greater]]></comment>
		</function>
		<function name="btint2sortsupport" id="Function_229e005" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.btint2sortsupport(internal)
 RETURNS void
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$btint2sortsupport$function$
]]></string>
			<comment><![CDATA[sort support]]></comment>
		</function>
		<function name="btint42cmp" id="Function_4dc9000" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.btint42cmp(integer, smallint)
 RETURNS integer
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$btint42cmp$function$
]]></string>
			<comment><![CDATA[less-equal-greater]]></comment>
		</function>
		<function name="btint48cmp" id="Function_8a279e3" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.btint48cmp(integer, bigint)
 RETURNS integer
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$btint48cmp$function$
]]></string>
			<comment><![CDATA[less-equal-greater]]></comment>
		</function>
		<function name="btint4cmp" id="Function_3644b22d" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.btint4cmp(integer, integer)
 RETURNS integer
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$btint4cmp$function$
]]></string>
			<comment><![CDATA[less-equal-greater]]></comment>
		</function>
		<function name="btint4sortsupport" id="Function_371d3621" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.btint4sortsupport(internal)
 RETURNS void
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$btint4sortsupport$function$
]]></string>
			<comment><![CDATA[sort support]]></comment>
		</function>
		<function name="btint82cmp" id="Function_156298c4" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.btint82cmp(bigint, smallint)
 RETURNS integer
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$btint82cmp$function$
]]></string>
			<comment><![CDATA[less-equal-greater]]></comment>
		</function>
		<function name="btint84cmp" id="Function_22fd3fe0" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.btint84cmp(bigint, integer)
 RETURNS integer
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$btint84cmp$function$
]]></string>
			<comment><![CDATA[less-equal-greater]]></comment>
		</function>
		<function name="btint8cmp" id="Function_35c7346" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.btint8cmp(bigint, bigint)
 RETURNS integer
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$btint8cmp$function$
]]></string>
			<comment><![CDATA[less-equal-greater]]></comment>
		</function>
		<function name="btint8sortsupport" id="Function_157d649e" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.btint8sortsupport(internal)
 RETURNS void
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$btint8sortsupport$function$
]]></string>
			<comment><![CDATA[sort support]]></comment>
		</function>
		<function name="btnamecmp" id="Function_2e444718" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.btnamecmp(name, name)
 RETURNS integer
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$btnamecmp$function$
]]></string>
			<comment><![CDATA[less-equal-greater]]></comment>
		</function>
		<function name="btnamesortsupport" id="Function_7884f7d" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.btnamesortsupport(internal)
 RETURNS void
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$btnamesortsupport$function$
]]></string>
			<comment><![CDATA[sort support]]></comment>
		</function>
		<function name="btoidcmp" id="Function_124c3112" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.btoidcmp(oid, oid)
 RETURNS integer
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$btoidcmp$function$
]]></string>
			<comment><![CDATA[less-equal-greater]]></comment>
		</function>
		<function name="btoidsortsupport" id="Function_10d9ef92" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.btoidsortsupport(internal)
 RETURNS void
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$btoidsortsupport$function$
]]></string>
			<comment><![CDATA[sort support]]></comment>
		</function>
		<function name="btoidvectorcmp" id="Function_2a46cca9" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.btoidvectorcmp(oidvector, oidvector)
 RETURNS integer
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$btoidvectorcmp$function$
]]></string>
			<comment><![CDATA[less-equal-greater]]></comment>
		</function>
		<function name="btrecordcmp" id="Function_1d08b43b" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.btrecordcmp(record, record)
 RETURNS integer
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$btrecordcmp$function$
]]></string>
			<comment><![CDATA[less-equal-greater]]></comment>
		</function>
		<function name="btrecordimagecmp" id="Function_27861d89" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.btrecordimagecmp(record, record)
 RETURNS integer
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$btrecordimagecmp$function$
]]></string>
			<comment><![CDATA[less-equal-greater based on byte images]]></comment>
		</function>
		<function name="btreltimecmp" id="Function_337c5c98" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.btreltimecmp(reltime, reltime)
 RETURNS integer
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$btreltimecmp$function$
]]></string>
			<comment><![CDATA[less-equal-greater]]></comment>
		</function>
		<function name="btrim" id="Function_2b9d43f" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.btrim(text)
 RETURNS text
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$btrim1$function$
CREATE OR REPLACE FUNCTION pg_catalog.btrim(bytea, bytea)
 RETURNS bytea
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$byteatrim$function$
CREATE OR REPLACE FUNCTION pg_catalog.btrim(text, text)
 RETURNS text
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$btrim$function$
]]></string>
			<comment><![CDATA[trim both ends of string]]></comment>
		</function>
		<function name="btrim_001" id="Function_3a978e26" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.btrim(text)
 RETURNS text
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$btrim1$function$
CREATE OR REPLACE FUNCTION pg_catalog.btrim(bytea, bytea)
 RETURNS bytea
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$byteatrim$function$
CREATE OR REPLACE FUNCTION pg_catalog.btrim(text, text)
 RETURNS text
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$btrim$function$
]]></string>
			<comment><![CDATA[trim both ends of string]]></comment>
		</function>
		<function name="btrim_002" id="Function_12f94f9f" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.btrim(text)
 RETURNS text
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$btrim1$function$
CREATE OR REPLACE FUNCTION pg_catalog.btrim(bytea, bytea)
 RETURNS bytea
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$byteatrim$function$
CREATE OR REPLACE FUNCTION pg_catalog.btrim(text, text)
 RETURNS text
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$btrim$function$
]]></string>
			<comment><![CDATA[trim both ends of string]]></comment>
		</function>
		<function name="bttext_pattern_cmp" id="Function_190c06a5" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.bttext_pattern_cmp(text, text)
 RETURNS integer
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$bttext_pattern_cmp$function$
]]></string>
			<comment><![CDATA[less-equal-greater]]></comment>
		</function>
		<function name="bttext_pattern_sortsupport" id="Function_2cd4e96b" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.bttext_pattern_sortsupport(internal)
 RETURNS void
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$bttext_pattern_sortsupport$function$
]]></string>
			<comment><![CDATA[sort support]]></comment>
		</function>
		<function name="bttextcmp" id="Function_3ab87fdb" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.bttextcmp(text, text)
 RETURNS integer
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$bttextcmp$function$
]]></string>
			<comment><![CDATA[less-equal-greater]]></comment>
		</function>
		<function name="bttextsortsupport" id="Function_39e9e45a" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.bttextsortsupport(internal)
 RETURNS void
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$bttextsortsupport$function$
]]></string>
			<comment><![CDATA[sort support]]></comment>
		</function>
		<function name="bttidcmp" id="Function_2e2c0ef2" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.bttidcmp(tid, tid)
 RETURNS integer
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$bttidcmp$function$
]]></string>
			<comment><![CDATA[less-equal-greater]]></comment>
		</function>
		<function name="bttintervalcmp" id="Function_2e17b9af" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.bttintervalcmp(tinterval, tinterval)
 RETURNS integer
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$bttintervalcmp$function$
]]></string>
			<comment><![CDATA[less-equal-greater]]></comment>
		</function>
		<function name="bytea_sortsupport" id="Function_2cd2a45" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.bytea_sortsupport(internal)
 RETURNS void
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$bytea_sortsupport$function$
]]></string>
			<comment><![CDATA[sort support]]></comment>
		</function>
		<function name="bytea_string_agg_finalfn" id="Function_25fab75a" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.bytea_string_agg_finalfn(internal)
 RETURNS bytea
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE
AS $function$bytea_string_agg_finalfn$function$
]]></string>
			<comment><![CDATA[aggregate final function]]></comment>
		</function>
		<function name="bytea_string_agg_transfn" id="Function_205d60bc" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.bytea_string_agg_transfn(internal, bytea, bytea)
 RETURNS internal
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE
AS $function$bytea_string_agg_transfn$function$
]]></string>
			<comment><![CDATA[aggregate transition function]]></comment>
		</function>
		<function name="byteacat" id="Function_321a2b7b" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.byteacat(bytea, bytea)
 RETURNS bytea
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$byteacat$function$
]]></string>
			<comment><![CDATA[implementation of || operator]]></comment>
		</function>
		<function name="byteacmp" id="Function_10f05d32" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.byteacmp(bytea, bytea)
 RETURNS integer
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$byteacmp$function$
]]></string>
			<comment><![CDATA[less-equal-greater]]></comment>
		</function>
		<function name="byteaeq" id="Function_2205133a" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.byteaeq(bytea, bytea)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT LEAKPROOF
AS $function$byteaeq$function$
]]></string>
			<comment><![CDATA[implementation of = operator]]></comment>
		</function>
		<function name="byteage" id="Function_41fc9db" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.byteage(bytea, bytea)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT LEAKPROOF
AS $function$byteage$function$
]]></string>
			<comment><![CDATA[implementation of >= operator]]></comment>
		</function>
		<function name="byteagt" id="Function_37a68537" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.byteagt(bytea, bytea)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT LEAKPROOF
AS $function$byteagt$function$
]]></string>
			<comment><![CDATA[implementation of > operator]]></comment>
		</function>
		<function name="byteain" id="Function_33188648" isSystem="false" >
			<comment><![CDATA[I/O]]></comment>
		</function>
		<function name="byteale" id="Function_fb51823" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.byteale(bytea, bytea)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT LEAKPROOF
AS $function$byteale$function$
]]></string>
			<comment><![CDATA[implementation of <= operator]]></comment>
		</function>
		<function name="bytealike" id="Function_3a6981e5" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.bytealike(bytea, bytea)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$bytealike$function$
]]></string>
			<comment><![CDATA[implementation of ~~ operator]]></comment>
		</function>
		<function name="bytealt" id="Function_270ee8de" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.bytealt(bytea, bytea)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT LEAKPROOF
AS $function$bytealt$function$
]]></string>
			<comment><![CDATA[implementation of < operator]]></comment>
		</function>
		<function name="byteane" id="Function_27001b5b" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.byteane(bytea, bytea)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT LEAKPROOF
AS $function$byteane$function$
]]></string>
			<comment><![CDATA[implementation of <> operator]]></comment>
		</function>
		<function name="byteanlike" id="Function_1a2ca25f" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.byteanlike(bytea, bytea)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$byteanlike$function$
]]></string>
			<comment><![CDATA[implementation of !~~ operator]]></comment>
		</function>
		<function name="byteaout" id="Function_22ba98c5" isSystem="false" >
			<comment><![CDATA[I/O]]></comment>
		</function>
		<function name="bytearecv" id="Function_1798b8db" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.bytearecv(internal)
 RETURNS bytea
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$bytearecv$function$
]]></string>
			<comment><![CDATA[I/O]]></comment>
		</function>
		<function name="byteasend" id="Function_1f1bb5ec" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.byteasend(bytea)
 RETURNS bytea
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$byteasend$function$
]]></string>
			<comment><![CDATA[I/O]]></comment>
		</function>
		<function name="cardinality" id="Function_33fc52a5" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.cardinality(anyarray)
 RETURNS integer
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$array_cardinality$function$
]]></string>
			<comment><![CDATA[array cardinality]]></comment>
		</function>
		<function name="cash_cmp" id="Function_22757154" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.cash_cmp(money, money)
 RETURNS integer
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$cash_cmp$function$
]]></string>
			<comment><![CDATA[less-equal-greater]]></comment>
		</function>
		<function name="cash_div_cash" id="Function_238575de" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.cash_div_cash(money, money)
 RETURNS double precision
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$cash_div_cash$function$
]]></string>
			<comment><![CDATA[implementation of / operator]]></comment>
		</function>
		<function name="cash_div_flt4" id="Function_26377168" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.cash_div_flt4(money, real)
 RETURNS money
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$cash_div_flt4$function$
]]></string>
			<comment><![CDATA[implementation of / operator]]></comment>
		</function>
		<function name="cash_div_flt8" id="Function_369556fe" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.cash_div_flt8(money, double precision)
 RETURNS money
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$cash_div_flt8$function$
]]></string>
			<comment><![CDATA[implementation of / operator]]></comment>
		</function>
		<function name="cash_div_int2" id="Function_306b7aec" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.cash_div_int2(money, smallint)
 RETURNS money
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$cash_div_int2$function$
]]></string>
			<comment><![CDATA[implementation of / operator]]></comment>
		</function>
		<function name="cash_div_int4" id="Function_175301fe" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.cash_div_int4(money, integer)
 RETURNS money
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$cash_div_int4$function$
]]></string>
			<comment><![CDATA[implementation of / operator]]></comment>
		</function>
		<function name="cash_eq" id="Function_357d46d0" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.cash_eq(money, money)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT LEAKPROOF
AS $function$cash_eq$function$
]]></string>
			<comment><![CDATA[implementation of = operator]]></comment>
		</function>
		<function name="cash_ge" id="Function_8d61337" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.cash_ge(money, money)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT LEAKPROOF
AS $function$cash_ge$function$
]]></string>
			<comment><![CDATA[implementation of >= operator]]></comment>
		</function>
		<function name="cash_gt" id="Function_24a481d" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.cash_gt(money, money)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT LEAKPROOF
AS $function$cash_gt$function$
]]></string>
			<comment><![CDATA[implementation of > operator]]></comment>
		</function>
		<function name="cash_in" id="Function_a844753" isSystem="false" >
			<comment><![CDATA[I/O]]></comment>
		</function>
		<function name="cash_le" id="Function_144b5b51" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.cash_le(money, money)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT LEAKPROOF
AS $function$cash_le$function$
]]></string>
			<comment><![CDATA[implementation of <= operator]]></comment>
		</function>
		<function name="cash_lt" id="Function_2fa5a223" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.cash_lt(money, money)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT LEAKPROOF
AS $function$cash_lt$function$
]]></string>
			<comment><![CDATA[implementation of < operator]]></comment>
		</function>
		<function name="cash_mi" id="Function_365e1d6c" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.cash_mi(money, money)
 RETURNS money
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$cash_mi$function$
]]></string>
			<comment><![CDATA[implementation of - operator]]></comment>
		</function>
		<function name="cash_mul_flt4" id="Function_33e87bcd" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.cash_mul_flt4(money, real)
 RETURNS money
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$cash_mul_flt4$function$
]]></string>
			<comment><![CDATA[implementation of * operator]]></comment>
		</function>
		<function name="cash_mul_flt8" id="Function_4fe3af7" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.cash_mul_flt8(money, double precision)
 RETURNS money
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$cash_mul_flt8$function$
]]></string>
			<comment><![CDATA[implementation of * operator]]></comment>
		</function>
		<function name="cash_mul_int2" id="Function_339c9949" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.cash_mul_int2(money, smallint)
 RETURNS money
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$cash_mul_int2$function$
]]></string>
			<comment><![CDATA[implementation of * operator]]></comment>
		</function>
		<function name="cash_mul_int4" id="Function_29592149" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.cash_mul_int4(money, integer)
 RETURNS money
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$cash_mul_int4$function$
]]></string>
			<comment><![CDATA[implementation of * operator]]></comment>
		</function>
		<function name="cash_ne" id="Function_37143c1f" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.cash_ne(money, money)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT LEAKPROOF
AS $function$cash_ne$function$
]]></string>
			<comment><![CDATA[implementation of <> operator]]></comment>
		</function>
		<function name="cash_out" id="Function_e429cf9" isSystem="false" >
			<comment><![CDATA[I/O]]></comment>
		</function>
		<function name="cash_pl" id="Function_4943641" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.cash_pl(money, money)
 RETURNS money
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$cash_pl$function$
]]></string>
			<comment><![CDATA[implementation of + operator]]></comment>
		</function>
		<function name="cash_recv" id="Function_168b4c08" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.cash_recv(internal)
 RETURNS money
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$cash_recv$function$
]]></string>
			<comment><![CDATA[I/O]]></comment>
		</function>
		<function name="cash_send" id="Function_147cbb87" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.cash_send(money)
 RETURNS bytea
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$cash_send$function$
]]></string>
			<comment><![CDATA[I/O]]></comment>
		</function>
		<function name="cash_words" id="Function_2be601e2" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.cash_words(money)
 RETURNS text
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$cash_words$function$
]]></string>
			<comment><![CDATA[output money amount as words]]></comment>
		</function>
		<function name="cashlarger" id="Function_7117331" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.cashlarger(money, money)
 RETURNS money
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$cashlarger$function$
]]></string>
			<comment><![CDATA[larger of two]]></comment>
		</function>
		<function name="cashsmaller" id="Function_d90999b" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.cashsmaller(money, money)
 RETURNS money
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$cashsmaller$function$
]]></string>
			<comment><![CDATA[smaller of two]]></comment>
		</function>
		<function name="cbrt" id="Function_10d967b3" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.cbrt(double precision)
 RETURNS double precision
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$dcbrt$function$
]]></string>
			<comment><![CDATA[cube root]]></comment>
		</function>
		<function name="ceil" id="Function_2e7ffd15" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.ceil(double precision)
 RETURNS double precision
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$dceil$function$
CREATE OR REPLACE FUNCTION pg_catalog.ceil(numeric)
 RETURNS numeric
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$numeric_ceil$function$
]]></string>
			<comment><![CDATA[nearest integer >= value]]></comment>
		</function>
		<function name="ceil_001" id="Function_7578cde" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.ceil(double precision)
 RETURNS double precision
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$dceil$function$
CREATE OR REPLACE FUNCTION pg_catalog.ceil(numeric)
 RETURNS numeric
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$numeric_ceil$function$
]]></string>
			<comment><![CDATA[nearest integer >= value]]></comment>
		</function>
		<function name="ceiling" id="Function_39ce1bc2" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.ceiling(double precision)
 RETURNS double precision
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$dceil$function$
CREATE OR REPLACE FUNCTION pg_catalog.ceiling(numeric)
 RETURNS numeric
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$numeric_ceil$function$
]]></string>
			<comment><![CDATA[nearest integer >= value]]></comment>
		</function>
		<function name="ceiling_001" id="Function_3737f410" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.ceiling(double precision)
 RETURNS double precision
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$dceil$function$
CREATE OR REPLACE FUNCTION pg_catalog.ceiling(numeric)
 RETURNS numeric
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$numeric_ceil$function$
]]></string>
			<comment><![CDATA[nearest integer >= value]]></comment>
		</function>
		<function name="center" id="Function_37533ceb" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.center(box)
 RETURNS point
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$box_center$function$
CREATE OR REPLACE FUNCTION pg_catalog.center(circle)
 RETURNS point
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$circle_center$function$
]]></string>
			<comment><![CDATA[center of]]></comment>
		</function>
		<function name="center_001" id="Function_29683803" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.center(box)
 RETURNS point
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$box_center$function$
CREATE OR REPLACE FUNCTION pg_catalog.center(circle)
 RETURNS point
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$circle_center$function$
]]></string>
			<comment><![CDATA[center of]]></comment>
		</function>
		<function name="char" id="Function_12be88c" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog."char"(integer)
 RETURNS "char"
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$i4tochar$function$
CREATE OR REPLACE FUNCTION pg_catalog."char"(text)
 RETURNS "char"
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$text_char$function$
]]></string>
			<comment><![CDATA[convert int4 to char]]></comment>
		</function>
		<function name="char_001" id="Function_31c31b28" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog."char"(integer)
 RETURNS "char"
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$i4tochar$function$
CREATE OR REPLACE FUNCTION pg_catalog."char"(text)
 RETURNS "char"
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$text_char$function$
]]></string>
			<comment><![CDATA[convert int4 to char]]></comment>
		</function>
		<function name="char_length" id="Function_1c2e164f" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.char_length(text)
 RETURNS integer
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$textlen$function$
CREATE OR REPLACE FUNCTION pg_catalog.char_length(character)
 RETURNS integer
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$bpcharlen$function$
]]></string>
			<comment><![CDATA[character length]]></comment>
		</function>
		<function name="char_length_001" id="Function_20d21f4a" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.char_length(text)
 RETURNS integer
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$textlen$function$
CREATE OR REPLACE FUNCTION pg_catalog.char_length(character)
 RETURNS integer
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$bpcharlen$function$
]]></string>
			<comment><![CDATA[character length]]></comment>
		</function>
		<function name="character_length" id="Function_1838af3e" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.character_length(text)
 RETURNS integer
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$textlen$function$
CREATE OR REPLACE FUNCTION pg_catalog.character_length(character)
 RETURNS integer
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$bpcharlen$function$
]]></string>
			<comment><![CDATA[character length]]></comment>
		</function>
		<function name="character_length_001" id="Function_39e4941" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.character_length(text)
 RETURNS integer
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$textlen$function$
CREATE OR REPLACE FUNCTION pg_catalog.character_length(character)
 RETURNS integer
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$bpcharlen$function$
]]></string>
			<comment><![CDATA[character length]]></comment>
		</function>
		<function name="chareq" id="Function_196064a8" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.chareq("char", "char")
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT LEAKPROOF
AS $function$chareq$function$
]]></string>
			<comment><![CDATA[implementation of = operator]]></comment>
		</function>
		<function name="charge" id="Function_2bb37a5c" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.charge("char", "char")
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT LEAKPROOF
AS $function$charge$function$
]]></string>
			<comment><![CDATA[implementation of >= operator]]></comment>
		</function>
		<function name="chargt" id="Function_1347ac7f" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.chargt("char", "char")
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT LEAKPROOF
AS $function$chargt$function$
]]></string>
			<comment><![CDATA[implementation of > operator]]></comment>
		</function>
		<function name="charin" id="Function_25f54d24" isSystem="false" >
			<comment><![CDATA[I/O]]></comment>
		</function>
		<function name="charle" id="Function_176c10d3" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.charle("char", "char")
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT LEAKPROOF
AS $function$charle$function$
]]></string>
			<comment><![CDATA[implementation of <= operator]]></comment>
		</function>
		<function name="charlt" id="Function_3388a06b" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.charlt("char", "char")
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT LEAKPROOF
AS $function$charlt$function$
]]></string>
			<comment><![CDATA[implementation of < operator]]></comment>
		</function>
		<function name="charne" id="Function_31ac2aa6" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.charne("char", "char")
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT LEAKPROOF
AS $function$charne$function$
]]></string>
			<comment><![CDATA[implementation of <> operator]]></comment>
		</function>
		<function name="charout" id="Function_3622e9ca" isSystem="false" >
			<comment><![CDATA[I/O]]></comment>
		</function>
		<function name="charrecv" id="Function_2eddce2b" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.charrecv(internal)
 RETURNS "char"
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$charrecv$function$
]]></string>
			<comment><![CDATA[I/O]]></comment>
		</function>
		<function name="charsend" id="Function_f39dfe7" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.charsend("char")
 RETURNS bytea
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$charsend$function$
]]></string>
			<comment><![CDATA[I/O]]></comment>
		</function>
		<function name="chr" id="Function_27317d52" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.chr(integer)
 RETURNS text
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$chr$function$
]]></string>
			<comment><![CDATA[convert int4 to char]]></comment>
		</function>
		<function name="cideq" id="Function_110220b6" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.cideq(cid, cid)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT LEAKPROOF
AS $function$cideq$function$
]]></string>
			<comment><![CDATA[implementation of = operator]]></comment>
		</function>
		<function name="cidin" id="Function_381878e8" isSystem="false" >
			<comment><![CDATA[I/O]]></comment>
		</function>
		<function name="cidout" id="Function_352707b" isSystem="false" >
			<comment><![CDATA[I/O]]></comment>
		</function>
		<function name="cidr" id="Function_11aa324e" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.cidr(inet)
 RETURNS cidr
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$inet_to_cidr$function$
]]></string>
			<comment><![CDATA[convert inet to cidr]]></comment>
		</function>
		<function name="cidr_in" id="Function_adcfdd5" isSystem="false" >
			<comment><![CDATA[I/O]]></comment>
		</function>
		<function name="cidr_out" id="Function_23bde2fe" isSystem="false" >
			<comment><![CDATA[I/O]]></comment>
		</function>
		<function name="cidr_recv" id="Function_eae64a4" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.cidr_recv(internal)
 RETURNS cidr
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$cidr_recv$function$
]]></string>
			<comment><![CDATA[I/O]]></comment>
		</function>
		<function name="cidr_send" id="Function_1a5cc12e" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.cidr_send(cidr)
 RETURNS bytea
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$cidr_send$function$
]]></string>
			<comment><![CDATA[I/O]]></comment>
		</function>
		<function name="cidrecv" id="Function_28ca9927" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.cidrecv(internal)
 RETURNS cid
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$cidrecv$function$
]]></string>
			<comment><![CDATA[I/O]]></comment>
		</function>
		<function name="cidsend" id="Function_4b4c0b0" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.cidsend(cid)
 RETURNS bytea
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$cidsend$function$
]]></string>
			<comment><![CDATA[I/O]]></comment>
		</function>
		<function name="circle" id="Function_1d84bbc6" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.circle(box)
 RETURNS circle
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$box_circle$function$
CREATE OR REPLACE FUNCTION pg_catalog.circle(polygon)
 RETURNS circle
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$poly_circle$function$
CREATE OR REPLACE FUNCTION pg_catalog.circle(point, double precision)
 RETURNS circle
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$cr_circle$function$
]]></string>
			<comment><![CDATA[convert point and radius to circle]]></comment>
		</function>
		<function name="circle_001" id="Function_898c045" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.circle(box)
 RETURNS circle
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$box_circle$function$
CREATE OR REPLACE FUNCTION pg_catalog.circle(polygon)
 RETURNS circle
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$poly_circle$function$
CREATE OR REPLACE FUNCTION pg_catalog.circle(point, double precision)
 RETURNS circle
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$cr_circle$function$
]]></string>
			<comment><![CDATA[convert point and radius to circle]]></comment>
		</function>
		<function name="circle_002" id="Function_36365e3a" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.circle(box)
 RETURNS circle
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$box_circle$function$
CREATE OR REPLACE FUNCTION pg_catalog.circle(polygon)
 RETURNS circle
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$poly_circle$function$
CREATE OR REPLACE FUNCTION pg_catalog.circle(point, double precision)
 RETURNS circle
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$cr_circle$function$
]]></string>
			<comment><![CDATA[convert point and radius to circle]]></comment>
		</function>
		<function name="circle_above" id="Function_20c35870" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.circle_above(circle, circle)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$circle_above$function$
]]></string>
			<comment><![CDATA[implementation of |>> operator]]></comment>
		</function>
		<function name="circle_add_pt" id="Function_246e8f44" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.circle_add_pt(circle, point)
 RETURNS circle
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$circle_add_pt$function$
]]></string>
			<comment><![CDATA[implementation of + operator]]></comment>
		</function>
		<function name="circle_below" id="Function_32a71f38" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.circle_below(circle, circle)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$circle_below$function$
]]></string>
			<comment><![CDATA[implementation of <<| operator]]></comment>
		</function>
		<function name="circle_center" id="Function_2068023a" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.circle_center(circle)
 RETURNS point
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$circle_center$function$
]]></string>
			<comment><![CDATA[implementation of @@ operator]]></comment>
		</function>
		<function name="circle_contain" id="Function_15886fc" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.circle_contain(circle, circle)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$circle_contain$function$
]]></string>
			<comment><![CDATA[implementation of @> operator]]></comment>
		</function>
		<function name="circle_contain_pt" id="Function_33b20c6" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.circle_contain_pt(circle, point)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$circle_contain_pt$function$
]]></string>
			<comment><![CDATA[implementation of @> operator]]></comment>
		</function>
		<function name="circle_contained" id="Function_2e0d870" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.circle_contained(circle, circle)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$circle_contained$function$
]]></string>
			<comment><![CDATA[implementation of <@ operator]]></comment>
		</function>
		<function name="circle_distance" id="Function_1ff6eec2" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.circle_distance(circle, circle)
 RETURNS double precision
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$circle_distance$function$
]]></string>
			<comment><![CDATA[implementation of <-> operator]]></comment>
		</function>
		<function name="circle_div_pt" id="Function_351b224f" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.circle_div_pt(circle, point)
 RETURNS circle
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$circle_div_pt$function$
]]></string>
			<comment><![CDATA[implementation of / operator]]></comment>
		</function>
		<function name="circle_eq" id="Function_18a5ce7d" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.circle_eq(circle, circle)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT LEAKPROOF
AS $function$circle_eq$function$
]]></string>
			<comment><![CDATA[implementation of = operator]]></comment>
		</function>
		<function name="circle_ge" id="Function_1d03628b" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.circle_ge(circle, circle)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT LEAKPROOF
AS $function$circle_ge$function$
]]></string>
			<comment><![CDATA[implementation of >= operator]]></comment>
		</function>
		<function name="circle_gt" id="Function_3b073c18" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.circle_gt(circle, circle)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT LEAKPROOF
AS $function$circle_gt$function$
]]></string>
			<comment><![CDATA[implementation of > operator]]></comment>
		</function>
		<function name="circle_in" id="Function_788f72b" isSystem="false" >
			<comment><![CDATA[I/O]]></comment>
		</function>
		<function name="circle_le" id="Function_ce45a1" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.circle_le(circle, circle)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT LEAKPROOF
AS $function$circle_le$function$
]]></string>
			<comment><![CDATA[implementation of <= operator]]></comment>
		</function>
		<function name="circle_left" id="Function_adeba5c" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.circle_left(circle, circle)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$circle_left$function$
]]></string>
			<comment><![CDATA[implementation of << operator]]></comment>
		</function>
		<function name="circle_lt" id="Function_1fbf498f" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.circle_lt(circle, circle)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT LEAKPROOF
AS $function$circle_lt$function$
]]></string>
			<comment><![CDATA[implementation of < operator]]></comment>
		</function>
		<function name="circle_mul_pt" id="Function_1c582ee2" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.circle_mul_pt(circle, point)
 RETURNS circle
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$circle_mul_pt$function$
]]></string>
			<comment><![CDATA[implementation of * operator]]></comment>
		</function>
		<function name="circle_ne" id="Function_f510b85" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.circle_ne(circle, circle)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT LEAKPROOF
AS $function$circle_ne$function$
]]></string>
			<comment><![CDATA[implementation of <> operator]]></comment>
		</function>
		<function name="circle_out" id="Function_29e86127" isSystem="false" >
			<comment><![CDATA[I/O]]></comment>
		</function>
		<function name="circle_overabove" id="Function_1dbd8b05" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.circle_overabove(circle, circle)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$circle_overabove$function$
]]></string>
			<comment><![CDATA[implementation of |&> operator]]></comment>
		</function>
		<function name="circle_overbelow" id="Function_f3aaf58" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.circle_overbelow(circle, circle)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$circle_overbelow$function$
]]></string>
			<comment><![CDATA[implementation of &<| operator]]></comment>
		</function>
		<function name="circle_overlap" id="Function_3998eee4" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.circle_overlap(circle, circle)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$circle_overlap$function$
]]></string>
			<comment><![CDATA[implementation of && operator]]></comment>
		</function>
		<function name="circle_overleft" id="Function_1a375708" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.circle_overleft(circle, circle)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$circle_overleft$function$
]]></string>
			<comment><![CDATA[implementation of &< operator]]></comment>
		</function>
		<function name="circle_overright" id="Function_721b511" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.circle_overright(circle, circle)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$circle_overright$function$
]]></string>
			<comment><![CDATA[implementation of &> operator]]></comment>
		</function>
		<function name="circle_recv" id="Function_2383a98d" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.circle_recv(internal)
 RETURNS circle
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$circle_recv$function$
]]></string>
			<comment><![CDATA[I/O]]></comment>
		</function>
		<function name="circle_right" id="Function_209f56d9" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.circle_right(circle, circle)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$circle_right$function$
]]></string>
			<comment><![CDATA[implementation of >> operator]]></comment>
		</function>
		<function name="circle_same" id="Function_3235ed93" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.circle_same(circle, circle)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$circle_same$function$
]]></string>
			<comment><![CDATA[implementation of ~= operator]]></comment>
		</function>
		<function name="circle_send" id="Function_313fb058" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.circle_send(circle)
 RETURNS bytea
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$circle_send$function$
]]></string>
			<comment><![CDATA[I/O]]></comment>
		</function>
		<function name="circle_sub_pt" id="Function_d5dc61e" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.circle_sub_pt(circle, point)
 RETURNS circle
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$circle_sub_pt$function$
]]></string>
			<comment><![CDATA[implementation of - operator]]></comment>
		</function>
		<function name="clock_timestamp" id="Function_25d9d4ed" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.clock_timestamp()
 RETURNS timestamp with time zone
 LANGUAGE internal
 PARALLEL SAFE STRICT
AS $function$clock_timestamp$function$
]]></string>
			<comment><![CDATA[current clock time]]></comment>
		</function>
		<function name="close_lb" id="Function_323130f7" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.close_lb(line, box)
 RETURNS point
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$close_lb$function$
]]></string>
			<comment><![CDATA[implementation of ## operator]]></comment>
		</function>
		<function name="close_ls" id="Function_1bb11483" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.close_ls(line, lseg)
 RETURNS point
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$close_ls$function$
]]></string>
			<comment><![CDATA[implementation of ## operator]]></comment>
		</function>
		<function name="close_lseg" id="Function_8981d18" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.close_lseg(lseg, lseg)
 RETURNS point
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$close_lseg$function$
]]></string>
			<comment><![CDATA[implementation of ## operator]]></comment>
		</function>
		<function name="close_pb" id="Function_7e83b2b" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.close_pb(point, box)
 RETURNS point
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$close_pb$function$
]]></string>
			<comment><![CDATA[implementation of ## operator]]></comment>
		</function>
		<function name="close_pl" id="Function_37a4a110" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.close_pl(point, line)
 RETURNS point
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$close_pl$function$
]]></string>
			<comment><![CDATA[implementation of ## operator]]></comment>
		</function>
		<function name="close_ps" id="Function_1ac5c135" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.close_ps(point, lseg)
 RETURNS point
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$close_ps$function$
]]></string>
			<comment><![CDATA[implementation of ## operator]]></comment>
		</function>
		<function name="close_sb" id="Function_2fc74761" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.close_sb(lseg, box)
 RETURNS point
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$close_sb$function$
]]></string>
			<comment><![CDATA[implementation of ## operator]]></comment>
		</function>
		<function name="close_sl" id="Function_2fdc5de7" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.close_sl(lseg, line)
 RETURNS point
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$close_sl$function$
]]></string>
			<comment><![CDATA[implementation of ## operator]]></comment>
		</function>
		<function name="col_description" id="Function_260dae75" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.col_description(oid, integer)
 RETURNS text
 LANGUAGE sql
 STABLE PARALLEL SAFE STRICT
AS $function$select description from pg_catalog.pg_description where objoid = $1 and classoid = 'pg_catalog.pg_class'::pg_catalog.regclass and objsubid = $2$function$
]]></string>
			<comment><![CDATA[get description for table column]]></comment>
		</function>
		<function name="concat" id="Function_89a3604" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.concat(VARIADIC "any")
 RETURNS text
 LANGUAGE internal
 STABLE PARALLEL SAFE
AS $function$text_concat$function$
]]></string>
			<comment><![CDATA[concatenate values]]></comment>
		</function>
		<function name="concat_ws" id="Function_23170f56" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.concat_ws(text, VARIADIC "any")
 RETURNS text
 LANGUAGE internal
 STABLE PARALLEL SAFE
AS $function$text_concat_ws$function$
]]></string>
			<comment><![CDATA[concatenate values with separators]]></comment>
		</function>
		<function name="contjoinsel" id="Function_310b0d7e" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.contjoinsel(internal, oid, internal, smallint, internal)
 RETURNS double precision
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$contjoinsel$function$
]]></string>
			<comment><![CDATA[join selectivity for containment comparison operators]]></comment>
		</function>
		<function name="contsel" id="Function_134c6ca0" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.contsel(internal, oid, internal, integer)
 RETURNS double precision
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$contsel$function$
]]></string>
			<comment><![CDATA[restriction selectivity for containment comparison operators]]></comment>
		</function>
		<function name="convert" id="Function_6c0fd1" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.convert(bytea, name, name)
 RETURNS bytea
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$pg_convert$function$
]]></string>
			<comment><![CDATA[convert string with specified encoding names]]></comment>
		</function>
		<function name="convert_from" id="Function_2ea4cfe6" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.convert_from(bytea, name)
 RETURNS text
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$pg_convert_from$function$
]]></string>
			<comment><![CDATA[convert string with specified source encoding name]]></comment>
		</function>
		<function name="convert_to" id="Function_39426695" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.convert_to(text, name)
 RETURNS bytea
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$pg_convert_to$function$
]]></string>
			<comment><![CDATA[convert string with specified destination encoding name]]></comment>
		</function>
		<function name="corr" id="Function_239b6a58" isSystem="false" >
			<comment><![CDATA[correlation coefficient]]></comment>
		</function>
		<function name="cos" id="Function_108229e4" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.cos(double precision)
 RETURNS double precision
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$dcos$function$
]]></string>
			<comment><![CDATA[cosine]]></comment>
		</function>
		<function name="cosd" id="Function_fd3e896" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.cosd(double precision)
 RETURNS double precision
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$dcosd$function$
]]></string>
			<comment><![CDATA[cosine, degrees]]></comment>
		</function>
		<function name="cot" id="Function_11226c9b" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.cot(double precision)
 RETURNS double precision
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$dcot$function$
]]></string>
			<comment><![CDATA[cotangent]]></comment>
		</function>
		<function name="cotd" id="Function_2ce5a4c8" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.cotd(double precision)
 RETURNS double precision
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$dcotd$function$
]]></string>
			<comment><![CDATA[cotangent, degrees]]></comment>
		</function>
		<function name="count" id="Function_25539163" isSystem="false" >
			<comment><![CDATA[number of input rows for which the input expression is not null]]></comment>
		</function>
		<function name="count_001" id="Function_ec6c478" isSystem="false" >
			<comment><![CDATA[number of input rows for which the input expression is not null]]></comment>
		</function>
		<function name="covar_pop" id="Function_22a0b48f" isSystem="false" >
			<comment><![CDATA[population covariance]]></comment>
		</function>
		<function name="covar_samp" id="Function_3af897e4" isSystem="false" >
			<comment><![CDATA[sample covariance]]></comment>
		</function>
		<function name="cstring_in" id="Function_184868e2" isSystem="false" >
			<comment><![CDATA[I/O]]></comment>
		</function>
		<function name="cstring_out" id="Function_1d0ee78c" isSystem="false" >
			<comment><![CDATA[I/O]]></comment>
		</function>
		<function name="cstring_recv" id="Function_31aca154" isSystem="false" >
			<comment><![CDATA[I/O]]></comment>
		</function>
		<function name="cstring_send" id="Function_161ae1a0" isSystem="false" >
			<comment><![CDATA[I/O]]></comment>
		</function>
		<function name="cume_dist" id="Function_98be266" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.cume_dist()
 RETURNS double precision
 LANGUAGE internal
 WINDOW IMMUTABLE PARALLEL SAFE
AS $function$window_cume_dist$function$
]]></string>
			<comment><![CDATA[fractional row number within partition]]></comment>
		</function>
		<function name="cume_dist_001" id="Function_3a4bdbd8" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.cume_dist()
 RETURNS double precision
 LANGUAGE internal
 WINDOW IMMUTABLE PARALLEL SAFE
AS $function$window_cume_dist$function$
]]></string>
			<comment><![CDATA[fractional row number within partition]]></comment>
		</function>
		<function name="cume_dist_final" id="Function_1f2f9296" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.cume_dist_final(internal, VARIADIC "any")
 RETURNS double precision
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE
AS $function$hypothetical_cume_dist_final$function$
]]></string>
			<comment><![CDATA[aggregate final function]]></comment>
		</function>
		<function name="current_database" id="Function_2d58d258" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.current_database()
 RETURNS name
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$current_database$function$
]]></string>
			<comment><![CDATA[name of the current database]]></comment>
		</function>
		<function name="current_query" id="Function_268c0367" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.current_query()
 RETURNS text
 LANGUAGE internal
 PARALLEL RESTRICTED
AS $function$current_query$function$
]]></string>
			<comment><![CDATA[get the currently executing query]]></comment>
		</function>
		<function name="current_schema" id="Function_39c561da" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog."current_schema"()
 RETURNS name
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$current_schema$function$
]]></string>
			<comment><![CDATA[current schema name]]></comment>
		</function>
		<function name="current_schemas" id="Function_216771e4" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.current_schemas(boolean)
 RETURNS name[]
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$current_schemas$function$
]]></string>
			<comment><![CDATA[current schema search list]]></comment>
		</function>
		<function name="current_setting" id="Function_1ec624af" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.current_setting(text)
 RETURNS text
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$show_config_by_name$function$
CREATE OR REPLACE FUNCTION pg_catalog.current_setting(text, boolean)
 RETURNS text
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$show_config_by_name_missing_ok$function$
]]></string>
			<comment><![CDATA[SHOW X as a function]]></comment>
		</function>
		<function name="current_setting_001" id="Function_b6baa21" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.current_setting(text)
 RETURNS text
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$show_config_by_name$function$
CREATE OR REPLACE FUNCTION pg_catalog.current_setting(text, boolean)
 RETURNS text
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$show_config_by_name_missing_ok$function$
]]></string>
			<comment><![CDATA[SHOW X as a function]]></comment>
		</function>
		<function name="current_user" id="Function_32baa201" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog."current_user"()
 RETURNS name
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$current_user$function$
]]></string>
			<comment><![CDATA[current user name]]></comment>
		</function>
		<function name="currtid" id="Function_3f1d391" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.currtid(oid, tid)
 RETURNS tid
 LANGUAGE internal
 STRICT
AS $function$currtid_byreloid$function$
]]></string>
			<comment><![CDATA[latest tid of a tuple]]></comment>
		</function>
		<function name="currtid2" id="Function_17d14f1f" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.currtid2(text, tid)
 RETURNS tid
 LANGUAGE internal
 STRICT
AS $function$currtid_byrelname$function$
]]></string>
			<comment><![CDATA[latest tid of a tuple]]></comment>
		</function>
		<function name="currval" id="Function_21b55abc" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.currval(regclass)
 RETURNS bigint
 LANGUAGE internal
 STRICT
AS $function$currval_oid$function$
]]></string>
			<comment><![CDATA[sequence current value]]></comment>
		</function>
		<function name="cursor_to_xml" id="Function_4168b4f" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.cursor_to_xml(cursor refcursor, count integer, nulls boolean, tableforest boolean, targetns text)
 RETURNS xml
 LANGUAGE internal
 STABLE PARALLEL RESTRICTED STRICT COST 100
AS $function$cursor_to_xml$function$
]]></string>
			<comment><![CDATA[map rows from cursor to XML]]></comment>
		</function>
		<function name="cursor_to_xmlschema" id="Function_17a0d639" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.cursor_to_xmlschema(cursor refcursor, nulls boolean, tableforest boolean, targetns text)
 RETURNS xml
 LANGUAGE internal
 STABLE PARALLEL RESTRICTED STRICT COST 100
AS $function$cursor_to_xmlschema$function$
]]></string>
			<comment><![CDATA[map cursor structure to XML Schema]]></comment>
		</function>
		<function name="database_to_xml" id="Function_1d852913" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.database_to_xml(nulls boolean, tableforest boolean, targetns text)
 RETURNS xml
 LANGUAGE internal
 STABLE PARALLEL RESTRICTED STRICT COST 100
AS $function$database_to_xml$function$
]]></string>
			<comment><![CDATA[map database contents to XML]]></comment>
		</function>
		<function name="database_to_xml_and_xmlschema" id="Function_909ca14" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.database_to_xml_and_xmlschema(nulls boolean, tableforest boolean, targetns text)
 RETURNS xml
 LANGUAGE internal
 STABLE PARALLEL RESTRICTED STRICT COST 100
AS $function$database_to_xml_and_xmlschema$function$
]]></string>
			<comment><![CDATA[map database contents and structure to XML and XML Schema]]></comment>
		</function>
		<function name="database_to_xmlschema" id="Function_87993ab" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.database_to_xmlschema(nulls boolean, tableforest boolean, targetns text)
 RETURNS xml
 LANGUAGE internal
 STABLE PARALLEL RESTRICTED STRICT COST 100
AS $function$database_to_xmlschema$function$
]]></string>
			<comment><![CDATA[map database structure to XML Schema]]></comment>
		</function>
		<function name="date" id="Function_1457bc54" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.date(abstime)
 RETURNS date
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$abstime_date$function$
CREATE OR REPLACE FUNCTION pg_catalog.date(timestamp without time zone)
 RETURNS date
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$timestamp_date$function$
CREATE OR REPLACE FUNCTION pg_catalog.date(timestamp with time zone)
 RETURNS date
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$timestamptz_date$function$
]]></string>
			<comment><![CDATA[convert timestamp with time zone to date]]></comment>
		</function>
		<function name="date_001" id="Function_3b22895b" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.date(abstime)
 RETURNS date
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$abstime_date$function$
CREATE OR REPLACE FUNCTION pg_catalog.date(timestamp without time zone)
 RETURNS date
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$timestamp_date$function$
CREATE OR REPLACE FUNCTION pg_catalog.date(timestamp with time zone)
 RETURNS date
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$timestamptz_date$function$
]]></string>
			<comment><![CDATA[convert timestamp with time zone to date]]></comment>
		</function>
		<function name="date_002" id="Function_42b8633" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.date(abstime)
 RETURNS date
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$abstime_date$function$
CREATE OR REPLACE FUNCTION pg_catalog.date(timestamp without time zone)
 RETURNS date
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$timestamp_date$function$
CREATE OR REPLACE FUNCTION pg_catalog.date(timestamp with time zone)
 RETURNS date
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$timestamptz_date$function$
]]></string>
			<comment><![CDATA[convert timestamp with time zone to date]]></comment>
		</function>
		<function name="date_cmp" id="Function_148a2842" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.date_cmp(date, date)
 RETURNS integer
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$date_cmp$function$
]]></string>
			<comment><![CDATA[less-equal-greater]]></comment>
		</function>
		<function name="date_cmp_timestamp" id="Function_1e76a561" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.date_cmp_timestamp(date, timestamp without time zone)
 RETURNS integer
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$date_cmp_timestamp$function$
]]></string>
			<comment><![CDATA[less-equal-greater]]></comment>
		</function>
		<function name="date_cmp_timestamptz" id="Function_27ba944c" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.date_cmp_timestamptz(date, timestamp with time zone)
 RETURNS integer
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$date_cmp_timestamptz$function$
]]></string>
			<comment><![CDATA[less-equal-greater]]></comment>
		</function>
		<function name="date_eq" id="Function_640c444" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.date_eq(date, date)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT LEAKPROOF
AS $function$date_eq$function$
]]></string>
			<comment><![CDATA[implementation of = operator]]></comment>
		</function>
		<function name="date_eq_timestamp" id="Function_15417296" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.date_eq_timestamp(date, timestamp without time zone)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$date_eq_timestamp$function$
]]></string>
			<comment><![CDATA[implementation of = operator]]></comment>
		</function>
		<function name="date_eq_timestamptz" id="Function_2db444e9" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.date_eq_timestamptz(date, timestamp with time zone)
 RETURNS boolean
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$date_eq_timestamptz$function$
]]></string>
			<comment><![CDATA[implementation of = operator]]></comment>
		</function>
		<function name="date_ge" id="Function_39e794fd" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.date_ge(date, date)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT LEAKPROOF
AS $function$date_ge$function$
]]></string>
			<comment><![CDATA[implementation of >= operator]]></comment>
		</function>
		<function name="date_ge_timestamp" id="Function_274d1a9c" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.date_ge_timestamp(date, timestamp without time zone)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$date_ge_timestamp$function$
]]></string>
			<comment><![CDATA[implementation of >= operator]]></comment>
		</function>
		<function name="date_ge_timestamptz" id="Function_37899443" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.date_ge_timestamptz(date, timestamp with time zone)
 RETURNS boolean
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$date_ge_timestamptz$function$
]]></string>
			<comment><![CDATA[implementation of >= operator]]></comment>
		</function>
		<function name="date_gt" id="Function_2449ac31" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.date_gt(date, date)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT LEAKPROOF
AS $function$date_gt$function$
]]></string>
			<comment><![CDATA[implementation of > operator]]></comment>
		</function>
		<function name="date_gt_timestamp" id="Function_3a3514b9" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.date_gt_timestamp(date, timestamp without time zone)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$date_gt_timestamp$function$
]]></string>
			<comment><![CDATA[implementation of > operator]]></comment>
		</function>
		<function name="date_gt_timestamptz" id="Function_1d78d546" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.date_gt_timestamptz(date, timestamp with time zone)
 RETURNS boolean
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$date_gt_timestamptz$function$
]]></string>
			<comment><![CDATA[implementation of > operator]]></comment>
		</function>
		<function name="date_in" id="Function_27c9e36f" isSystem="false" >
			<comment><![CDATA[I/O]]></comment>
		</function>
		<function name="date_larger" id="Function_28934485" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.date_larger(date, date)
 RETURNS date
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$date_larger$function$
]]></string>
			<comment><![CDATA[larger of two]]></comment>
		</function>
		<function name="date_le" id="Function_3699826" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.date_le(date, date)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT LEAKPROOF
AS $function$date_le$function$
]]></string>
			<comment><![CDATA[implementation of <= operator]]></comment>
		</function>
		<function name="date_le_timestamp" id="Function_33be7f65" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.date_le_timestamp(date, timestamp without time zone)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$date_le_timestamp$function$
]]></string>
			<comment><![CDATA[implementation of <= operator]]></comment>
		</function>
		<function name="date_le_timestamptz" id="Function_dc0a593" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.date_le_timestamptz(date, timestamp with time zone)
 RETURNS boolean
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$date_le_timestamptz$function$
]]></string>
			<comment><![CDATA[implementation of <= operator]]></comment>
		</function>
		<function name="date_lt" id="Function_23c66a96" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.date_lt(date, date)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT LEAKPROOF
AS $function$date_lt$function$
]]></string>
			<comment><![CDATA[implementation of < operator]]></comment>
		</function>
		<function name="date_lt_timestamp" id="Function_3007daa6" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.date_lt_timestamp(date, timestamp without time zone)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$date_lt_timestamp$function$
]]></string>
			<comment><![CDATA[implementation of < operator]]></comment>
		</function>
		<function name="date_lt_timestamptz" id="Function_3004f228" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.date_lt_timestamptz(date, timestamp with time zone)
 RETURNS boolean
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$date_lt_timestamptz$function$
]]></string>
			<comment><![CDATA[implementation of < operator]]></comment>
		</function>
		<function name="date_mi" id="Function_25d2bfcc" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.date_mi(date, date)
 RETURNS integer
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$date_mi$function$
]]></string>
			<comment><![CDATA[implementation of - operator]]></comment>
		</function>
		<function name="date_mi_interval" id="Function_a82e36e" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.date_mi_interval(date, interval)
 RETURNS timestamp without time zone
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$date_mi_interval$function$
]]></string>
			<comment><![CDATA[implementation of - operator]]></comment>
		</function>
		<function name="date_mii" id="Function_34d8ecc4" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.date_mii(date, integer)
 RETURNS date
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$date_mii$function$
]]></string>
			<comment><![CDATA[implementation of - operator]]></comment>
		</function>
		<function name="date_ne" id="Function_34ec8ebb" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.date_ne(date, date)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT LEAKPROOF
AS $function$date_ne$function$
]]></string>
			<comment><![CDATA[implementation of <> operator]]></comment>
		</function>
		<function name="date_ne_timestamp" id="Function_18c2b9d8" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.date_ne_timestamp(date, timestamp without time zone)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$date_ne_timestamp$function$
]]></string>
			<comment><![CDATA[implementation of <> operator]]></comment>
		</function>
		<function name="date_ne_timestamptz" id="Function_91b4830" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.date_ne_timestamptz(date, timestamp with time zone)
 RETURNS boolean
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$date_ne_timestamptz$function$
]]></string>
			<comment><![CDATA[implementation of <> operator]]></comment>
		</function>
		<function name="date_out" id="Function_30314781" isSystem="false" >
			<comment><![CDATA[I/O]]></comment>
		</function>
		<function name="date_part" id="Function_1ee5794d" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.date_part(text, timestamp with time zone)
 RETURNS double precision
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$timestamptz_part$function$
CREATE OR REPLACE FUNCTION pg_catalog.date_part(text, interval)
 RETURNS double precision
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$interval_part$function$
CREATE OR REPLACE FUNCTION pg_catalog.date_part(text, time with time zone)
 RETURNS double precision
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$timetz_part$function$
CREATE OR REPLACE FUNCTION pg_catalog.date_part(text, abstime)
 RETURNS double precision
 LANGUAGE sql
 STABLE PARALLEL SAFE STRICT COST 1
AS $function$select pg_catalog.date_part($1, cast($2 as timestamp with time zone))$function$
CREATE OR REPLACE FUNCTION pg_catalog.date_part(text, reltime)
 RETURNS double precision
 LANGUAGE sql
 STABLE PARALLEL SAFE STRICT COST 1
AS $function$select pg_catalog.date_part($1, cast($2 as pg_catalog.interval))$function$
CREATE OR REPLACE FUNCTION pg_catalog.date_part(text, date)
 RETURNS double precision
 LANGUAGE sql
 IMMUTABLE PARALLEL SAFE STRICT COST 1
AS $function$select pg_catalog.date_part($1, cast($2 as timestamp without time zone))$function$
CREATE OR REPLACE FUNCTION pg_catalog.date_part(text, time without time zone)
 RETURNS double precision
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$time_part$function$
CREATE OR REPLACE FUNCTION pg_catalog.date_part(text, timestamp without time zone)
 RETURNS double precision
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$timestamp_part$function$
]]></string>
			<comment><![CDATA[extract field from timestamp with time zone]]></comment>
		</function>
		<function name="date_part_001" id="Function_24fa03ca" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.date_part(text, timestamp with time zone)
 RETURNS double precision
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$timestamptz_part$function$
CREATE OR REPLACE FUNCTION pg_catalog.date_part(text, interval)
 RETURNS double precision
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$interval_part$function$
CREATE OR REPLACE FUNCTION pg_catalog.date_part(text, time with time zone)
 RETURNS double precision
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$timetz_part$function$
CREATE OR REPLACE FUNCTION pg_catalog.date_part(text, abstime)
 RETURNS double precision
 LANGUAGE sql
 STABLE PARALLEL SAFE STRICT COST 1
AS $function$select pg_catalog.date_part($1, cast($2 as timestamp with time zone))$function$
CREATE OR REPLACE FUNCTION pg_catalog.date_part(text, reltime)
 RETURNS double precision
 LANGUAGE sql
 STABLE PARALLEL SAFE STRICT COST 1
AS $function$select pg_catalog.date_part($1, cast($2 as pg_catalog.interval))$function$
CREATE OR REPLACE FUNCTION pg_catalog.date_part(text, date)
 RETURNS double precision
 LANGUAGE sql
 IMMUTABLE PARALLEL SAFE STRICT COST 1
AS $function$select pg_catalog.date_part($1, cast($2 as timestamp without time zone))$function$
CREATE OR REPLACE FUNCTION pg_catalog.date_part(text, time without time zone)
 RETURNS double precision
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$time_part$function$
CREATE OR REPLACE FUNCTION pg_catalog.date_part(text, timestamp without time zone)
 RETURNS double precision
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$timestamp_part$function$
]]></string>
			<comment><![CDATA[extract field from timestamp with time zone]]></comment>
		</function>
		<function name="date_part_002" id="Function_f4a4515" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.date_part(text, timestamp with time zone)
 RETURNS double precision
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$timestamptz_part$function$
CREATE OR REPLACE FUNCTION pg_catalog.date_part(text, interval)
 RETURNS double precision
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$interval_part$function$
CREATE OR REPLACE FUNCTION pg_catalog.date_part(text, time with time zone)
 RETURNS double precision
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$timetz_part$function$
CREATE OR REPLACE FUNCTION pg_catalog.date_part(text, abstime)
 RETURNS double precision
 LANGUAGE sql
 STABLE PARALLEL SAFE STRICT COST 1
AS $function$select pg_catalog.date_part($1, cast($2 as timestamp with time zone))$function$
CREATE OR REPLACE FUNCTION pg_catalog.date_part(text, reltime)
 RETURNS double precision
 LANGUAGE sql
 STABLE PARALLEL SAFE STRICT COST 1
AS $function$select pg_catalog.date_part($1, cast($2 as pg_catalog.interval))$function$
CREATE OR REPLACE FUNCTION pg_catalog.date_part(text, date)
 RETURNS double precision
 LANGUAGE sql
 IMMUTABLE PARALLEL SAFE STRICT COST 1
AS $function$select pg_catalog.date_part($1, cast($2 as timestamp without time zone))$function$
CREATE OR REPLACE FUNCTION pg_catalog.date_part(text, time without time zone)
 RETURNS double precision
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$time_part$function$
CREATE OR REPLACE FUNCTION pg_catalog.date_part(text, timestamp without time zone)
 RETURNS double precision
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$timestamp_part$function$
]]></string>
			<comment><![CDATA[extract field from timestamp with time zone]]></comment>
		</function>
		<function name="date_part_003" id="Function_1649f8c2" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.date_part(text, timestamp with time zone)
 RETURNS double precision
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$timestamptz_part$function$
CREATE OR REPLACE FUNCTION pg_catalog.date_part(text, interval)
 RETURNS double precision
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$interval_part$function$
CREATE OR REPLACE FUNCTION pg_catalog.date_part(text, time with time zone)
 RETURNS double precision
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$timetz_part$function$
CREATE OR REPLACE FUNCTION pg_catalog.date_part(text, abstime)
 RETURNS double precision
 LANGUAGE sql
 STABLE PARALLEL SAFE STRICT COST 1
AS $function$select pg_catalog.date_part($1, cast($2 as timestamp with time zone))$function$
CREATE OR REPLACE FUNCTION pg_catalog.date_part(text, reltime)
 RETURNS double precision
 LANGUAGE sql
 STABLE PARALLEL SAFE STRICT COST 1
AS $function$select pg_catalog.date_part($1, cast($2 as pg_catalog.interval))$function$
CREATE OR REPLACE FUNCTION pg_catalog.date_part(text, date)
 RETURNS double precision
 LANGUAGE sql
 IMMUTABLE PARALLEL SAFE STRICT COST 1
AS $function$select pg_catalog.date_part($1, cast($2 as timestamp without time zone))$function$
CREATE OR REPLACE FUNCTION pg_catalog.date_part(text, time without time zone)
 RETURNS double precision
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$time_part$function$
CREATE OR REPLACE FUNCTION pg_catalog.date_part(text, timestamp without time zone)
 RETURNS double precision
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$timestamp_part$function$
]]></string>
			<comment><![CDATA[extract field from timestamp with time zone]]></comment>
		</function>
		<function name="date_part_004" id="Function_31e2fe35" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.date_part(text, timestamp with time zone)
 RETURNS double precision
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$timestamptz_part$function$
CREATE OR REPLACE FUNCTION pg_catalog.date_part(text, interval)
 RETURNS double precision
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$interval_part$function$
CREATE OR REPLACE FUNCTION pg_catalog.date_part(text, time with time zone)
 RETURNS double precision
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$timetz_part$function$
CREATE OR REPLACE FUNCTION pg_catalog.date_part(text, abstime)
 RETURNS double precision
 LANGUAGE sql
 STABLE PARALLEL SAFE STRICT COST 1
AS $function$select pg_catalog.date_part($1, cast($2 as timestamp with time zone))$function$
CREATE OR REPLACE FUNCTION pg_catalog.date_part(text, reltime)
 RETURNS double precision
 LANGUAGE sql
 STABLE PARALLEL SAFE STRICT COST 1
AS $function$select pg_catalog.date_part($1, cast($2 as pg_catalog.interval))$function$
CREATE OR REPLACE FUNCTION pg_catalog.date_part(text, date)
 RETURNS double precision
 LANGUAGE sql
 IMMUTABLE PARALLEL SAFE STRICT COST 1
AS $function$select pg_catalog.date_part($1, cast($2 as timestamp without time zone))$function$
CREATE OR REPLACE FUNCTION pg_catalog.date_part(text, time without time zone)
 RETURNS double precision
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$time_part$function$
CREATE OR REPLACE FUNCTION pg_catalog.date_part(text, timestamp without time zone)
 RETURNS double precision
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$timestamp_part$function$
]]></string>
			<comment><![CDATA[extract field from timestamp with time zone]]></comment>
		</function>
		<function name="date_part_005" id="Function_81d3b2f" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.date_part(text, timestamp with time zone)
 RETURNS double precision
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$timestamptz_part$function$
CREATE OR REPLACE FUNCTION pg_catalog.date_part(text, interval)
 RETURNS double precision
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$interval_part$function$
CREATE OR REPLACE FUNCTION pg_catalog.date_part(text, time with time zone)
 RETURNS double precision
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$timetz_part$function$
CREATE OR REPLACE FUNCTION pg_catalog.date_part(text, abstime)
 RETURNS double precision
 LANGUAGE sql
 STABLE PARALLEL SAFE STRICT COST 1
AS $function$select pg_catalog.date_part($1, cast($2 as timestamp with time zone))$function$
CREATE OR REPLACE FUNCTION pg_catalog.date_part(text, reltime)
 RETURNS double precision
 LANGUAGE sql
 STABLE PARALLEL SAFE STRICT COST 1
AS $function$select pg_catalog.date_part($1, cast($2 as pg_catalog.interval))$function$
CREATE OR REPLACE FUNCTION pg_catalog.date_part(text, date)
 RETURNS double precision
 LANGUAGE sql
 IMMUTABLE PARALLEL SAFE STRICT COST 1
AS $function$select pg_catalog.date_part($1, cast($2 as timestamp without time zone))$function$
CREATE OR REPLACE FUNCTION pg_catalog.date_part(text, time without time zone)
 RETURNS double precision
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$time_part$function$
CREATE OR REPLACE FUNCTION pg_catalog.date_part(text, timestamp without time zone)
 RETURNS double precision
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$timestamp_part$function$
]]></string>
			<comment><![CDATA[extract field from timestamp with time zone]]></comment>
		</function>
		<function name="date_part_006" id="Function_30124b3f" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.date_part(text, timestamp with time zone)
 RETURNS double precision
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$timestamptz_part$function$
CREATE OR REPLACE FUNCTION pg_catalog.date_part(text, interval)
 RETURNS double precision
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$interval_part$function$
CREATE OR REPLACE FUNCTION pg_catalog.date_part(text, time with time zone)
 RETURNS double precision
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$timetz_part$function$
CREATE OR REPLACE FUNCTION pg_catalog.date_part(text, abstime)
 RETURNS double precision
 LANGUAGE sql
 STABLE PARALLEL SAFE STRICT COST 1
AS $function$select pg_catalog.date_part($1, cast($2 as timestamp with time zone))$function$
CREATE OR REPLACE FUNCTION pg_catalog.date_part(text, reltime)
 RETURNS double precision
 LANGUAGE sql
 STABLE PARALLEL SAFE STRICT COST 1
AS $function$select pg_catalog.date_part($1, cast($2 as pg_catalog.interval))$function$
CREATE OR REPLACE FUNCTION pg_catalog.date_part(text, date)
 RETURNS double precision
 LANGUAGE sql
 IMMUTABLE PARALLEL SAFE STRICT COST 1
AS $function$select pg_catalog.date_part($1, cast($2 as timestamp without time zone))$function$
CREATE OR REPLACE FUNCTION pg_catalog.date_part(text, time without time zone)
 RETURNS double precision
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$time_part$function$
CREATE OR REPLACE FUNCTION pg_catalog.date_part(text, timestamp without time zone)
 RETURNS double precision
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$timestamp_part$function$
]]></string>
			<comment><![CDATA[extract field from timestamp with time zone]]></comment>
		</function>
		<function name="date_part_007" id="Function_15b510c5" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.date_part(text, timestamp with time zone)
 RETURNS double precision
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$timestamptz_part$function$
CREATE OR REPLACE FUNCTION pg_catalog.date_part(text, interval)
 RETURNS double precision
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$interval_part$function$
CREATE OR REPLACE FUNCTION pg_catalog.date_part(text, time with time zone)
 RETURNS double precision
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$timetz_part$function$
CREATE OR REPLACE FUNCTION pg_catalog.date_part(text, abstime)
 RETURNS double precision
 LANGUAGE sql
 STABLE PARALLEL SAFE STRICT COST 1
AS $function$select pg_catalog.date_part($1, cast($2 as timestamp with time zone))$function$
CREATE OR REPLACE FUNCTION pg_catalog.date_part(text, reltime)
 RETURNS double precision
 LANGUAGE sql
 STABLE PARALLEL SAFE STRICT COST 1
AS $function$select pg_catalog.date_part($1, cast($2 as pg_catalog.interval))$function$
CREATE OR REPLACE FUNCTION pg_catalog.date_part(text, date)
 RETURNS double precision
 LANGUAGE sql
 IMMUTABLE PARALLEL SAFE STRICT COST 1
AS $function$select pg_catalog.date_part($1, cast($2 as timestamp without time zone))$function$
CREATE OR REPLACE FUNCTION pg_catalog.date_part(text, time without time zone)
 RETURNS double precision
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$time_part$function$
CREATE OR REPLACE FUNCTION pg_catalog.date_part(text, timestamp without time zone)
 RETURNS double precision
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$timestamp_part$function$
]]></string>
			<comment><![CDATA[extract field from timestamp with time zone]]></comment>
		</function>
		<function name="date_pl_interval" id="Function_12b1beeb" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.date_pl_interval(date, interval)
 RETURNS timestamp without time zone
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$date_pl_interval$function$
]]></string>
			<comment><![CDATA[implementation of + operator]]></comment>
		</function>
		<function name="date_pli" id="Function_3515b702" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.date_pli(date, integer)
 RETURNS date
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$date_pli$function$
]]></string>
			<comment><![CDATA[implementation of + operator]]></comment>
		</function>
		<function name="date_recv" id="Function_fea40f0" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.date_recv(internal)
 RETURNS date
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$date_recv$function$
]]></string>
			<comment><![CDATA[I/O]]></comment>
		</function>
		<function name="date_send" id="Function_202acd54" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.date_send(date)
 RETURNS bytea
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$date_send$function$
]]></string>
			<comment><![CDATA[I/O]]></comment>
		</function>
		<function name="date_smaller" id="Function_25bb3203" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.date_smaller(date, date)
 RETURNS date
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$date_smaller$function$
]]></string>
			<comment><![CDATA[smaller of two]]></comment>
		</function>
		<function name="date_sortsupport" id="Function_2d6336f1" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.date_sortsupport(internal)
 RETURNS void
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$date_sortsupport$function$
]]></string>
			<comment><![CDATA[sort support]]></comment>
		</function>
		<function name="date_trunc" id="Function_238d62ee" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.date_trunc(text, timestamp without time zone)
 RETURNS timestamp without time zone
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$timestamp_trunc$function$
CREATE OR REPLACE FUNCTION pg_catalog.date_trunc(text, timestamp with time zone)
 RETURNS timestamp with time zone
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$timestamptz_trunc$function$
CREATE OR REPLACE FUNCTION pg_catalog.date_trunc(text, interval)
 RETURNS interval
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$interval_trunc$function$
]]></string>
			<comment><![CDATA[truncate timestamp with time zone to specified units]]></comment>
		</function>
		<function name="date_trunc_001" id="Function_3560b5ac" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.date_trunc(text, timestamp without time zone)
 RETURNS timestamp without time zone
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$timestamp_trunc$function$
CREATE OR REPLACE FUNCTION pg_catalog.date_trunc(text, timestamp with time zone)
 RETURNS timestamp with time zone
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$timestamptz_trunc$function$
CREATE OR REPLACE FUNCTION pg_catalog.date_trunc(text, interval)
 RETURNS interval
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$interval_trunc$function$
]]></string>
			<comment><![CDATA[truncate timestamp with time zone to specified units]]></comment>
		</function>
		<function name="date_trunc_002" id="Function_32c0a849" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.date_trunc(text, timestamp without time zone)
 RETURNS timestamp without time zone
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$timestamp_trunc$function$
CREATE OR REPLACE FUNCTION pg_catalog.date_trunc(text, timestamp with time zone)
 RETURNS timestamp with time zone
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$timestamptz_trunc$function$
CREATE OR REPLACE FUNCTION pg_catalog.date_trunc(text, interval)
 RETURNS interval
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$interval_trunc$function$
]]></string>
			<comment><![CDATA[truncate timestamp with time zone to specified units]]></comment>
		</function>
		<function name="daterange" id="Function_1fed37eb" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.daterange(date, date)
 RETURNS daterange
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE
AS $function$range_constructor2$function$
CREATE OR REPLACE FUNCTION pg_catalog.daterange(date, date, text)
 RETURNS daterange
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE
AS $function$range_constructor3$function$
]]></string>
			<comment><![CDATA[daterange constructor]]></comment>
		</function>
		<function name="daterange_001" id="Function_3ae74ac5" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.daterange(date, date)
 RETURNS daterange
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE
AS $function$range_constructor2$function$
CREATE OR REPLACE FUNCTION pg_catalog.daterange(date, date, text)
 RETURNS daterange
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE
AS $function$range_constructor3$function$
]]></string>
			<comment><![CDATA[daterange constructor]]></comment>
		</function>
		<function name="daterange_canonical" id="Function_22e89c5e" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.daterange_canonical(daterange)
 RETURNS daterange
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$daterange_canonical$function$
]]></string>
			<comment><![CDATA[convert a date range to canonical form]]></comment>
		</function>
		<function name="daterange_subdiff" id="Function_2f57bce6" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.daterange_subdiff(date, date)
 RETURNS double precision
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$daterange_subdiff$function$
]]></string>
			<comment><![CDATA[float8 difference of two date values]]></comment>
		</function>
		<function name="datetime_pl" id="Function_7caac72" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.datetime_pl(date, time without time zone)
 RETURNS timestamp without time zone
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$datetime_timestamp$function$
]]></string>
			<comment><![CDATA[implementation of + operator]]></comment>
		</function>
		<function name="datetimetz_pl" id="Function_1673adee" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.datetimetz_pl(date, time with time zone)
 RETURNS timestamp with time zone
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$datetimetz_timestamptz$function$
]]></string>
			<comment><![CDATA[implementation of + operator]]></comment>
		</function>
		<function name="dcbrt" id="Function_12cda295" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.dcbrt(double precision)
 RETURNS double precision
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$dcbrt$function$
]]></string>
			<comment><![CDATA[implementation of ||/ operator]]></comment>
		</function>
		<function name="decode" id="Function_1a2ed9b0" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.decode(text, text)
 RETURNS bytea
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$binary_decode$function$
]]></string>
			<comment><![CDATA[convert ascii-encoded text string into bytea value]]></comment>
		</function>
		<function name="degrees" id="Function_17a6dbed" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.degrees(double precision)
 RETURNS double precision
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$degrees$function$
]]></string>
			<comment><![CDATA[radians to degrees]]></comment>
		</function>
		<function name="dense_rank" id="Function_36f5355f" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.dense_rank()
 RETURNS bigint
 LANGUAGE internal
 WINDOW IMMUTABLE PARALLEL SAFE
AS $function$window_dense_rank$function$
]]></string>
			<comment><![CDATA[integer rank without gaps]]></comment>
		</function>
		<function name="dense_rank_001" id="Function_dde1eee" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.dense_rank()
 RETURNS bigint
 LANGUAGE internal
 WINDOW IMMUTABLE PARALLEL SAFE
AS $function$window_dense_rank$function$
]]></string>
			<comment><![CDATA[integer rank without gaps]]></comment>
		</function>
		<function name="dense_rank_final" id="Function_2bbbe1a7" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.dense_rank_final(internal, VARIADIC "any")
 RETURNS bigint
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE
AS $function$hypothetical_dense_rank_final$function$
]]></string>
			<comment><![CDATA[aggregate final function]]></comment>
		</function>
		<function name="dexp" id="Function_1f9eae5a" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.dexp(double precision)
 RETURNS double precision
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$dexp$function$
]]></string>
			<comment><![CDATA[natural exponential (e^x)]]></comment>
		</function>
		<function name="diagonal" id="Function_1c4ac964" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.diagonal(box)
 RETURNS lseg
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$box_diagonal$function$
]]></string>
			<comment><![CDATA[box diagonal]]></comment>
		</function>
		<function name="diameter" id="Function_1db9513d" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.diameter(circle)
 RETURNS double precision
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$circle_diameter$function$
]]></string>
			<comment><![CDATA[diameter of circle]]></comment>
		</function>
		<function name="dispell_init" id="Function_322d435b" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.dispell_init(internal)
 RETURNS internal
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$dispell_init$function$
]]></string>
			<comment><![CDATA[(internal)]]></comment>
		</function>
		<function name="dispell_lexize" id="Function_1c82b48f" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.dispell_lexize(internal, internal, internal, internal)
 RETURNS internal
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$dispell_lexize$function$
]]></string>
			<comment><![CDATA[(internal)]]></comment>
		</function>
		<function name="dist_cpoint" id="Function_9e27029" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.dist_cpoint(circle, point)
 RETURNS double precision
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$dist_cpoint$function$
]]></string>
			<comment><![CDATA[implementation of <-> operator]]></comment>
		</function>
		<function name="dist_cpoly" id="Function_1a3dd052" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.dist_cpoly(circle, polygon)
 RETURNS double precision
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$dist_cpoly$function$
]]></string>
			<comment><![CDATA[implementation of <-> operator]]></comment>
		</function>
		<function name="dist_lb" id="Function_f118b87" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.dist_lb(line, box)
 RETURNS double precision
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$dist_lb$function$
]]></string>
			<comment><![CDATA[implementation of <-> operator]]></comment>
		</function>
		<function name="dist_pb" id="Function_ad81342" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.dist_pb(point, box)
 RETURNS double precision
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$dist_pb$function$
]]></string>
			<comment><![CDATA[implementation of <-> operator]]></comment>
		</function>
		<function name="dist_pc" id="Function_24cd6f1d" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.dist_pc(point, circle)
 RETURNS double precision
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$dist_pc$function$
]]></string>
			<comment><![CDATA[implementation of <-> operator]]></comment>
		</function>
		<function name="dist_pl" id="Function_3495233d" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.dist_pl(point, line)
 RETURNS double precision
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$dist_pl$function$
]]></string>
			<comment><![CDATA[implementation of <-> operator]]></comment>
		</function>
		<function name="dist_polyp" id="Function_21f94a3f" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.dist_polyp(polygon, point)
 RETURNS double precision
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$dist_polyp$function$
]]></string>
			<comment><![CDATA[implementation of <-> operator]]></comment>
		</function>
		<function name="dist_ppath" id="Function_59cd687" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.dist_ppath(point, path)
 RETURNS double precision
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$dist_ppath$function$
]]></string>
			<comment><![CDATA[implementation of <-> operator]]></comment>
		</function>
		<function name="dist_ppoly" id="Function_1cbc4785" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.dist_ppoly(point, polygon)
 RETURNS double precision
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$dist_ppoly$function$
]]></string>
			<comment><![CDATA[implementation of <-> operator]]></comment>
		</function>
		<function name="dist_ps" id="Function_f3e5dce" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.dist_ps(point, lseg)
 RETURNS double precision
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$dist_ps$function$
]]></string>
			<comment><![CDATA[implementation of <-> operator]]></comment>
		</function>
		<function name="dist_sb" id="Function_a3a1eb" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.dist_sb(lseg, box)
 RETURNS double precision
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$dist_sb$function$
]]></string>
			<comment><![CDATA[implementation of <-> operator]]></comment>
		</function>
		<function name="dist_sl" id="Function_fe4cd6e" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.dist_sl(lseg, line)
 RETURNS double precision
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$dist_sl$function$
]]></string>
			<comment><![CDATA[implementation of <-> operator]]></comment>
		</function>
		<function name="div" id="Function_2f5854b0" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.div(numeric, numeric)
 RETURNS numeric
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$numeric_div_trunc$function$
]]></string>
			<comment><![CDATA[trunc(x/y)]]></comment>
		</function>
		<function name="dlog1" id="Function_3790ef6a" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.dlog1(double precision)
 RETURNS double precision
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$dlog1$function$
]]></string>
			<comment><![CDATA[natural logarithm]]></comment>
		</function>
		<function name="dlog10" id="Function_918540b" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.dlog10(double precision)
 RETURNS double precision
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$dlog10$function$
]]></string>
			<comment><![CDATA[base 10 logarithm]]></comment>
		</function>
		<function name="domain_in" id="Function_656a007" isSystem="false" >
			<comment><![CDATA[I/O]]></comment>
		</function>
		<function name="domain_recv" id="Function_24de119c" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.domain_recv(internal, oid, integer)
 RETURNS "any"
 LANGUAGE internal
 STABLE PARALLEL SAFE
AS $function$domain_recv$function$
]]></string>
			<comment><![CDATA[I/O]]></comment>
		</function>
		<function name="dpow" id="Function_aa8ec18" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.dpow(double precision, double precision)
 RETURNS double precision
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$dpow$function$
]]></string>
			<comment><![CDATA[implementation of ^ operator]]></comment>
		</function>
		<function name="dround" id="Function_2a5e1b6f" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.dround(double precision)
 RETURNS double precision
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$dround$function$
]]></string>
			<comment><![CDATA[round to nearest integer]]></comment>
		</function>
		<function name="dsimple_init" id="Function_8dcb956" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.dsimple_init(internal)
 RETURNS internal
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$dsimple_init$function$
]]></string>
			<comment><![CDATA[(internal)]]></comment>
		</function>
		<function name="dsimple_lexize" id="Function_ccd6fe6" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.dsimple_lexize(internal, internal, internal, internal)
 RETURNS internal
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$dsimple_lexize$function$
]]></string>
			<comment><![CDATA[(internal)]]></comment>
		</function>
		<function name="dsnowball_init" id="Function_358ee44f" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.dsnowball_init(internal)
 RETURNS internal
 LANGUAGE c
 STRICT
AS '$libdir/dict_snowball', $function$dsnowball_init$function$
]]></string>
		</function>
		<function name="dsnowball_lexize" id="Function_16c7f740" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.dsnowball_lexize(internal, internal, internal, internal)
 RETURNS internal
 LANGUAGE c
 STRICT
AS '$libdir/dict_snowball', $function$dsnowball_lexize$function$
]]></string>
		</function>
		<function name="dsqrt" id="Function_1a88cc72" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.dsqrt(double precision)
 RETURNS double precision
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$dsqrt$function$
]]></string>
			<comment><![CDATA[implementation of |/ operator]]></comment>
		</function>
		<function name="dsynonym_init" id="Function_34955d3c" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.dsynonym_init(internal)
 RETURNS internal
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$dsynonym_init$function$
]]></string>
			<comment><![CDATA[(internal)]]></comment>
		</function>
		<function name="dsynonym_lexize" id="Function_3449031a" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.dsynonym_lexize(internal, internal, internal, internal)
 RETURNS internal
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$dsynonym_lexize$function$
]]></string>
			<comment><![CDATA[(internal)]]></comment>
		</function>
		<function name="dtrunc" id="Function_26d64c1" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.dtrunc(double precision)
 RETURNS double precision
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$dtrunc$function$
]]></string>
			<comment><![CDATA[truncate to integer]]></comment>
		</function>
		<function name="elem_contained_by_range" id="Function_189b51ec" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.elem_contained_by_range(anyelement, anyrange)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$elem_contained_by_range$function$
]]></string>
			<comment><![CDATA[implementation of <@ operator]]></comment>
		</function>
		<function name="encode" id="Function_35122a16" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.encode(bytea, text)
 RETURNS text
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$binary_encode$function$
]]></string>
			<comment><![CDATA[convert bytea value into some ascii-only text string]]></comment>
		</function>
		<function name="enum_cmp" id="Function_1e63c61b" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.enum_cmp(anyenum, anyenum)
 RETURNS integer
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$enum_cmp$function$
]]></string>
			<comment><![CDATA[less-equal-greater]]></comment>
		</function>
		<function name="enum_eq" id="Function_30dd0b17" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.enum_eq(anyenum, anyenum)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$enum_eq$function$
]]></string>
			<comment><![CDATA[implementation of = operator]]></comment>
		</function>
		<function name="enum_first" id="Function_e811b00" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.enum_first(anyenum)
 RETURNS anyenum
 LANGUAGE internal
 STABLE PARALLEL SAFE
AS $function$enum_first$function$
]]></string>
			<comment><![CDATA[first value of the input enum type]]></comment>
		</function>
		<function name="enum_ge" id="Function_9797914" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.enum_ge(anyenum, anyenum)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$enum_ge$function$
]]></string>
			<comment><![CDATA[implementation of >= operator]]></comment>
		</function>
		<function name="enum_gt" id="Function_daee682" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.enum_gt(anyenum, anyenum)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$enum_gt$function$
]]></string>
			<comment><![CDATA[implementation of > operator]]></comment>
		</function>
		<function name="enum_in" id="Function_33a6c2ca" isSystem="false" >
			<comment><![CDATA[I/O]]></comment>
		</function>
		<function name="enum_larger" id="Function_d14a2e3" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.enum_larger(anyenum, anyenum)
 RETURNS anyenum
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$enum_larger$function$
]]></string>
			<comment><![CDATA[larger of two]]></comment>
		</function>
		<function name="enum_last" id="Function_237c8c20" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.enum_last(anyenum)
 RETURNS anyenum
 LANGUAGE internal
 STABLE PARALLEL SAFE
AS $function$enum_last$function$
]]></string>
			<comment><![CDATA[last value of the input enum type]]></comment>
		</function>
		<function name="enum_le" id="Function_69c128d" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.enum_le(anyenum, anyenum)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$enum_le$function$
]]></string>
			<comment><![CDATA[implementation of <= operator]]></comment>
		</function>
		<function name="enum_lt" id="Function_2fe14b2e" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.enum_lt(anyenum, anyenum)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$enum_lt$function$
]]></string>
			<comment><![CDATA[implementation of < operator]]></comment>
		</function>
		<function name="enum_ne" id="Function_1ff83567" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.enum_ne(anyenum, anyenum)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$enum_ne$function$
]]></string>
			<comment><![CDATA[implementation of <> operator]]></comment>
		</function>
		<function name="enum_out" id="Function_ef726e9" isSystem="false" >
			<comment><![CDATA[I/O]]></comment>
		</function>
		<function name="enum_range" id="Function_ac89f6b" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.enum_range(anyenum)
 RETURNS anyarray
 LANGUAGE internal
 STABLE PARALLEL SAFE
AS $function$enum_range_all$function$
CREATE OR REPLACE FUNCTION pg_catalog.enum_range(anyenum, anyenum)
 RETURNS anyarray
 LANGUAGE internal
 STABLE PARALLEL SAFE
AS $function$enum_range_bounds$function$
]]></string>
			<comment><![CDATA[range between the two given enum values, as an ordered array]]></comment>
		</function>
		<function name="enum_range_001" id="Function_161cc037" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.enum_range(anyenum)
 RETURNS anyarray
 LANGUAGE internal
 STABLE PARALLEL SAFE
AS $function$enum_range_all$function$
CREATE OR REPLACE FUNCTION pg_catalog.enum_range(anyenum, anyenum)
 RETURNS anyarray
 LANGUAGE internal
 STABLE PARALLEL SAFE
AS $function$enum_range_bounds$function$
]]></string>
			<comment><![CDATA[range between the two given enum values, as an ordered array]]></comment>
		</function>
		<function name="enum_recv" id="Function_1c598b4b" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.enum_recv(internal, oid)
 RETURNS anyenum
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$enum_recv$function$
]]></string>
			<comment><![CDATA[I/O]]></comment>
		</function>
		<function name="enum_send" id="Function_2a1a80e0" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.enum_send(anyenum)
 RETURNS bytea
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$enum_send$function$
]]></string>
			<comment><![CDATA[I/O]]></comment>
		</function>
		<function name="enum_smaller" id="Function_2c284a11" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.enum_smaller(anyenum, anyenum)
 RETURNS anyenum
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$enum_smaller$function$
]]></string>
			<comment><![CDATA[smaller of two]]></comment>
		</function>
		<function name="eqjoinsel" id="Function_1b6c9667" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.eqjoinsel(internal, oid, internal, smallint, internal)
 RETURNS double precision
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$eqjoinsel$function$
]]></string>
			<comment><![CDATA[join selectivity of = and related operators]]></comment>
		</function>
		<function name="eqsel" id="Function_1c15854" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.eqsel(internal, oid, internal, integer)
 RETURNS double precision
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$eqsel$function$
]]></string>
			<comment><![CDATA[restriction selectivity of = and related operators]]></comment>
		</function>
		<function name="euc_cn_to_mic" id="Function_147f5dda" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.euc_cn_to_mic(integer, integer, cstring, internal, integer)
 RETURNS void
 LANGUAGE c
 PARALLEL SAFE STRICT
AS '$libdir/euc_cn_and_mic', $function$euc_cn_to_mic$function$
]]></string>
			<comment><![CDATA[internal conversion function for EUC_CN to MULE_INTERNAL]]></comment>
		</function>
		<function name="euc_cn_to_utf8" id="Function_3765601e" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.euc_cn_to_utf8(integer, integer, cstring, internal, integer)
 RETURNS void
 LANGUAGE c
 PARALLEL SAFE STRICT
AS '$libdir/utf8_and_euc_cn', $function$euc_cn_to_utf8$function$
]]></string>
			<comment><![CDATA[internal conversion function for EUC_CN to UTF8]]></comment>
		</function>
		<function name="euc_jis_2004_to_shift_jis_2004" id="Function_122a7f80" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.euc_jis_2004_to_shift_jis_2004(integer, integer, cstring, internal, integer)
 RETURNS void
 LANGUAGE c
 PARALLEL SAFE STRICT
AS '$libdir/euc2004_sjis2004', $function$euc_jis_2004_to_shift_jis_2004$function$
]]></string>
			<comment><![CDATA[internal conversion function for EUC_JIS_2004 to SHIFT_JIS_2004]]></comment>
		</function>
		<function name="euc_jis_2004_to_utf8" id="Function_133c7444" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.euc_jis_2004_to_utf8(integer, integer, cstring, internal, integer)
 RETURNS void
 LANGUAGE c
 PARALLEL SAFE STRICT
AS '$libdir/utf8_and_euc2004', $function$euc_jis_2004_to_utf8$function$
]]></string>
			<comment><![CDATA[internal conversion function for EUC_JIS_2004 to UTF8]]></comment>
		</function>
		<function name="euc_jp_to_mic" id="Function_1917b395" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.euc_jp_to_mic(integer, integer, cstring, internal, integer)
 RETURNS void
 LANGUAGE c
 PARALLEL SAFE STRICT
AS '$libdir/euc_jp_and_sjis', $function$euc_jp_to_mic$function$
]]></string>
			<comment><![CDATA[internal conversion function for EUC_JP to MULE_INTERNAL]]></comment>
		</function>
		<function name="euc_jp_to_sjis" id="Function_26ed6359" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.euc_jp_to_sjis(integer, integer, cstring, internal, integer)
 RETURNS void
 LANGUAGE c
 PARALLEL SAFE STRICT
AS '$libdir/euc_jp_and_sjis', $function$euc_jp_to_sjis$function$
]]></string>
			<comment><![CDATA[internal conversion function for EUC_JP to SJIS]]></comment>
		</function>
		<function name="euc_jp_to_utf8" id="Function_d51992a" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.euc_jp_to_utf8(integer, integer, cstring, internal, integer)
 RETURNS void
 LANGUAGE c
 PARALLEL SAFE STRICT
AS '$libdir/utf8_and_euc_jp', $function$euc_jp_to_utf8$function$
]]></string>
			<comment><![CDATA[internal conversion function for EUC_JP to UTF8]]></comment>
		</function>
		<function name="euc_kr_to_mic" id="Function_19adc18f" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.euc_kr_to_mic(integer, integer, cstring, internal, integer)
 RETURNS void
 LANGUAGE c
 PARALLEL SAFE STRICT
AS '$libdir/euc_kr_and_mic', $function$euc_kr_to_mic$function$
]]></string>
			<comment><![CDATA[internal conversion function for EUC_KR to MULE_INTERNAL]]></comment>
		</function>
		<function name="euc_kr_to_utf8" id="Function_608b6a2" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.euc_kr_to_utf8(integer, integer, cstring, internal, integer)
 RETURNS void
 LANGUAGE c
 PARALLEL SAFE STRICT
AS '$libdir/utf8_and_euc_kr', $function$euc_kr_to_utf8$function$
]]></string>
			<comment><![CDATA[internal conversion function for EUC_KR to UTF8]]></comment>
		</function>
		<function name="euc_tw_to_big5" id="Function_38d7513a" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.euc_tw_to_big5(integer, integer, cstring, internal, integer)
 RETURNS void
 LANGUAGE c
 PARALLEL SAFE STRICT
AS '$libdir/euc_tw_and_big5', $function$euc_tw_to_big5$function$
]]></string>
			<comment><![CDATA[internal conversion function for EUC_TW to BIG5]]></comment>
		</function>
		<function name="euc_tw_to_mic" id="Function_3244e298" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.euc_tw_to_mic(integer, integer, cstring, internal, integer)
 RETURNS void
 LANGUAGE c
 PARALLEL SAFE STRICT
AS '$libdir/euc_tw_and_big5', $function$euc_tw_to_mic$function$
]]></string>
			<comment><![CDATA[internal conversion function for EUC_TW to MULE_INTERNAL]]></comment>
		</function>
		<function name="euc_tw_to_utf8" id="Function_1a40231f" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.euc_tw_to_utf8(integer, integer, cstring, internal, integer)
 RETURNS void
 LANGUAGE c
 PARALLEL SAFE STRICT
AS '$libdir/utf8_and_euc_tw', $function$euc_tw_to_utf8$function$
]]></string>
			<comment><![CDATA[internal conversion function for EUC_TW to UTF8]]></comment>
		</function>
		<function name="event_trigger_in" id="Function_32f792d5" isSystem="false" >
			<comment><![CDATA[I/O]]></comment>
		</function>
		<function name="event_trigger_out" id="Function_2e484789" isSystem="false" >
			<comment><![CDATA[I/O]]></comment>
		</function>
		<function name="every" id="Function_15061290" isSystem="false" >
			<comment><![CDATA[boolean-and aggregate]]></comment>
		</function>
		<function name="exp" id="Function_350a3762" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.exp(double precision)
 RETURNS double precision
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$dexp$function$
CREATE OR REPLACE FUNCTION pg_catalog.exp(numeric)
 RETURNS numeric
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$numeric_exp$function$
]]></string>
			<comment><![CDATA[natural exponential (e^x)]]></comment>
		</function>
		<function name="exp_001" id="Function_32beb8c0" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.exp(double precision)
 RETURNS double precision
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$dexp$function$
CREATE OR REPLACE FUNCTION pg_catalog.exp(numeric)
 RETURNS numeric
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$numeric_exp$function$
]]></string>
			<comment><![CDATA[natural exponential (e^x)]]></comment>
		</function>
		<function name="factorial" id="Function_1f5c606" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.factorial(bigint)
 RETURNS numeric
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$numeric_fac$function$
]]></string>
			<comment><![CDATA[factorial]]></comment>
		</function>
		<function name="family" id="Function_356754cd" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.family(inet)
 RETURNS integer
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$network_family$function$
]]></string>
			<comment><![CDATA[address family (4 for IPv4, 6 for IPv6)]]></comment>
		</function>
		<function name="fdw_handler_in" id="Function_27c1c8af" isSystem="false" >
			<comment><![CDATA[I/O]]></comment>
		</function>
		<function name="fdw_handler_out" id="Function_1ef3e046" isSystem="false" >
			<comment><![CDATA[I/O]]></comment>
		</function>
		<function name="first_value" id="Function_24d4bd24" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.first_value(anyelement)
 RETURNS anyelement
 LANGUAGE internal
 WINDOW IMMUTABLE PARALLEL SAFE STRICT
AS $function$window_first_value$function$
]]></string>
			<comment><![CDATA[fetch the first row value]]></comment>
		</function>
		<function name="float4" id="Function_1289e50" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.float4(smallint)
 RETURNS real
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$i2tof$function$
CREATE OR REPLACE FUNCTION pg_catalog.float4(double precision)
 RETURNS real
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$dtof$function$
CREATE OR REPLACE FUNCTION pg_catalog.float4(integer)
 RETURNS real
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$i4tof$function$
CREATE OR REPLACE FUNCTION pg_catalog.float4(bigint)
 RETURNS real
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$i8tof$function$
CREATE OR REPLACE FUNCTION pg_catalog.float4(numeric)
 RETURNS real
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$numeric_float4$function$
]]></string>
			<comment><![CDATA[convert numeric to float4]]></comment>
		</function>
		<function name="float48div" id="Function_1a020437" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.float48div(real, double precision)
 RETURNS double precision
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$float48div$function$
]]></string>
			<comment><![CDATA[implementation of / operator]]></comment>
		</function>
		<function name="float48eq" id="Function_282f663d" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.float48eq(real, double precision)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT LEAKPROOF
AS $function$float48eq$function$
]]></string>
			<comment><![CDATA[implementation of = operator]]></comment>
		</function>
		<function name="float48ge" id="Function_656fd86" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.float48ge(real, double precision)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT LEAKPROOF
AS $function$float48ge$function$
]]></string>
			<comment><![CDATA[implementation of >= operator]]></comment>
		</function>
		<function name="float48gt" id="Function_19167e7" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.float48gt(real, double precision)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT LEAKPROOF
AS $function$float48gt$function$
]]></string>
			<comment><![CDATA[implementation of > operator]]></comment>
		</function>
		<function name="float48le" id="Function_42aa288" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.float48le(real, double precision)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT LEAKPROOF
AS $function$float48le$function$
]]></string>
			<comment><![CDATA[implementation of <= operator]]></comment>
		</function>
		<function name="float48lt" id="Function_2f2a121e" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.float48lt(real, double precision)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT LEAKPROOF
AS $function$float48lt$function$
]]></string>
			<comment><![CDATA[implementation of < operator]]></comment>
		</function>
		<function name="float48mi" id="Function_1c130c29" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.float48mi(real, double precision)
 RETURNS double precision
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$float48mi$function$
]]></string>
			<comment><![CDATA[implementation of - operator]]></comment>
		</function>
		<function name="float48mul" id="Function_1a940a75" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.float48mul(real, double precision)
 RETURNS double precision
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$float48mul$function$
]]></string>
			<comment><![CDATA[implementation of * operator]]></comment>
		</function>
		<function name="float48ne" id="Function_1fa4a949" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.float48ne(real, double precision)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT LEAKPROOF
AS $function$float48ne$function$
]]></string>
			<comment><![CDATA[implementation of <> operator]]></comment>
		</function>
		<function name="float48pl" id="Function_3d7a54e" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.float48pl(real, double precision)
 RETURNS double precision
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$float48pl$function$
]]></string>
			<comment><![CDATA[implementation of + operator]]></comment>
		</function>
		<function name="float4_001" id="Function_6678989" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.float4(smallint)
 RETURNS real
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$i2tof$function$
CREATE OR REPLACE FUNCTION pg_catalog.float4(double precision)
 RETURNS real
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$dtof$function$
CREATE OR REPLACE FUNCTION pg_catalog.float4(integer)
 RETURNS real
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$i4tof$function$
CREATE OR REPLACE FUNCTION pg_catalog.float4(bigint)
 RETURNS real
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$i8tof$function$
CREATE OR REPLACE FUNCTION pg_catalog.float4(numeric)
 RETURNS real
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$numeric_float4$function$
]]></string>
			<comment><![CDATA[convert numeric to float4]]></comment>
		</function>
		<function name="float4_002" id="Function_25b6f29b" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.float4(smallint)
 RETURNS real
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$i2tof$function$
CREATE OR REPLACE FUNCTION pg_catalog.float4(double precision)
 RETURNS real
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$dtof$function$
CREATE OR REPLACE FUNCTION pg_catalog.float4(integer)
 RETURNS real
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$i4tof$function$
CREATE OR REPLACE FUNCTION pg_catalog.float4(bigint)
 RETURNS real
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$i8tof$function$
CREATE OR REPLACE FUNCTION pg_catalog.float4(numeric)
 RETURNS real
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$numeric_float4$function$
]]></string>
			<comment><![CDATA[convert numeric to float4]]></comment>
		</function>
		<function name="float4_003" id="Function_2df09338" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.float4(smallint)
 RETURNS real
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$i2tof$function$
CREATE OR REPLACE FUNCTION pg_catalog.float4(double precision)
 RETURNS real
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$dtof$function$
CREATE OR REPLACE FUNCTION pg_catalog.float4(integer)
 RETURNS real
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$i4tof$function$
CREATE OR REPLACE FUNCTION pg_catalog.float4(bigint)
 RETURNS real
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$i8tof$function$
CREATE OR REPLACE FUNCTION pg_catalog.float4(numeric)
 RETURNS real
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$numeric_float4$function$
]]></string>
			<comment><![CDATA[convert numeric to float4]]></comment>
		</function>
		<function name="float4_004" id="Function_39141974" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.float4(smallint)
 RETURNS real
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$i2tof$function$
CREATE OR REPLACE FUNCTION pg_catalog.float4(double precision)
 RETURNS real
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$dtof$function$
CREATE OR REPLACE FUNCTION pg_catalog.float4(integer)
 RETURNS real
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$i4tof$function$
CREATE OR REPLACE FUNCTION pg_catalog.float4(bigint)
 RETURNS real
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$i8tof$function$
CREATE OR REPLACE FUNCTION pg_catalog.float4(numeric)
 RETURNS real
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$numeric_float4$function$
]]></string>
			<comment><![CDATA[convert numeric to float4]]></comment>
		</function>
		<function name="float4_accum" id="Function_3459d358" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.float4_accum(double precision[], real)
 RETURNS double precision[]
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$float4_accum$function$
]]></string>
			<comment><![CDATA[aggregate transition function]]></comment>
		</function>
		<function name="float4abs" id="Function_3910c120" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.float4abs(real)
 RETURNS real
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$float4abs$function$
]]></string>
			<comment><![CDATA[implementation of @ operator]]></comment>
		</function>
		<function name="float4div" id="Function_258c9804" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.float4div(real, real)
 RETURNS real
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$float4div$function$
]]></string>
			<comment><![CDATA[implementation of / operator]]></comment>
		</function>
		<function name="float4eq" id="Function_3a32f8e7" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.float4eq(real, real)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT LEAKPROOF
AS $function$float4eq$function$
]]></string>
			<comment><![CDATA[implementation of = operator]]></comment>
		</function>
		<function name="float4ge" id="Function_1babfb13" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.float4ge(real, real)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT LEAKPROOF
AS $function$float4ge$function$
]]></string>
			<comment><![CDATA[implementation of >= operator]]></comment>
		</function>
		<function name="float4gt" id="Function_33a7d4a" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.float4gt(real, real)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT LEAKPROOF
AS $function$float4gt$function$
]]></string>
			<comment><![CDATA[implementation of > operator]]></comment>
		</function>
		<function name="float4in" id="Function_26d3f3db" isSystem="false" >
			<comment><![CDATA[I/O]]></comment>
		</function>
		<function name="float4larger" id="Function_1fb571e9" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.float4larger(real, real)
 RETURNS real
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$float4larger$function$
]]></string>
			<comment><![CDATA[larger of two]]></comment>
		</function>
		<function name="float4le" id="Function_1e13212d" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.float4le(real, real)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT LEAKPROOF
AS $function$float4le$function$
]]></string>
			<comment><![CDATA[implementation of <= operator]]></comment>
		</function>
		<function name="float4lt" id="Function_5b729b2" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.float4lt(real, real)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT LEAKPROOF
AS $function$float4lt$function$
]]></string>
			<comment><![CDATA[implementation of < operator]]></comment>
		</function>
		<function name="float4mi" id="Function_3b75ab3d" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.float4mi(real, real)
 RETURNS real
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$float4mi$function$
]]></string>
			<comment><![CDATA[implementation of - operator]]></comment>
		</function>
		<function name="float4mul" id="Function_290bdfb9" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.float4mul(real, real)
 RETURNS real
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$float4mul$function$
]]></string>
			<comment><![CDATA[implementation of * operator]]></comment>
		</function>
		<function name="float4ne" id="Function_1573e529" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.float4ne(real, real)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT LEAKPROOF
AS $function$float4ne$function$
]]></string>
			<comment><![CDATA[implementation of <> operator]]></comment>
		</function>
		<function name="float4out" id="Function_2377ab84" isSystem="false" >
			<comment><![CDATA[I/O]]></comment>
		</function>
		<function name="float4pl" id="Function_121012e6" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.float4pl(real, real)
 RETURNS real
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$float4pl$function$
]]></string>
			<comment><![CDATA[implementation of + operator]]></comment>
		</function>
		<function name="float4recv" id="Function_76f656" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.float4recv(internal)
 RETURNS real
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$float4recv$function$
]]></string>
			<comment><![CDATA[I/O]]></comment>
		</function>
		<function name="float4send" id="Function_973fd82" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.float4send(real)
 RETURNS bytea
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$float4send$function$
]]></string>
			<comment><![CDATA[I/O]]></comment>
		</function>
		<function name="float4smaller" id="Function_2e12a378" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.float4smaller(real, real)
 RETURNS real
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$float4smaller$function$
]]></string>
			<comment><![CDATA[smaller of two]]></comment>
		</function>
		<function name="float4um" id="Function_24bf859c" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.float4um(real)
 RETURNS real
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$float4um$function$
]]></string>
			<comment><![CDATA[implementation of - operator]]></comment>
		</function>
		<function name="float4up" id="Function_28f1ff87" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.float4up(real)
 RETURNS real
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$float4up$function$
]]></string>
			<comment><![CDATA[implementation of + operator]]></comment>
		</function>
		<function name="float8" id="Function_d794452" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.float8(smallint)
 RETURNS double precision
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$i2tod$function$
CREATE OR REPLACE FUNCTION pg_catalog.float8(real)
 RETURNS double precision
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$ftod$function$
CREATE OR REPLACE FUNCTION pg_catalog.float8(integer)
 RETURNS double precision
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$i4tod$function$
CREATE OR REPLACE FUNCTION pg_catalog.float8(bigint)
 RETURNS double precision
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$i8tod$function$
CREATE OR REPLACE FUNCTION pg_catalog.float8(numeric)
 RETURNS double precision
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$numeric_float8$function$
]]></string>
			<comment><![CDATA[convert numeric to float8]]></comment>
		</function>
		<function name="float84div" id="Function_14d936b0" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.float84div(double precision, real)
 RETURNS double precision
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$float84div$function$
]]></string>
			<comment><![CDATA[implementation of / operator]]></comment>
		</function>
		<function name="float84eq" id="Function_7834e4c" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.float84eq(double precision, real)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT LEAKPROOF
AS $function$float84eq$function$
]]></string>
			<comment><![CDATA[implementation of = operator]]></comment>
		</function>
		<function name="float84ge" id="Function_1d018902" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.float84ge(double precision, real)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT LEAKPROOF
AS $function$float84ge$function$
]]></string>
			<comment><![CDATA[implementation of >= operator]]></comment>
		</function>
		<function name="float84gt" id="Function_f7b1755" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.float84gt(double precision, real)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT LEAKPROOF
AS $function$float84gt$function$
]]></string>
			<comment><![CDATA[implementation of > operator]]></comment>
		</function>
		<function name="float84le" id="Function_39b0aa50" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.float84le(double precision, real)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT LEAKPROOF
AS $function$float84le$function$
]]></string>
			<comment><![CDATA[implementation of <= operator]]></comment>
		</function>
		<function name="float84lt" id="Function_2e08d17b" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.float84lt(double precision, real)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT LEAKPROOF
AS $function$float84lt$function$
]]></string>
			<comment><![CDATA[implementation of < operator]]></comment>
		</function>
		<function name="float84mi" id="Function_2d34e5da" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.float84mi(double precision, real)
 RETURNS double precision
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$float84mi$function$
]]></string>
			<comment><![CDATA[implementation of - operator]]></comment>
		</function>
		<function name="float84mul" id="Function_1536a4ba" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.float84mul(double precision, real)
 RETURNS double precision
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$float84mul$function$
]]></string>
			<comment><![CDATA[implementation of * operator]]></comment>
		</function>
		<function name="float84ne" id="Function_2d9920b2" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.float84ne(double precision, real)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT LEAKPROOF
AS $function$float84ne$function$
]]></string>
			<comment><![CDATA[implementation of <> operator]]></comment>
		</function>
		<function name="float84pl" id="Function_d6bcdf2" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.float84pl(double precision, real)
 RETURNS double precision
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$float84pl$function$
]]></string>
			<comment><![CDATA[implementation of + operator]]></comment>
		</function>
		<function name="float8_001" id="Function_16d3cc09" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.float8(smallint)
 RETURNS double precision
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$i2tod$function$
CREATE OR REPLACE FUNCTION pg_catalog.float8(real)
 RETURNS double precision
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$ftod$function$
CREATE OR REPLACE FUNCTION pg_catalog.float8(integer)
 RETURNS double precision
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$i4tod$function$
CREATE OR REPLACE FUNCTION pg_catalog.float8(bigint)
 RETURNS double precision
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$i8tod$function$
CREATE OR REPLACE FUNCTION pg_catalog.float8(numeric)
 RETURNS double precision
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$numeric_float8$function$
]]></string>
			<comment><![CDATA[convert numeric to float8]]></comment>
		</function>
		<function name="float8_002" id="Function_1da8135f" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.float8(smallint)
 RETURNS double precision
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$i2tod$function$
CREATE OR REPLACE FUNCTION pg_catalog.float8(real)
 RETURNS double precision
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$ftod$function$
CREATE OR REPLACE FUNCTION pg_catalog.float8(integer)
 RETURNS double precision
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$i4tod$function$
CREATE OR REPLACE FUNCTION pg_catalog.float8(bigint)
 RETURNS double precision
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$i8tod$function$
CREATE OR REPLACE FUNCTION pg_catalog.float8(numeric)
 RETURNS double precision
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$numeric_float8$function$
]]></string>
			<comment><![CDATA[convert numeric to float8]]></comment>
		</function>
		<function name="float8_003" id="Function_27fa662f" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.float8(smallint)
 RETURNS double precision
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$i2tod$function$
CREATE OR REPLACE FUNCTION pg_catalog.float8(real)
 RETURNS double precision
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$ftod$function$
CREATE OR REPLACE FUNCTION pg_catalog.float8(integer)
 RETURNS double precision
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$i4tod$function$
CREATE OR REPLACE FUNCTION pg_catalog.float8(bigint)
 RETURNS double precision
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$i8tod$function$
CREATE OR REPLACE FUNCTION pg_catalog.float8(numeric)
 RETURNS double precision
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$numeric_float8$function$
]]></string>
			<comment><![CDATA[convert numeric to float8]]></comment>
		</function>
		<function name="float8_004" id="Function_37fb5157" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.float8(smallint)
 RETURNS double precision
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$i2tod$function$
CREATE OR REPLACE FUNCTION pg_catalog.float8(real)
 RETURNS double precision
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$ftod$function$
CREATE OR REPLACE FUNCTION pg_catalog.float8(integer)
 RETURNS double precision
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$i4tod$function$
CREATE OR REPLACE FUNCTION pg_catalog.float8(bigint)
 RETURNS double precision
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$i8tod$function$
CREATE OR REPLACE FUNCTION pg_catalog.float8(numeric)
 RETURNS double precision
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$numeric_float8$function$
]]></string>
			<comment><![CDATA[convert numeric to float8]]></comment>
		</function>
		<function name="float8_accum" id="Function_1cf91cd4" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.float8_accum(double precision[], double precision)
 RETURNS double precision[]
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$float8_accum$function$
]]></string>
			<comment><![CDATA[aggregate transition function]]></comment>
		</function>
		<function name="float8_avg" id="Function_6d4d84f" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.float8_avg(double precision[])
 RETURNS double precision
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$float8_avg$function$
]]></string>
			<comment><![CDATA[aggregate final function]]></comment>
		</function>
		<function name="float8_combine" id="Function_e977fb6" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.float8_combine(double precision[], double precision[])
 RETURNS double precision[]
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$float8_combine$function$
]]></string>
			<comment><![CDATA[aggregate combine function]]></comment>
		</function>
		<function name="float8_corr" id="Function_185a8bf" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.float8_corr(double precision[])
 RETURNS double precision
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$float8_corr$function$
]]></string>
			<comment><![CDATA[aggregate final function]]></comment>
		</function>
		<function name="float8_covar_pop" id="Function_22309f7b" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.float8_covar_pop(double precision[])
 RETURNS double precision
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$float8_covar_pop$function$
]]></string>
			<comment><![CDATA[aggregate final function]]></comment>
		</function>
		<function name="float8_covar_samp" id="Function_1afe65c8" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.float8_covar_samp(double precision[])
 RETURNS double precision
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$float8_covar_samp$function$
]]></string>
			<comment><![CDATA[aggregate final function]]></comment>
		</function>
		<function name="float8_regr_accum" id="Function_5279f52" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.float8_regr_accum(double precision[], double precision, double precision)
 RETURNS double precision[]
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$float8_regr_accum$function$
]]></string>
			<comment><![CDATA[aggregate transition function]]></comment>
		</function>
		<function name="float8_regr_avgx" id="Function_23fcda06" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.float8_regr_avgx(double precision[])
 RETURNS double precision
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$float8_regr_avgx$function$
]]></string>
			<comment><![CDATA[aggregate final function]]></comment>
		</function>
		<function name="float8_regr_avgy" id="Function_d410f98" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.float8_regr_avgy(double precision[])
 RETURNS double precision
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$float8_regr_avgy$function$
]]></string>
			<comment><![CDATA[aggregate final function]]></comment>
		</function>
		<function name="float8_regr_combine" id="Function_28baa01c" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.float8_regr_combine(double precision[], double precision[])
 RETURNS double precision[]
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$float8_regr_combine$function$
]]></string>
			<comment><![CDATA[aggregate combine function]]></comment>
		</function>
		<function name="float8_regr_intercept" id="Function_221e3e46" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.float8_regr_intercept(double precision[])
 RETURNS double precision
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$float8_regr_intercept$function$
]]></string>
			<comment><![CDATA[aggregate final function]]></comment>
		</function>
		<function name="float8_regr_r2" id="Function_27cd79eb" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.float8_regr_r2(double precision[])
 RETURNS double precision
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$float8_regr_r2$function$
]]></string>
			<comment><![CDATA[aggregate final function]]></comment>
		</function>
		<function name="float8_regr_slope" id="Function_6cc1573" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.float8_regr_slope(double precision[])
 RETURNS double precision
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$float8_regr_slope$function$
]]></string>
			<comment><![CDATA[aggregate final function]]></comment>
		</function>
		<function name="float8_regr_sxx" id="Function_6a2eb70" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.float8_regr_sxx(double precision[])
 RETURNS double precision
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$float8_regr_sxx$function$
]]></string>
			<comment><![CDATA[aggregate final function]]></comment>
		</function>
		<function name="float8_regr_sxy" id="Function_21c55c33" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.float8_regr_sxy(double precision[])
 RETURNS double precision
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$float8_regr_sxy$function$
]]></string>
			<comment><![CDATA[aggregate final function]]></comment>
		</function>
		<function name="float8_regr_syy" id="Function_1a3836fd" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.float8_regr_syy(double precision[])
 RETURNS double precision
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$float8_regr_syy$function$
]]></string>
			<comment><![CDATA[aggregate final function]]></comment>
		</function>
		<function name="float8_stddev_pop" id="Function_f3f6514" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.float8_stddev_pop(double precision[])
 RETURNS double precision
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$float8_stddev_pop$function$
]]></string>
			<comment><![CDATA[aggregate final function]]></comment>
		</function>
		<function name="float8_stddev_samp" id="Function_34127e27" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.float8_stddev_samp(double precision[])
 RETURNS double precision
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$float8_stddev_samp$function$
]]></string>
			<comment><![CDATA[aggregate final function]]></comment>
		</function>
		<function name="float8_var_pop" id="Function_139d44cf" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.float8_var_pop(double precision[])
 RETURNS double precision
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$float8_var_pop$function$
]]></string>
			<comment><![CDATA[aggregate final function]]></comment>
		</function>
		<function name="float8_var_samp" id="Function_232ccf85" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.float8_var_samp(double precision[])
 RETURNS double precision
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$float8_var_samp$function$
]]></string>
			<comment><![CDATA[aggregate final function]]></comment>
		</function>
		<function name="float8abs" id="Function_3584bf36" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.float8abs(double precision)
 RETURNS double precision
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$float8abs$function$
]]></string>
			<comment><![CDATA[implementation of @ operator]]></comment>
		</function>
		<function name="float8div" id="Function_3b0a86a7" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.float8div(double precision, double precision)
 RETURNS double precision
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$float8div$function$
]]></string>
			<comment><![CDATA[implementation of / operator]]></comment>
		</function>
		<function name="float8eq" id="Function_29d1d2e6" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.float8eq(double precision, double precision)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT LEAKPROOF
AS $function$float8eq$function$
]]></string>
			<comment><![CDATA[implementation of = operator]]></comment>
		</function>
		<function name="float8ge" id="Function_396d54fc" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.float8ge(double precision, double precision)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT LEAKPROOF
AS $function$float8ge$function$
]]></string>
			<comment><![CDATA[implementation of >= operator]]></comment>
		</function>
		<function name="float8gt" id="Function_aef980b" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.float8gt(double precision, double precision)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT LEAKPROOF
AS $function$float8gt$function$
]]></string>
			<comment><![CDATA[implementation of > operator]]></comment>
		</function>
		<function name="float8in" id="Function_32f85333" isSystem="false" >
			<comment><![CDATA[I/O]]></comment>
		</function>
		<function name="float8larger" id="Function_1acb3d64" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.float8larger(double precision, double precision)
 RETURNS double precision
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$float8larger$function$
]]></string>
			<comment><![CDATA[larger of two]]></comment>
		</function>
		<function name="float8le" id="Function_1abdd18b" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.float8le(double precision, double precision)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT LEAKPROOF
AS $function$float8le$function$
]]></string>
			<comment><![CDATA[implementation of <= operator]]></comment>
		</function>
		<function name="float8lt" id="Function_1a4ef2e5" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.float8lt(double precision, double precision)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT LEAKPROOF
AS $function$float8lt$function$
]]></string>
			<comment><![CDATA[implementation of < operator]]></comment>
		</function>
		<function name="float8mi" id="Function_25a17fbe" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.float8mi(double precision, double precision)
 RETURNS double precision
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$float8mi$function$
]]></string>
			<comment><![CDATA[implementation of - operator]]></comment>
		</function>
		<function name="float8mul" id="Function_2f63f8c2" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.float8mul(double precision, double precision)
 RETURNS double precision
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$float8mul$function$
]]></string>
			<comment><![CDATA[implementation of * operator]]></comment>
		</function>
		<function name="float8ne" id="Function_22f569c6" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.float8ne(double precision, double precision)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT LEAKPROOF
AS $function$float8ne$function$
]]></string>
			<comment><![CDATA[implementation of <> operator]]></comment>
		</function>
		<function name="float8out" id="Function_10c717cb" isSystem="false" >
			<comment><![CDATA[I/O]]></comment>
		</function>
		<function name="float8pl" id="Function_10efb298" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.float8pl(double precision, double precision)
 RETURNS double precision
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$float8pl$function$
]]></string>
			<comment><![CDATA[implementation of + operator]]></comment>
		</function>
		<function name="float8recv" id="Function_197b67d1" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.float8recv(internal)
 RETURNS double precision
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$float8recv$function$
]]></string>
			<comment><![CDATA[I/O]]></comment>
		</function>
		<function name="float8send" id="Function_2d9ae9f8" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.float8send(double precision)
 RETURNS bytea
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$float8send$function$
]]></string>
			<comment><![CDATA[I/O]]></comment>
		</function>
		<function name="float8smaller" id="Function_35d3b722" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.float8smaller(double precision, double precision)
 RETURNS double precision
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$float8smaller$function$
]]></string>
			<comment><![CDATA[smaller of two]]></comment>
		</function>
		<function name="float8um" id="Function_cc519e8" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.float8um(double precision)
 RETURNS double precision
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$float8um$function$
]]></string>
			<comment><![CDATA[implementation of - operator]]></comment>
		</function>
		<function name="float8up" id="Function_1f482f3e" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.float8up(double precision)
 RETURNS double precision
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$float8up$function$
]]></string>
			<comment><![CDATA[implementation of + operator]]></comment>
		</function>
		<function name="floor" id="Function_10785d36" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.floor(double precision)
 RETURNS double precision
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$dfloor$function$
CREATE OR REPLACE FUNCTION pg_catalog.floor(numeric)
 RETURNS numeric
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$numeric_floor$function$
]]></string>
			<comment><![CDATA[nearest integer <= value]]></comment>
		</function>
		<function name="floor_001" id="Function_5f0b5d7" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.floor(double precision)
 RETURNS double precision
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$dfloor$function$
CREATE OR REPLACE FUNCTION pg_catalog.floor(numeric)
 RETURNS numeric
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$numeric_floor$function$
]]></string>
			<comment><![CDATA[nearest integer <= value]]></comment>
		</function>
		<function name="flt4_mul_cash" id="Function_2ae98bd0" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.flt4_mul_cash(real, money)
 RETURNS money
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$flt4_mul_cash$function$
]]></string>
			<comment><![CDATA[implementation of * operator]]></comment>
		</function>
		<function name="flt8_mul_cash" id="Function_221eec08" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.flt8_mul_cash(double precision, money)
 RETURNS money
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$flt8_mul_cash$function$
]]></string>
			<comment><![CDATA[implementation of * operator]]></comment>
		</function>
		<function name="fmgr_c_validator" id="Function_14882d51" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.fmgr_c_validator(oid)
 RETURNS void
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$fmgr_c_validator$function$
]]></string>
			<comment><![CDATA[(internal)]]></comment>
		</function>
		<function name="fmgr_internal_validator" id="Function_662078c" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.fmgr_internal_validator(oid)
 RETURNS void
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$fmgr_internal_validator$function$
]]></string>
			<comment><![CDATA[(internal)]]></comment>
		</function>
		<function name="fmgr_sql_validator" id="Function_2d3c7294" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.fmgr_sql_validator(oid)
 RETURNS void
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$fmgr_sql_validator$function$
]]></string>
			<comment><![CDATA[(internal)]]></comment>
		</function>
		<function name="format" id="Function_19f02584" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.format(text)
 RETURNS text
 LANGUAGE internal
 STABLE PARALLEL SAFE
AS $function$text_format_nv$function$
CREATE OR REPLACE FUNCTION pg_catalog.format(text, VARIADIC "any")
 RETURNS text
 LANGUAGE internal
 STABLE PARALLEL SAFE
AS $function$text_format$function$
]]></string>
			<comment><![CDATA[format text message]]></comment>
		</function>
		<function name="format_001" id="Function_d79501" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.format(text)
 RETURNS text
 LANGUAGE internal
 STABLE PARALLEL SAFE
AS $function$text_format_nv$function$
CREATE OR REPLACE FUNCTION pg_catalog.format(text, VARIADIC "any")
 RETURNS text
 LANGUAGE internal
 STABLE PARALLEL SAFE
AS $function$text_format$function$
]]></string>
			<comment><![CDATA[format text message]]></comment>
		</function>
		<function name="format_type" id="Function_2c67ebd4" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.format_type(oid, integer)
 RETURNS text
 LANGUAGE internal
 STABLE PARALLEL SAFE
AS $function$format_type$function$
]]></string>
			<comment><![CDATA[format a type oid and atttypmod to canonical SQL]]></comment>
		</function>
		<function name="gb18030_to_utf8" id="Function_2ba98a73" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.gb18030_to_utf8(integer, integer, cstring, internal, integer)
 RETURNS void
 LANGUAGE c
 PARALLEL SAFE STRICT
AS '$libdir/utf8_and_gb18030', $function$gb18030_to_utf8$function$
]]></string>
			<comment><![CDATA[internal conversion function for GB18030 to UTF8]]></comment>
		</function>
		<function name="gbk_to_utf8" id="Function_12fedba" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.gbk_to_utf8(integer, integer, cstring, internal, integer)
 RETURNS void
 LANGUAGE c
 PARALLEL SAFE STRICT
AS '$libdir/utf8_and_gbk', $function$gbk_to_utf8$function$
]]></string>
			<comment><![CDATA[internal conversion function for GBK to UTF8]]></comment>
		</function>
		<function name="generate_series" id="Function_3b5fa84c" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.generate_series(integer, integer, integer)
 RETURNS SETOF integer
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$generate_series_step_int4$function$
CREATE OR REPLACE FUNCTION pg_catalog.generate_series(integer, integer)
 RETURNS SETOF integer
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$generate_series_int4$function$
CREATE OR REPLACE FUNCTION pg_catalog.generate_series(bigint, bigint, bigint)
 RETURNS SETOF bigint
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$generate_series_step_int8$function$
CREATE OR REPLACE FUNCTION pg_catalog.generate_series(bigint, bigint)
 RETURNS SETOF bigint
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$generate_series_int8$function$
CREATE OR REPLACE FUNCTION pg_catalog.generate_series(numeric, numeric, numeric)
 RETURNS SETOF numeric
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$generate_series_step_numeric$function$
CREATE OR REPLACE FUNCTION pg_catalog.generate_series(numeric, numeric)
 RETURNS SETOF numeric
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$generate_series_numeric$function$
CREATE OR REPLACE FUNCTION pg_catalog.generate_series(timestamp without time zone, timestamp without time zone, interval)
 RETURNS SETOF timestamp without time zone
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$generate_series_timestamp$function$
CREATE OR REPLACE FUNCTION pg_catalog.generate_series(timestamp with time zone, timestamp with time zone, interval)
 RETURNS SETOF timestamp with time zone
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$generate_series_timestamptz$function$
]]></string>
			<comment><![CDATA[non-persistent series generator]]></comment>
		</function>
		<function name="generate_series_001" id="Function_c053062" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.generate_series(integer, integer, integer)
 RETURNS SETOF integer
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$generate_series_step_int4$function$
CREATE OR REPLACE FUNCTION pg_catalog.generate_series(integer, integer)
 RETURNS SETOF integer
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$generate_series_int4$function$
CREATE OR REPLACE FUNCTION pg_catalog.generate_series(bigint, bigint, bigint)
 RETURNS SETOF bigint
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$generate_series_step_int8$function$
CREATE OR REPLACE FUNCTION pg_catalog.generate_series(bigint, bigint)
 RETURNS SETOF bigint
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$generate_series_int8$function$
CREATE OR REPLACE FUNCTION pg_catalog.generate_series(numeric, numeric, numeric)
 RETURNS SETOF numeric
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$generate_series_step_numeric$function$
CREATE OR REPLACE FUNCTION pg_catalog.generate_series(numeric, numeric)
 RETURNS SETOF numeric
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$generate_series_numeric$function$
CREATE OR REPLACE FUNCTION pg_catalog.generate_series(timestamp without time zone, timestamp without time zone, interval)
 RETURNS SETOF timestamp without time zone
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$generate_series_timestamp$function$
CREATE OR REPLACE FUNCTION pg_catalog.generate_series(timestamp with time zone, timestamp with time zone, interval)
 RETURNS SETOF timestamp with time zone
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$generate_series_timestamptz$function$
]]></string>
			<comment><![CDATA[non-persistent series generator]]></comment>
		</function>
		<function name="generate_series_002" id="Function_26651f46" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.generate_series(integer, integer, integer)
 RETURNS SETOF integer
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$generate_series_step_int4$function$
CREATE OR REPLACE FUNCTION pg_catalog.generate_series(integer, integer)
 RETURNS SETOF integer
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$generate_series_int4$function$
CREATE OR REPLACE FUNCTION pg_catalog.generate_series(bigint, bigint, bigint)
 RETURNS SETOF bigint
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$generate_series_step_int8$function$
CREATE OR REPLACE FUNCTION pg_catalog.generate_series(bigint, bigint)
 RETURNS SETOF bigint
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$generate_series_int8$function$
CREATE OR REPLACE FUNCTION pg_catalog.generate_series(numeric, numeric, numeric)
 RETURNS SETOF numeric
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$generate_series_step_numeric$function$
CREATE OR REPLACE FUNCTION pg_catalog.generate_series(numeric, numeric)
 RETURNS SETOF numeric
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$generate_series_numeric$function$
CREATE OR REPLACE FUNCTION pg_catalog.generate_series(timestamp without time zone, timestamp without time zone, interval)
 RETURNS SETOF timestamp without time zone
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$generate_series_timestamp$function$
CREATE OR REPLACE FUNCTION pg_catalog.generate_series(timestamp with time zone, timestamp with time zone, interval)
 RETURNS SETOF timestamp with time zone
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$generate_series_timestamptz$function$
]]></string>
			<comment><![CDATA[non-persistent series generator]]></comment>
		</function>
		<function name="generate_series_003" id="Function_1d943a24" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.generate_series(integer, integer, integer)
 RETURNS SETOF integer
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$generate_series_step_int4$function$
CREATE OR REPLACE FUNCTION pg_catalog.generate_series(integer, integer)
 RETURNS SETOF integer
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$generate_series_int4$function$
CREATE OR REPLACE FUNCTION pg_catalog.generate_series(bigint, bigint, bigint)
 RETURNS SETOF bigint
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$generate_series_step_int8$function$
CREATE OR REPLACE FUNCTION pg_catalog.generate_series(bigint, bigint)
 RETURNS SETOF bigint
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$generate_series_int8$function$
CREATE OR REPLACE FUNCTION pg_catalog.generate_series(numeric, numeric, numeric)
 RETURNS SETOF numeric
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$generate_series_step_numeric$function$
CREATE OR REPLACE FUNCTION pg_catalog.generate_series(numeric, numeric)
 RETURNS SETOF numeric
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$generate_series_numeric$function$
CREATE OR REPLACE FUNCTION pg_catalog.generate_series(timestamp without time zone, timestamp without time zone, interval)
 RETURNS SETOF timestamp without time zone
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$generate_series_timestamp$function$
CREATE OR REPLACE FUNCTION pg_catalog.generate_series(timestamp with time zone, timestamp with time zone, interval)
 RETURNS SETOF timestamp with time zone
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$generate_series_timestamptz$function$
]]></string>
			<comment><![CDATA[non-persistent series generator]]></comment>
		</function>
		<function name="generate_series_004" id="Function_360af083" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.generate_series(integer, integer, integer)
 RETURNS SETOF integer
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$generate_series_step_int4$function$
CREATE OR REPLACE FUNCTION pg_catalog.generate_series(integer, integer)
 RETURNS SETOF integer
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$generate_series_int4$function$
CREATE OR REPLACE FUNCTION pg_catalog.generate_series(bigint, bigint, bigint)
 RETURNS SETOF bigint
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$generate_series_step_int8$function$
CREATE OR REPLACE FUNCTION pg_catalog.generate_series(bigint, bigint)
 RETURNS SETOF bigint
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$generate_series_int8$function$
CREATE OR REPLACE FUNCTION pg_catalog.generate_series(numeric, numeric, numeric)
 RETURNS SETOF numeric
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$generate_series_step_numeric$function$
CREATE OR REPLACE FUNCTION pg_catalog.generate_series(numeric, numeric)
 RETURNS SETOF numeric
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$generate_series_numeric$function$
CREATE OR REPLACE FUNCTION pg_catalog.generate_series(timestamp without time zone, timestamp without time zone, interval)
 RETURNS SETOF timestamp without time zone
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$generate_series_timestamp$function$
CREATE OR REPLACE FUNCTION pg_catalog.generate_series(timestamp with time zone, timestamp with time zone, interval)
 RETURNS SETOF timestamp with time zone
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$generate_series_timestamptz$function$
]]></string>
			<comment><![CDATA[non-persistent series generator]]></comment>
		</function>
		<function name="generate_series_005" id="Function_fce18b7" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.generate_series(integer, integer, integer)
 RETURNS SETOF integer
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$generate_series_step_int4$function$
CREATE OR REPLACE FUNCTION pg_catalog.generate_series(integer, integer)
 RETURNS SETOF integer
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$generate_series_int4$function$
CREATE OR REPLACE FUNCTION pg_catalog.generate_series(bigint, bigint, bigint)
 RETURNS SETOF bigint
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$generate_series_step_int8$function$
CREATE OR REPLACE FUNCTION pg_catalog.generate_series(bigint, bigint)
 RETURNS SETOF bigint
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$generate_series_int8$function$
CREATE OR REPLACE FUNCTION pg_catalog.generate_series(numeric, numeric, numeric)
 RETURNS SETOF numeric
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$generate_series_step_numeric$function$
CREATE OR REPLACE FUNCTION pg_catalog.generate_series(numeric, numeric)
 RETURNS SETOF numeric
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$generate_series_numeric$function$
CREATE OR REPLACE FUNCTION pg_catalog.generate_series(timestamp without time zone, timestamp without time zone, interval)
 RETURNS SETOF timestamp without time zone
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$generate_series_timestamp$function$
CREATE OR REPLACE FUNCTION pg_catalog.generate_series(timestamp with time zone, timestamp with time zone, interval)
 RETURNS SETOF timestamp with time zone
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$generate_series_timestamptz$function$
]]></string>
			<comment><![CDATA[non-persistent series generator]]></comment>
		</function>
		<function name="generate_series_006" id="Function_1a8a8e39" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.generate_series(integer, integer, integer)
 RETURNS SETOF integer
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$generate_series_step_int4$function$
CREATE OR REPLACE FUNCTION pg_catalog.generate_series(integer, integer)
 RETURNS SETOF integer
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$generate_series_int4$function$
CREATE OR REPLACE FUNCTION pg_catalog.generate_series(bigint, bigint, bigint)
 RETURNS SETOF bigint
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$generate_series_step_int8$function$
CREATE OR REPLACE FUNCTION pg_catalog.generate_series(bigint, bigint)
 RETURNS SETOF bigint
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$generate_series_int8$function$
CREATE OR REPLACE FUNCTION pg_catalog.generate_series(numeric, numeric, numeric)
 RETURNS SETOF numeric
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$generate_series_step_numeric$function$
CREATE OR REPLACE FUNCTION pg_catalog.generate_series(numeric, numeric)
 RETURNS SETOF numeric
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$generate_series_numeric$function$
CREATE OR REPLACE FUNCTION pg_catalog.generate_series(timestamp without time zone, timestamp without time zone, interval)
 RETURNS SETOF timestamp without time zone
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$generate_series_timestamp$function$
CREATE OR REPLACE FUNCTION pg_catalog.generate_series(timestamp with time zone, timestamp with time zone, interval)
 RETURNS SETOF timestamp with time zone
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$generate_series_timestamptz$function$
]]></string>
			<comment><![CDATA[non-persistent series generator]]></comment>
		</function>
		<function name="generate_series_007" id="Function_1e4c14ba" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.generate_series(integer, integer, integer)
 RETURNS SETOF integer
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$generate_series_step_int4$function$
CREATE OR REPLACE FUNCTION pg_catalog.generate_series(integer, integer)
 RETURNS SETOF integer
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$generate_series_int4$function$
CREATE OR REPLACE FUNCTION pg_catalog.generate_series(bigint, bigint, bigint)
 RETURNS SETOF bigint
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$generate_series_step_int8$function$
CREATE OR REPLACE FUNCTION pg_catalog.generate_series(bigint, bigint)
 RETURNS SETOF bigint
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$generate_series_int8$function$
CREATE OR REPLACE FUNCTION pg_catalog.generate_series(numeric, numeric, numeric)
 RETURNS SETOF numeric
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$generate_series_step_numeric$function$
CREATE OR REPLACE FUNCTION pg_catalog.generate_series(numeric, numeric)
 RETURNS SETOF numeric
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$generate_series_numeric$function$
CREATE OR REPLACE FUNCTION pg_catalog.generate_series(timestamp without time zone, timestamp without time zone, interval)
 RETURNS SETOF timestamp without time zone
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$generate_series_timestamp$function$
CREATE OR REPLACE FUNCTION pg_catalog.generate_series(timestamp with time zone, timestamp with time zone, interval)
 RETURNS SETOF timestamp with time zone
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$generate_series_timestamptz$function$
]]></string>
			<comment><![CDATA[non-persistent series generator]]></comment>
		</function>
		<function name="generate_subscripts" id="Function_96ed061" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.generate_subscripts(anyarray, integer)
 RETURNS SETOF integer
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$generate_subscripts_nodir$function$
CREATE OR REPLACE FUNCTION pg_catalog.generate_subscripts(anyarray, integer, boolean)
 RETURNS SETOF integer
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$generate_subscripts$function$
]]></string>
			<comment><![CDATA[array subscripts generator]]></comment>
		</function>
		<function name="generate_subscripts_001" id="Function_2673169d" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.generate_subscripts(anyarray, integer)
 RETURNS SETOF integer
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$generate_subscripts_nodir$function$
CREATE OR REPLACE FUNCTION pg_catalog.generate_subscripts(anyarray, integer, boolean)
 RETURNS SETOF integer
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$generate_subscripts$function$
]]></string>
			<comment><![CDATA[array subscripts generator]]></comment>
		</function>
		<function name="get_bit" id="Function_385b1557" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.get_bit(bytea, integer)
 RETURNS integer
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$byteaGetBit$function$
CREATE OR REPLACE FUNCTION pg_catalog.get_bit(bit, integer)
 RETURNS integer
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$bitgetbit$function$
]]></string>
			<comment><![CDATA[get bit]]></comment>
		</function>
		<function name="get_bit_001" id="Function_11961103" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.get_bit(bytea, integer)
 RETURNS integer
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$byteaGetBit$function$
CREATE OR REPLACE FUNCTION pg_catalog.get_bit(bit, integer)
 RETURNS integer
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$bitgetbit$function$
]]></string>
			<comment><![CDATA[get bit]]></comment>
		</function>
		<function name="get_byte" id="Function_20f4913f" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.get_byte(bytea, integer)
 RETURNS integer
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$byteaGetByte$function$
]]></string>
			<comment><![CDATA[get byte]]></comment>
		</function>
		<function name="get_current_ts_config" id="Function_1be5440e" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.get_current_ts_config()
 RETURNS regconfig
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$get_current_ts_config$function$
]]></string>
			<comment><![CDATA[get current tsearch configuration]]></comment>
		</function>
		<function name="getdatabaseencoding" id="Function_12530395" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.getdatabaseencoding()
 RETURNS name
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$getdatabaseencoding$function$
]]></string>
			<comment><![CDATA[encoding name of current database]]></comment>
		</function>
		<function name="getpgusername" id="Function_31d7fc34" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.getpgusername()
 RETURNS name
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$current_user$function$
]]></string>
			<comment><![CDATA[deprecated, use current_user instead]]></comment>
		</function>
		<function name="gin_clean_pending_list" id="Function_225d5ba6" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.gin_clean_pending_list(regclass)
 RETURNS bigint
 LANGUAGE internal
 PARALLEL SAFE STRICT
AS $function$gin_clean_pending_list$function$
]]></string>
			<comment><![CDATA[clean up GIN pending list]]></comment>
		</function>
		<function name="gin_cmp_prefix" id="Function_1d853c0c" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.gin_cmp_prefix(text, text, smallint, internal)
 RETURNS integer
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$gin_cmp_prefix$function$
]]></string>
			<comment><![CDATA[GIN tsvector support]]></comment>
		</function>
		<function name="gin_cmp_tslexeme" id="Function_1d9c50d1" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.gin_cmp_tslexeme(text, text)
 RETURNS integer
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$gin_cmp_tslexeme$function$
]]></string>
			<comment><![CDATA[GIN tsvector support]]></comment>
		</function>
		<function name="gin_compare_jsonb" id="Function_211e5be4" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.gin_compare_jsonb(text, text)
 RETURNS integer
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$gin_compare_jsonb$function$
]]></string>
			<comment><![CDATA[GIN support]]></comment>
		</function>
		<function name="gin_consistent_jsonb" id="Function_29f6c125" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.gin_consistent_jsonb(internal, smallint, jsonb, integer, internal, internal, internal, internal)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$gin_consistent_jsonb$function$
]]></string>
			<comment><![CDATA[GIN support]]></comment>
		</function>
		<function name="gin_consistent_jsonb_path" id="Function_1fe7b1b5" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.gin_consistent_jsonb_path(internal, smallint, jsonb, integer, internal, internal, internal, internal)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$gin_consistent_jsonb_path$function$
]]></string>
			<comment><![CDATA[GIN support]]></comment>
		</function>
		<function name="gin_extract_jsonb" id="Function_2a71febf" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.gin_extract_jsonb(jsonb, internal, internal)
 RETURNS internal
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$gin_extract_jsonb$function$
]]></string>
			<comment><![CDATA[GIN support]]></comment>
		</function>
		<function name="gin_extract_jsonb_path" id="Function_f4be8b0" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.gin_extract_jsonb_path(jsonb, internal, internal)
 RETURNS internal
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$gin_extract_jsonb_path$function$
]]></string>
			<comment><![CDATA[GIN support]]></comment>
		</function>
		<function name="gin_extract_jsonb_query" id="Function_e580ebd" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.gin_extract_jsonb_query(jsonb, internal, smallint, internal, internal, internal, internal)
 RETURNS internal
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$gin_extract_jsonb_query$function$
]]></string>
			<comment><![CDATA[GIN support]]></comment>
		</function>
		<function name="gin_extract_jsonb_query_path" id="Function_f169a95" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.gin_extract_jsonb_query_path(jsonb, internal, smallint, internal, internal, internal, internal)
 RETURNS internal
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$gin_extract_jsonb_query_path$function$
]]></string>
			<comment><![CDATA[GIN support]]></comment>
		</function>
		<function name="gin_extract_tsquery" id="Function_3602ac06" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.gin_extract_tsquery(tsquery, internal, smallint, internal, internal)
 RETURNS internal
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$gin_extract_tsquery_5args$function$
CREATE OR REPLACE FUNCTION pg_catalog.gin_extract_tsquery(tsvector, internal, smallint, internal, internal, internal, internal)
 RETURNS internal
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$gin_extract_tsquery$function$
CREATE OR REPLACE FUNCTION pg_catalog.gin_extract_tsquery(tsquery, internal, smallint, internal, internal, internal, internal)
 RETURNS internal
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$gin_extract_tsquery_oldsig$function$
]]></string>
			<comment><![CDATA[GIN tsvector support (obsolete)]]></comment>
		</function>
		<function name="gin_extract_tsquery_001" id="Function_377dff32" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.gin_extract_tsquery(tsquery, internal, smallint, internal, internal)
 RETURNS internal
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$gin_extract_tsquery_5args$function$
CREATE OR REPLACE FUNCTION pg_catalog.gin_extract_tsquery(tsvector, internal, smallint, internal, internal, internal, internal)
 RETURNS internal
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$gin_extract_tsquery$function$
CREATE OR REPLACE FUNCTION pg_catalog.gin_extract_tsquery(tsquery, internal, smallint, internal, internal, internal, internal)
 RETURNS internal
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$gin_extract_tsquery_oldsig$function$
]]></string>
			<comment><![CDATA[GIN tsvector support (obsolete)]]></comment>
		</function>
		<function name="gin_extract_tsquery_002" id="Function_21f611e5" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.gin_extract_tsquery(tsquery, internal, smallint, internal, internal)
 RETURNS internal
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$gin_extract_tsquery_5args$function$
CREATE OR REPLACE FUNCTION pg_catalog.gin_extract_tsquery(tsvector, internal, smallint, internal, internal, internal, internal)
 RETURNS internal
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$gin_extract_tsquery$function$
CREATE OR REPLACE FUNCTION pg_catalog.gin_extract_tsquery(tsquery, internal, smallint, internal, internal, internal, internal)
 RETURNS internal
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$gin_extract_tsquery_oldsig$function$
]]></string>
			<comment><![CDATA[GIN tsvector support (obsolete)]]></comment>
		</function>
		<function name="gin_extract_tsvector" id="Function_19d76583" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.gin_extract_tsvector(tsvector, internal)
 RETURNS internal
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$gin_extract_tsvector_2args$function$
CREATE OR REPLACE FUNCTION pg_catalog.gin_extract_tsvector(tsvector, internal, internal)
 RETURNS internal
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$gin_extract_tsvector$function$
]]></string>
			<comment><![CDATA[GIN tsvector support (obsolete)]]></comment>
		</function>
		<function name="gin_extract_tsvector_001" id="Function_35f1088d" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.gin_extract_tsvector(tsvector, internal)
 RETURNS internal
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$gin_extract_tsvector_2args$function$
CREATE OR REPLACE FUNCTION pg_catalog.gin_extract_tsvector(tsvector, internal, internal)
 RETURNS internal
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$gin_extract_tsvector$function$
]]></string>
			<comment><![CDATA[GIN tsvector support (obsolete)]]></comment>
		</function>
		<function name="gin_triconsistent_jsonb" id="Function_16b64012" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.gin_triconsistent_jsonb(internal, smallint, jsonb, integer, internal, internal, internal)
 RETURNS "char"
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$gin_triconsistent_jsonb$function$
]]></string>
			<comment><![CDATA[GIN support]]></comment>
		</function>
		<function name="gin_triconsistent_jsonb_path" id="Function_b600c49" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.gin_triconsistent_jsonb_path(internal, smallint, jsonb, integer, internal, internal, internal)
 RETURNS "char"
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$gin_triconsistent_jsonb_path$function$
]]></string>
			<comment><![CDATA[GIN support]]></comment>
		</function>
		<function name="gin_tsquery_consistent" id="Function_77180d8" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.gin_tsquery_consistent(internal, smallint, tsquery, integer, internal, internal)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$gin_tsquery_consistent_6args$function$
CREATE OR REPLACE FUNCTION pg_catalog.gin_tsquery_consistent(internal, smallint, tsvector, integer, internal, internal, internal, internal)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$gin_tsquery_consistent$function$
CREATE OR REPLACE FUNCTION pg_catalog.gin_tsquery_consistent(internal, smallint, tsquery, integer, internal, internal, internal, internal)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$gin_tsquery_consistent_oldsig$function$
]]></string>
			<comment><![CDATA[GIN tsvector support (obsolete)]]></comment>
		</function>
		<function name="gin_tsquery_consistent_001" id="Function_a337ffe" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.gin_tsquery_consistent(internal, smallint, tsquery, integer, internal, internal)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$gin_tsquery_consistent_6args$function$
CREATE OR REPLACE FUNCTION pg_catalog.gin_tsquery_consistent(internal, smallint, tsvector, integer, internal, internal, internal, internal)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$gin_tsquery_consistent$function$
CREATE OR REPLACE FUNCTION pg_catalog.gin_tsquery_consistent(internal, smallint, tsquery, integer, internal, internal, internal, internal)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$gin_tsquery_consistent_oldsig$function$
]]></string>
			<comment><![CDATA[GIN tsvector support (obsolete)]]></comment>
		</function>
		<function name="gin_tsquery_consistent_002" id="Function_b8fa89a" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.gin_tsquery_consistent(internal, smallint, tsquery, integer, internal, internal)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$gin_tsquery_consistent_6args$function$
CREATE OR REPLACE FUNCTION pg_catalog.gin_tsquery_consistent(internal, smallint, tsvector, integer, internal, internal, internal, internal)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$gin_tsquery_consistent$function$
CREATE OR REPLACE FUNCTION pg_catalog.gin_tsquery_consistent(internal, smallint, tsquery, integer, internal, internal, internal, internal)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$gin_tsquery_consistent_oldsig$function$
]]></string>
			<comment><![CDATA[GIN tsvector support (obsolete)]]></comment>
		</function>
		<function name="gin_tsquery_triconsistent" id="Function_41150e0" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.gin_tsquery_triconsistent(internal, smallint, tsvector, integer, internal, internal, internal)
 RETURNS "char"
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$gin_tsquery_triconsistent$function$
]]></string>
			<comment><![CDATA[GIN tsvector support]]></comment>
		</function>
		<function name="ginarrayconsistent" id="Function_191a9973" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.ginarrayconsistent(internal, smallint, anyarray, integer, internal, internal, internal, internal)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$ginarrayconsistent$function$
]]></string>
			<comment><![CDATA[GIN array support]]></comment>
		</function>
		<function name="ginarrayextract" id="Function_13aa9d9" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.ginarrayextract(anyarray, internal)
 RETURNS internal
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$ginarrayextract_2args$function$
CREATE OR REPLACE FUNCTION pg_catalog.ginarrayextract(anyarray, internal, internal)
 RETURNS internal
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$ginarrayextract$function$
]]></string>
			<comment><![CDATA[GIN array support]]></comment>
		</function>
		<function name="ginarrayextract_001" id="Function_363acd56" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.ginarrayextract(anyarray, internal)
 RETURNS internal
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$ginarrayextract_2args$function$
CREATE OR REPLACE FUNCTION pg_catalog.ginarrayextract(anyarray, internal, internal)
 RETURNS internal
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$ginarrayextract$function$
]]></string>
			<comment><![CDATA[GIN array support]]></comment>
		</function>
		<function name="ginarraytriconsistent" id="Function_188af733" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.ginarraytriconsistent(internal, smallint, anyarray, integer, internal, internal, internal)
 RETURNS "char"
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$ginarraytriconsistent$function$
]]></string>
			<comment><![CDATA[GIN array support]]></comment>
		</function>
		<function name="ginhandler" id="Function_322cce88" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.ginhandler(internal)
 RETURNS index_am_handler
 LANGUAGE internal
 PARALLEL SAFE STRICT
AS $function$ginhandler$function$
]]></string>
			<comment><![CDATA[gin index access method handler]]></comment>
		</function>
		<function name="ginqueryarrayextract" id="Function_fb78483" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.ginqueryarrayextract(anyarray, internal, smallint, internal, internal, internal, internal)
 RETURNS internal
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$ginqueryarrayextract$function$
]]></string>
			<comment><![CDATA[GIN array support]]></comment>
		</function>
		<function name="gist_box_compress" id="Function_2669bba1" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.gist_box_compress(internal)
 RETURNS internal
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$gist_box_compress$function$
]]></string>
			<comment><![CDATA[GiST support]]></comment>
		</function>
		<function name="gist_box_consistent" id="Function_2a8439d1" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.gist_box_consistent(internal, box, smallint, oid, internal)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$gist_box_consistent$function$
]]></string>
			<comment><![CDATA[GiST support]]></comment>
		</function>
		<function name="gist_box_decompress" id="Function_17094e33" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.gist_box_decompress(internal)
 RETURNS internal
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$gist_box_decompress$function$
]]></string>
			<comment><![CDATA[GiST support]]></comment>
		</function>
		<function name="gist_box_fetch" id="Function_2d071242" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.gist_box_fetch(internal)
 RETURNS internal
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$gist_box_fetch$function$
]]></string>
			<comment><![CDATA[GiST support]]></comment>
		</function>
		<function name="gist_box_penalty" id="Function_2a31dc14" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.gist_box_penalty(internal, internal, internal)
 RETURNS internal
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$gist_box_penalty$function$
]]></string>
			<comment><![CDATA[GiST support]]></comment>
		</function>
		<function name="gist_box_picksplit" id="Function_38b4772e" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.gist_box_picksplit(internal, internal)
 RETURNS internal
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$gist_box_picksplit$function$
]]></string>
			<comment><![CDATA[GiST support]]></comment>
		</function>
		<function name="gist_box_same" id="Function_96e1a69" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.gist_box_same(box, box, internal)
 RETURNS internal
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$gist_box_same$function$
]]></string>
			<comment><![CDATA[GiST support]]></comment>
		</function>
		<function name="gist_box_union" id="Function_18265762" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.gist_box_union(internal, internal)
 RETURNS box
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$gist_box_union$function$
]]></string>
			<comment><![CDATA[GiST support]]></comment>
		</function>
		<function name="gist_circle_compress" id="Function_2f0263e" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.gist_circle_compress(internal)
 RETURNS internal
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$gist_circle_compress$function$
]]></string>
			<comment><![CDATA[GiST support]]></comment>
		</function>
		<function name="gist_circle_consistent" id="Function_2a15f0dd" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.gist_circle_consistent(internal, circle, smallint, oid, internal)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$gist_circle_consistent$function$
]]></string>
			<comment><![CDATA[GiST support]]></comment>
		</function>
		<function name="gist_circle_distance" id="Function_15bd3647" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.gist_circle_distance(internal, circle, smallint, oid, internal)
 RETURNS double precision
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$gist_circle_distance$function$
]]></string>
			<comment><![CDATA[GiST support]]></comment>
		</function>
		<function name="gist_point_compress" id="Function_2a3fcfd7" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.gist_point_compress(internal)
 RETURNS internal
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$gist_point_compress$function$
]]></string>
			<comment><![CDATA[GiST support]]></comment>
		</function>
		<function name="gist_point_consistent" id="Function_3ab17508" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.gist_point_consistent(internal, point, smallint, oid, internal)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$gist_point_consistent$function$
]]></string>
			<comment><![CDATA[GiST support]]></comment>
		</function>
		<function name="gist_point_distance" id="Function_33d1dc3e" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.gist_point_distance(internal, point, smallint, oid, internal)
 RETURNS double precision
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$gist_point_distance$function$
]]></string>
			<comment><![CDATA[GiST support]]></comment>
		</function>
		<function name="gist_point_fetch" id="Function_2391fafe" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.gist_point_fetch(internal)
 RETURNS internal
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$gist_point_fetch$function$
]]></string>
			<comment><![CDATA[GiST support]]></comment>
		</function>
		<function name="gist_poly_compress" id="Function_1c8e8b9a" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.gist_poly_compress(internal)
 RETURNS internal
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$gist_poly_compress$function$
]]></string>
			<comment><![CDATA[GiST support]]></comment>
		</function>
		<function name="gist_poly_consistent" id="Function_3314a15" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.gist_poly_consistent(internal, polygon, smallint, oid, internal)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$gist_poly_consistent$function$
]]></string>
			<comment><![CDATA[GiST support]]></comment>
		</function>
		<function name="gist_poly_distance" id="Function_209ef67e" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.gist_poly_distance(internal, polygon, smallint, oid, internal)
 RETURNS double precision
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$gist_poly_distance$function$
]]></string>
			<comment><![CDATA[GiST support]]></comment>
		</function>
		<function name="gisthandler" id="Function_247e28a8" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.gisthandler(internal)
 RETURNS index_am_handler
 LANGUAGE internal
 PARALLEL SAFE STRICT
AS $function$gisthandler$function$
]]></string>
			<comment><![CDATA[gist index access method handler]]></comment>
		</function>
		<function name="gtsquery_compress" id="Function_102bc61d" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.gtsquery_compress(internal)
 RETURNS internal
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$gtsquery_compress$function$
]]></string>
			<comment><![CDATA[GiST tsquery support]]></comment>
		</function>
		<function name="gtsquery_consistent" id="Function_24b5f9" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.gtsquery_consistent(internal, internal, integer, oid, internal)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$gtsquery_consistent_oldsig$function$
CREATE OR REPLACE FUNCTION pg_catalog.gtsquery_consistent(internal, tsquery, smallint, oid, internal)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$gtsquery_consistent$function$
]]></string>
			<comment><![CDATA[GiST tsquery support]]></comment>
		</function>
		<function name="gtsquery_consistent_001" id="Function_1a74a074" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.gtsquery_consistent(internal, internal, integer, oid, internal)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$gtsquery_consistent_oldsig$function$
CREATE OR REPLACE FUNCTION pg_catalog.gtsquery_consistent(internal, tsquery, smallint, oid, internal)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$gtsquery_consistent$function$
]]></string>
			<comment><![CDATA[GiST tsquery support]]></comment>
		</function>
		<function name="gtsquery_decompress" id="Function_22b9b49" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.gtsquery_decompress(internal)
 RETURNS internal
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$gtsquery_decompress$function$
]]></string>
			<comment><![CDATA[GiST tsquery support]]></comment>
		</function>
		<function name="gtsquery_penalty" id="Function_15de75e6" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.gtsquery_penalty(internal, internal, internal)
 RETURNS internal
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$gtsquery_penalty$function$
]]></string>
			<comment><![CDATA[GiST tsquery support]]></comment>
		</function>
		<function name="gtsquery_picksplit" id="Function_25b0fecd" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.gtsquery_picksplit(internal, internal)
 RETURNS internal
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$gtsquery_picksplit$function$
]]></string>
			<comment><![CDATA[GiST tsquery support]]></comment>
		</function>
		<function name="gtsquery_same" id="Function_2bc41bee" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.gtsquery_same(bigint, bigint, internal)
 RETURNS internal
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$gtsquery_same$function$
]]></string>
			<comment><![CDATA[GiST tsquery support]]></comment>
		</function>
		<function name="gtsquery_union" id="Function_260c3188" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.gtsquery_union(internal, internal)
 RETURNS bigint
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$gtsquery_union$function$
]]></string>
			<comment><![CDATA[GiST tsquery support]]></comment>
		</function>
		<function name="gtsvector_compress" id="Function_20089b87" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.gtsvector_compress(internal)
 RETURNS internal
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$gtsvector_compress$function$
]]></string>
			<comment><![CDATA[GiST tsvector support]]></comment>
		</function>
		<function name="gtsvector_consistent" id="Function_2ae99f4" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.gtsvector_consistent(internal, tsvector, smallint, oid, internal)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$gtsvector_consistent$function$
CREATE OR REPLACE FUNCTION pg_catalog.gtsvector_consistent(internal, gtsvector, integer, oid, internal)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$gtsvector_consistent_oldsig$function$
]]></string>
			<comment><![CDATA[GiST tsvector support]]></comment>
		</function>
		<function name="gtsvector_consistent_001" id="Function_17be27b" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.gtsvector_consistent(internal, tsvector, smallint, oid, internal)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$gtsvector_consistent$function$
CREATE OR REPLACE FUNCTION pg_catalog.gtsvector_consistent(internal, gtsvector, integer, oid, internal)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$gtsvector_consistent_oldsig$function$
]]></string>
			<comment><![CDATA[GiST tsvector support]]></comment>
		</function>
		<function name="gtsvector_decompress" id="Function_5964f96" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.gtsvector_decompress(internal)
 RETURNS internal
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$gtsvector_decompress$function$
]]></string>
			<comment><![CDATA[GiST tsvector support]]></comment>
		</function>
		<function name="gtsvector_penalty" id="Function_3a8e663" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.gtsvector_penalty(internal, internal, internal)
 RETURNS internal
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$gtsvector_penalty$function$
]]></string>
			<comment><![CDATA[GiST tsvector support]]></comment>
		</function>
		<function name="gtsvector_picksplit" id="Function_25a861a4" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.gtsvector_picksplit(internal, internal)
 RETURNS internal
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$gtsvector_picksplit$function$
]]></string>
			<comment><![CDATA[GiST tsvector support]]></comment>
		</function>
		<function name="gtsvector_same" id="Function_290253c9" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.gtsvector_same(gtsvector, gtsvector, internal)
 RETURNS internal
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$gtsvector_same$function$
]]></string>
			<comment><![CDATA[GiST tsvector support]]></comment>
		</function>
		<function name="gtsvector_union" id="Function_1781ed2f" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.gtsvector_union(internal, internal)
 RETURNS gtsvector
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$gtsvector_union$function$
]]></string>
			<comment><![CDATA[GiST tsvector support]]></comment>
		</function>
		<function name="gtsvectorin" id="Function_2ab91d8a" isSystem="false" >
			<comment><![CDATA[I/O]]></comment>
		</function>
		<function name="gtsvectorout" id="Function_3cc36c3" isSystem="false" >
			<comment><![CDATA[I/O]]></comment>
		</function>
		<function name="has_any_column_privilege" id="Function_234b0c7f" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.has_any_column_privilege(name, text, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT COST 10
AS $function$has_any_column_privilege_name_name$function$
CREATE OR REPLACE FUNCTION pg_catalog.has_any_column_privilege(name, oid, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT COST 10
AS $function$has_any_column_privilege_name_id$function$
CREATE OR REPLACE FUNCTION pg_catalog.has_any_column_privilege(oid, text, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT COST 10
AS $function$has_any_column_privilege_id_name$function$
CREATE OR REPLACE FUNCTION pg_catalog.has_any_column_privilege(oid, oid, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT COST 10
AS $function$has_any_column_privilege_id_id$function$
CREATE OR REPLACE FUNCTION pg_catalog.has_any_column_privilege(text, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT COST 10
AS $function$has_any_column_privilege_name$function$
CREATE OR REPLACE FUNCTION pg_catalog.has_any_column_privilege(oid, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT COST 10
AS $function$has_any_column_privilege_id$function$
]]></string>
			<comment><![CDATA[user privilege on any column by username, rel name]]></comment>
		</function>
		<function name="has_any_column_privilege_001" id="Function_2c8027b3" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.has_any_column_privilege(name, text, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT COST 10
AS $function$has_any_column_privilege_name_name$function$
CREATE OR REPLACE FUNCTION pg_catalog.has_any_column_privilege(name, oid, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT COST 10
AS $function$has_any_column_privilege_name_id$function$
CREATE OR REPLACE FUNCTION pg_catalog.has_any_column_privilege(oid, text, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT COST 10
AS $function$has_any_column_privilege_id_name$function$
CREATE OR REPLACE FUNCTION pg_catalog.has_any_column_privilege(oid, oid, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT COST 10
AS $function$has_any_column_privilege_id_id$function$
CREATE OR REPLACE FUNCTION pg_catalog.has_any_column_privilege(text, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT COST 10
AS $function$has_any_column_privilege_name$function$
CREATE OR REPLACE FUNCTION pg_catalog.has_any_column_privilege(oid, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT COST 10
AS $function$has_any_column_privilege_id$function$
]]></string>
			<comment><![CDATA[user privilege on any column by username, rel name]]></comment>
		</function>
		<function name="has_any_column_privilege_002" id="Function_16d4fb7c" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.has_any_column_privilege(name, text, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT COST 10
AS $function$has_any_column_privilege_name_name$function$
CREATE OR REPLACE FUNCTION pg_catalog.has_any_column_privilege(name, oid, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT COST 10
AS $function$has_any_column_privilege_name_id$function$
CREATE OR REPLACE FUNCTION pg_catalog.has_any_column_privilege(oid, text, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT COST 10
AS $function$has_any_column_privilege_id_name$function$
CREATE OR REPLACE FUNCTION pg_catalog.has_any_column_privilege(oid, oid, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT COST 10
AS $function$has_any_column_privilege_id_id$function$
CREATE OR REPLACE FUNCTION pg_catalog.has_any_column_privilege(text, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT COST 10
AS $function$has_any_column_privilege_name$function$
CREATE OR REPLACE FUNCTION pg_catalog.has_any_column_privilege(oid, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT COST 10
AS $function$has_any_column_privilege_id$function$
]]></string>
			<comment><![CDATA[user privilege on any column by username, rel name]]></comment>
		</function>
		<function name="has_any_column_privilege_003" id="Function_2b069aa9" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.has_any_column_privilege(name, text, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT COST 10
AS $function$has_any_column_privilege_name_name$function$
CREATE OR REPLACE FUNCTION pg_catalog.has_any_column_privilege(name, oid, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT COST 10
AS $function$has_any_column_privilege_name_id$function$
CREATE OR REPLACE FUNCTION pg_catalog.has_any_column_privilege(oid, text, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT COST 10
AS $function$has_any_column_privilege_id_name$function$
CREATE OR REPLACE FUNCTION pg_catalog.has_any_column_privilege(oid, oid, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT COST 10
AS $function$has_any_column_privilege_id_id$function$
CREATE OR REPLACE FUNCTION pg_catalog.has_any_column_privilege(text, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT COST 10
AS $function$has_any_column_privilege_name$function$
CREATE OR REPLACE FUNCTION pg_catalog.has_any_column_privilege(oid, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT COST 10
AS $function$has_any_column_privilege_id$function$
]]></string>
			<comment><![CDATA[user privilege on any column by username, rel name]]></comment>
		</function>
		<function name="has_any_column_privilege_004" id="Function_12ba3786" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.has_any_column_privilege(name, text, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT COST 10
AS $function$has_any_column_privilege_name_name$function$
CREATE OR REPLACE FUNCTION pg_catalog.has_any_column_privilege(name, oid, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT COST 10
AS $function$has_any_column_privilege_name_id$function$
CREATE OR REPLACE FUNCTION pg_catalog.has_any_column_privilege(oid, text, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT COST 10
AS $function$has_any_column_privilege_id_name$function$
CREATE OR REPLACE FUNCTION pg_catalog.has_any_column_privilege(oid, oid, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT COST 10
AS $function$has_any_column_privilege_id_id$function$
CREATE OR REPLACE FUNCTION pg_catalog.has_any_column_privilege(text, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT COST 10
AS $function$has_any_column_privilege_name$function$
CREATE OR REPLACE FUNCTION pg_catalog.has_any_column_privilege(oid, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT COST 10
AS $function$has_any_column_privilege_id$function$
]]></string>
			<comment><![CDATA[user privilege on any column by username, rel name]]></comment>
		</function>
		<function name="has_any_column_privilege_005" id="Function_1aad8d8a" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.has_any_column_privilege(name, text, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT COST 10
AS $function$has_any_column_privilege_name_name$function$
CREATE OR REPLACE FUNCTION pg_catalog.has_any_column_privilege(name, oid, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT COST 10
AS $function$has_any_column_privilege_name_id$function$
CREATE OR REPLACE FUNCTION pg_catalog.has_any_column_privilege(oid, text, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT COST 10
AS $function$has_any_column_privilege_id_name$function$
CREATE OR REPLACE FUNCTION pg_catalog.has_any_column_privilege(oid, oid, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT COST 10
AS $function$has_any_column_privilege_id_id$function$
CREATE OR REPLACE FUNCTION pg_catalog.has_any_column_privilege(text, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT COST 10
AS $function$has_any_column_privilege_name$function$
CREATE OR REPLACE FUNCTION pg_catalog.has_any_column_privilege(oid, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT COST 10
AS $function$has_any_column_privilege_id$function$
]]></string>
			<comment><![CDATA[user privilege on any column by username, rel name]]></comment>
		</function>
		<function name="has_column_privilege" id="Function_160ec7c1" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.has_column_privilege(name, text, text, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$has_column_privilege_name_name_name$function$
CREATE OR REPLACE FUNCTION pg_catalog.has_column_privilege(name, text, smallint, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$has_column_privilege_name_name_attnum$function$
CREATE OR REPLACE FUNCTION pg_catalog.has_column_privilege(name, oid, text, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$has_column_privilege_name_id_name$function$
CREATE OR REPLACE FUNCTION pg_catalog.has_column_privilege(name, oid, smallint, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$has_column_privilege_name_id_attnum$function$
CREATE OR REPLACE FUNCTION pg_catalog.has_column_privilege(oid, text, text, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$has_column_privilege_id_name_name$function$
CREATE OR REPLACE FUNCTION pg_catalog.has_column_privilege(oid, text, smallint, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$has_column_privilege_id_name_attnum$function$
CREATE OR REPLACE FUNCTION pg_catalog.has_column_privilege(oid, oid, text, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$has_column_privilege_id_id_name$function$
CREATE OR REPLACE FUNCTION pg_catalog.has_column_privilege(oid, oid, smallint, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$has_column_privilege_id_id_attnum$function$
CREATE OR REPLACE FUNCTION pg_catalog.has_column_privilege(text, text, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$has_column_privilege_name_name$function$
CREATE OR REPLACE FUNCTION pg_catalog.has_column_privilege(text, smallint, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$has_column_privilege_name_attnum$function$
CREATE OR REPLACE FUNCTION pg_catalog.has_column_privilege(oid, text, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$has_column_privilege_id_name$function$
CREATE OR REPLACE FUNCTION pg_catalog.has_column_privilege(oid, smallint, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$has_column_privilege_id_attnum$function$
]]></string>
			<comment><![CDATA[user privilege on column by username, rel name, col name]]></comment>
		</function>
		<function name="has_column_privilege_001" id="Function_e0a6f6" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.has_column_privilege(name, text, text, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$has_column_privilege_name_name_name$function$
CREATE OR REPLACE FUNCTION pg_catalog.has_column_privilege(name, text, smallint, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$has_column_privilege_name_name_attnum$function$
CREATE OR REPLACE FUNCTION pg_catalog.has_column_privilege(name, oid, text, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$has_column_privilege_name_id_name$function$
CREATE OR REPLACE FUNCTION pg_catalog.has_column_privilege(name, oid, smallint, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$has_column_privilege_name_id_attnum$function$
CREATE OR REPLACE FUNCTION pg_catalog.has_column_privilege(oid, text, text, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$has_column_privilege_id_name_name$function$
CREATE OR REPLACE FUNCTION pg_catalog.has_column_privilege(oid, text, smallint, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$has_column_privilege_id_name_attnum$function$
CREATE OR REPLACE FUNCTION pg_catalog.has_column_privilege(oid, oid, text, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$has_column_privilege_id_id_name$function$
CREATE OR REPLACE FUNCTION pg_catalog.has_column_privilege(oid, oid, smallint, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$has_column_privilege_id_id_attnum$function$
CREATE OR REPLACE FUNCTION pg_catalog.has_column_privilege(text, text, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$has_column_privilege_name_name$function$
CREATE OR REPLACE FUNCTION pg_catalog.has_column_privilege(text, smallint, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$has_column_privilege_name_attnum$function$
CREATE OR REPLACE FUNCTION pg_catalog.has_column_privilege(oid, text, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$has_column_privilege_id_name$function$
CREATE OR REPLACE FUNCTION pg_catalog.has_column_privilege(oid, smallint, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$has_column_privilege_id_attnum$function$
]]></string>
			<comment><![CDATA[user privilege on column by username, rel name, col name]]></comment>
		</function>
		<function name="has_column_privilege_002" id="Function_18b67a8e" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.has_column_privilege(name, text, text, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$has_column_privilege_name_name_name$function$
CREATE OR REPLACE FUNCTION pg_catalog.has_column_privilege(name, text, smallint, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$has_column_privilege_name_name_attnum$function$
CREATE OR REPLACE FUNCTION pg_catalog.has_column_privilege(name, oid, text, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$has_column_privilege_name_id_name$function$
CREATE OR REPLACE FUNCTION pg_catalog.has_column_privilege(name, oid, smallint, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$has_column_privilege_name_id_attnum$function$
CREATE OR REPLACE FUNCTION pg_catalog.has_column_privilege(oid, text, text, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$has_column_privilege_id_name_name$function$
CREATE OR REPLACE FUNCTION pg_catalog.has_column_privilege(oid, text, smallint, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$has_column_privilege_id_name_attnum$function$
CREATE OR REPLACE FUNCTION pg_catalog.has_column_privilege(oid, oid, text, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$has_column_privilege_id_id_name$function$
CREATE OR REPLACE FUNCTION pg_catalog.has_column_privilege(oid, oid, smallint, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$has_column_privilege_id_id_attnum$function$
CREATE OR REPLACE FUNCTION pg_catalog.has_column_privilege(text, text, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$has_column_privilege_name_name$function$
CREATE OR REPLACE FUNCTION pg_catalog.has_column_privilege(text, smallint, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$has_column_privilege_name_attnum$function$
CREATE OR REPLACE FUNCTION pg_catalog.has_column_privilege(oid, text, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$has_column_privilege_id_name$function$
CREATE OR REPLACE FUNCTION pg_catalog.has_column_privilege(oid, smallint, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$has_column_privilege_id_attnum$function$
]]></string>
			<comment><![CDATA[user privilege on column by username, rel name, col name]]></comment>
		</function>
		<function name="has_column_privilege_003" id="Function_bd7e999" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.has_column_privilege(name, text, text, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$has_column_privilege_name_name_name$function$
CREATE OR REPLACE FUNCTION pg_catalog.has_column_privilege(name, text, smallint, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$has_column_privilege_name_name_attnum$function$
CREATE OR REPLACE FUNCTION pg_catalog.has_column_privilege(name, oid, text, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$has_column_privilege_name_id_name$function$
CREATE OR REPLACE FUNCTION pg_catalog.has_column_privilege(name, oid, smallint, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$has_column_privilege_name_id_attnum$function$
CREATE OR REPLACE FUNCTION pg_catalog.has_column_privilege(oid, text, text, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$has_column_privilege_id_name_name$function$
CREATE OR REPLACE FUNCTION pg_catalog.has_column_privilege(oid, text, smallint, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$has_column_privilege_id_name_attnum$function$
CREATE OR REPLACE FUNCTION pg_catalog.has_column_privilege(oid, oid, text, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$has_column_privilege_id_id_name$function$
CREATE OR REPLACE FUNCTION pg_catalog.has_column_privilege(oid, oid, smallint, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$has_column_privilege_id_id_attnum$function$
CREATE OR REPLACE FUNCTION pg_catalog.has_column_privilege(text, text, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$has_column_privilege_name_name$function$
CREATE OR REPLACE FUNCTION pg_catalog.has_column_privilege(text, smallint, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$has_column_privilege_name_attnum$function$
CREATE OR REPLACE FUNCTION pg_catalog.has_column_privilege(oid, text, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$has_column_privilege_id_name$function$
CREATE OR REPLACE FUNCTION pg_catalog.has_column_privilege(oid, smallint, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$has_column_privilege_id_attnum$function$
]]></string>
			<comment><![CDATA[user privilege on column by username, rel name, col name]]></comment>
		</function>
		<function name="has_column_privilege_004" id="Function_26c6d590" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.has_column_privilege(name, text, text, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$has_column_privilege_name_name_name$function$
CREATE OR REPLACE FUNCTION pg_catalog.has_column_privilege(name, text, smallint, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$has_column_privilege_name_name_attnum$function$
CREATE OR REPLACE FUNCTION pg_catalog.has_column_privilege(name, oid, text, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$has_column_privilege_name_id_name$function$
CREATE OR REPLACE FUNCTION pg_catalog.has_column_privilege(name, oid, smallint, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$has_column_privilege_name_id_attnum$function$
CREATE OR REPLACE FUNCTION pg_catalog.has_column_privilege(oid, text, text, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$has_column_privilege_id_name_name$function$
CREATE OR REPLACE FUNCTION pg_catalog.has_column_privilege(oid, text, smallint, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$has_column_privilege_id_name_attnum$function$
CREATE OR REPLACE FUNCTION pg_catalog.has_column_privilege(oid, oid, text, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$has_column_privilege_id_id_name$function$
CREATE OR REPLACE FUNCTION pg_catalog.has_column_privilege(oid, oid, smallint, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$has_column_privilege_id_id_attnum$function$
CREATE OR REPLACE FUNCTION pg_catalog.has_column_privilege(text, text, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$has_column_privilege_name_name$function$
CREATE OR REPLACE FUNCTION pg_catalog.has_column_privilege(text, smallint, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$has_column_privilege_name_attnum$function$
CREATE OR REPLACE FUNCTION pg_catalog.has_column_privilege(oid, text, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$has_column_privilege_id_name$function$
CREATE OR REPLACE FUNCTION pg_catalog.has_column_privilege(oid, smallint, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$has_column_privilege_id_attnum$function$
]]></string>
			<comment><![CDATA[user privilege on column by username, rel name, col name]]></comment>
		</function>
		<function name="has_column_privilege_005" id="Function_2b36b327" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.has_column_privilege(name, text, text, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$has_column_privilege_name_name_name$function$
CREATE OR REPLACE FUNCTION pg_catalog.has_column_privilege(name, text, smallint, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$has_column_privilege_name_name_attnum$function$
CREATE OR REPLACE FUNCTION pg_catalog.has_column_privilege(name, oid, text, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$has_column_privilege_name_id_name$function$
CREATE OR REPLACE FUNCTION pg_catalog.has_column_privilege(name, oid, smallint, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$has_column_privilege_name_id_attnum$function$
CREATE OR REPLACE FUNCTION pg_catalog.has_column_privilege(oid, text, text, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$has_column_privilege_id_name_name$function$
CREATE OR REPLACE FUNCTION pg_catalog.has_column_privilege(oid, text, smallint, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$has_column_privilege_id_name_attnum$function$
CREATE OR REPLACE FUNCTION pg_catalog.has_column_privilege(oid, oid, text, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$has_column_privilege_id_id_name$function$
CREATE OR REPLACE FUNCTION pg_catalog.has_column_privilege(oid, oid, smallint, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$has_column_privilege_id_id_attnum$function$
CREATE OR REPLACE FUNCTION pg_catalog.has_column_privilege(text, text, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$has_column_privilege_name_name$function$
CREATE OR REPLACE FUNCTION pg_catalog.has_column_privilege(text, smallint, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$has_column_privilege_name_attnum$function$
CREATE OR REPLACE FUNCTION pg_catalog.has_column_privilege(oid, text, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$has_column_privilege_id_name$function$
CREATE OR REPLACE FUNCTION pg_catalog.has_column_privilege(oid, smallint, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$has_column_privilege_id_attnum$function$
]]></string>
			<comment><![CDATA[user privilege on column by username, rel name, col name]]></comment>
		</function>
		<function name="has_column_privilege_006" id="Function_30e5becb" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.has_column_privilege(name, text, text, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$has_column_privilege_name_name_name$function$
CREATE OR REPLACE FUNCTION pg_catalog.has_column_privilege(name, text, smallint, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$has_column_privilege_name_name_attnum$function$
CREATE OR REPLACE FUNCTION pg_catalog.has_column_privilege(name, oid, text, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$has_column_privilege_name_id_name$function$
CREATE OR REPLACE FUNCTION pg_catalog.has_column_privilege(name, oid, smallint, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$has_column_privilege_name_id_attnum$function$
CREATE OR REPLACE FUNCTION pg_catalog.has_column_privilege(oid, text, text, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$has_column_privilege_id_name_name$function$
CREATE OR REPLACE FUNCTION pg_catalog.has_column_privilege(oid, text, smallint, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$has_column_privilege_id_name_attnum$function$
CREATE OR REPLACE FUNCTION pg_catalog.has_column_privilege(oid, oid, text, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$has_column_privilege_id_id_name$function$
CREATE OR REPLACE FUNCTION pg_catalog.has_column_privilege(oid, oid, smallint, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$has_column_privilege_id_id_attnum$function$
CREATE OR REPLACE FUNCTION pg_catalog.has_column_privilege(text, text, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$has_column_privilege_name_name$function$
CREATE OR REPLACE FUNCTION pg_catalog.has_column_privilege(text, smallint, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$has_column_privilege_name_attnum$function$
CREATE OR REPLACE FUNCTION pg_catalog.has_column_privilege(oid, text, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$has_column_privilege_id_name$function$
CREATE OR REPLACE FUNCTION pg_catalog.has_column_privilege(oid, smallint, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$has_column_privilege_id_attnum$function$
]]></string>
			<comment><![CDATA[user privilege on column by username, rel name, col name]]></comment>
		</function>
		<function name="has_column_privilege_007" id="Function_a2646c0" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.has_column_privilege(name, text, text, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$has_column_privilege_name_name_name$function$
CREATE OR REPLACE FUNCTION pg_catalog.has_column_privilege(name, text, smallint, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$has_column_privilege_name_name_attnum$function$
CREATE OR REPLACE FUNCTION pg_catalog.has_column_privilege(name, oid, text, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$has_column_privilege_name_id_name$function$
CREATE OR REPLACE FUNCTION pg_catalog.has_column_privilege(name, oid, smallint, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$has_column_privilege_name_id_attnum$function$
CREATE OR REPLACE FUNCTION pg_catalog.has_column_privilege(oid, text, text, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$has_column_privilege_id_name_name$function$
CREATE OR REPLACE FUNCTION pg_catalog.has_column_privilege(oid, text, smallint, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$has_column_privilege_id_name_attnum$function$
CREATE OR REPLACE FUNCTION pg_catalog.has_column_privilege(oid, oid, text, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$has_column_privilege_id_id_name$function$
CREATE OR REPLACE FUNCTION pg_catalog.has_column_privilege(oid, oid, smallint, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$has_column_privilege_id_id_attnum$function$
CREATE OR REPLACE FUNCTION pg_catalog.has_column_privilege(text, text, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$has_column_privilege_name_name$function$
CREATE OR REPLACE FUNCTION pg_catalog.has_column_privilege(text, smallint, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$has_column_privilege_name_attnum$function$
CREATE OR REPLACE FUNCTION pg_catalog.has_column_privilege(oid, text, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$has_column_privilege_id_name$function$
CREATE OR REPLACE FUNCTION pg_catalog.has_column_privilege(oid, smallint, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$has_column_privilege_id_attnum$function$
]]></string>
			<comment><![CDATA[user privilege on column by username, rel name, col name]]></comment>
		</function>
		<function name="has_column_privilege_008" id="Function_2c3cd6d5" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.has_column_privilege(name, text, text, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$has_column_privilege_name_name_name$function$
CREATE OR REPLACE FUNCTION pg_catalog.has_column_privilege(name, text, smallint, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$has_column_privilege_name_name_attnum$function$
CREATE OR REPLACE FUNCTION pg_catalog.has_column_privilege(name, oid, text, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$has_column_privilege_name_id_name$function$
CREATE OR REPLACE FUNCTION pg_catalog.has_column_privilege(name, oid, smallint, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$has_column_privilege_name_id_attnum$function$
CREATE OR REPLACE FUNCTION pg_catalog.has_column_privilege(oid, text, text, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$has_column_privilege_id_name_name$function$
CREATE OR REPLACE FUNCTION pg_catalog.has_column_privilege(oid, text, smallint, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$has_column_privilege_id_name_attnum$function$
CREATE OR REPLACE FUNCTION pg_catalog.has_column_privilege(oid, oid, text, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$has_column_privilege_id_id_name$function$
CREATE OR REPLACE FUNCTION pg_catalog.has_column_privilege(oid, oid, smallint, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$has_column_privilege_id_id_attnum$function$
CREATE OR REPLACE FUNCTION pg_catalog.has_column_privilege(text, text, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$has_column_privilege_name_name$function$
CREATE OR REPLACE FUNCTION pg_catalog.has_column_privilege(text, smallint, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$has_column_privilege_name_attnum$function$
CREATE OR REPLACE FUNCTION pg_catalog.has_column_privilege(oid, text, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$has_column_privilege_id_name$function$
CREATE OR REPLACE FUNCTION pg_catalog.has_column_privilege(oid, smallint, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$has_column_privilege_id_attnum$function$
]]></string>
			<comment><![CDATA[user privilege on column by username, rel name, col name]]></comment>
		</function>
		<function name="has_column_privilege_009" id="Function_259525ac" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.has_column_privilege(name, text, text, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$has_column_privilege_name_name_name$function$
CREATE OR REPLACE FUNCTION pg_catalog.has_column_privilege(name, text, smallint, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$has_column_privilege_name_name_attnum$function$
CREATE OR REPLACE FUNCTION pg_catalog.has_column_privilege(name, oid, text, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$has_column_privilege_name_id_name$function$
CREATE OR REPLACE FUNCTION pg_catalog.has_column_privilege(name, oid, smallint, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$has_column_privilege_name_id_attnum$function$
CREATE OR REPLACE FUNCTION pg_catalog.has_column_privilege(oid, text, text, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$has_column_privilege_id_name_name$function$
CREATE OR REPLACE FUNCTION pg_catalog.has_column_privilege(oid, text, smallint, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$has_column_privilege_id_name_attnum$function$
CREATE OR REPLACE FUNCTION pg_catalog.has_column_privilege(oid, oid, text, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$has_column_privilege_id_id_name$function$
CREATE OR REPLACE FUNCTION pg_catalog.has_column_privilege(oid, oid, smallint, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$has_column_privilege_id_id_attnum$function$
CREATE OR REPLACE FUNCTION pg_catalog.has_column_privilege(text, text, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$has_column_privilege_name_name$function$
CREATE OR REPLACE FUNCTION pg_catalog.has_column_privilege(text, smallint, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$has_column_privilege_name_attnum$function$
CREATE OR REPLACE FUNCTION pg_catalog.has_column_privilege(oid, text, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$has_column_privilege_id_name$function$
CREATE OR REPLACE FUNCTION pg_catalog.has_column_privilege(oid, smallint, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$has_column_privilege_id_attnum$function$
]]></string>
			<comment><![CDATA[user privilege on column by username, rel name, col name]]></comment>
		</function>
		<function name="has_column_privilege_010" id="Function_238610cc" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.has_column_privilege(name, text, text, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$has_column_privilege_name_name_name$function$
CREATE OR REPLACE FUNCTION pg_catalog.has_column_privilege(name, text, smallint, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$has_column_privilege_name_name_attnum$function$
CREATE OR REPLACE FUNCTION pg_catalog.has_column_privilege(name, oid, text, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$has_column_privilege_name_id_name$function$
CREATE OR REPLACE FUNCTION pg_catalog.has_column_privilege(name, oid, smallint, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$has_column_privilege_name_id_attnum$function$
CREATE OR REPLACE FUNCTION pg_catalog.has_column_privilege(oid, text, text, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$has_column_privilege_id_name_name$function$
CREATE OR REPLACE FUNCTION pg_catalog.has_column_privilege(oid, text, smallint, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$has_column_privilege_id_name_attnum$function$
CREATE OR REPLACE FUNCTION pg_catalog.has_column_privilege(oid, oid, text, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$has_column_privilege_id_id_name$function$
CREATE OR REPLACE FUNCTION pg_catalog.has_column_privilege(oid, oid, smallint, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$has_column_privilege_id_id_attnum$function$
CREATE OR REPLACE FUNCTION pg_catalog.has_column_privilege(text, text, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$has_column_privilege_name_name$function$
CREATE OR REPLACE FUNCTION pg_catalog.has_column_privilege(text, smallint, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$has_column_privilege_name_attnum$function$
CREATE OR REPLACE FUNCTION pg_catalog.has_column_privilege(oid, text, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$has_column_privilege_id_name$function$
CREATE OR REPLACE FUNCTION pg_catalog.has_column_privilege(oid, smallint, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$has_column_privilege_id_attnum$function$
]]></string>
			<comment><![CDATA[user privilege on column by username, rel name, col name]]></comment>
		</function>
		<function name="has_column_privilege_011" id="Function_327cdf16" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.has_column_privilege(name, text, text, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$has_column_privilege_name_name_name$function$
CREATE OR REPLACE FUNCTION pg_catalog.has_column_privilege(name, text, smallint, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$has_column_privilege_name_name_attnum$function$
CREATE OR REPLACE FUNCTION pg_catalog.has_column_privilege(name, oid, text, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$has_column_privilege_name_id_name$function$
CREATE OR REPLACE FUNCTION pg_catalog.has_column_privilege(name, oid, smallint, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$has_column_privilege_name_id_attnum$function$
CREATE OR REPLACE FUNCTION pg_catalog.has_column_privilege(oid, text, text, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$has_column_privilege_id_name_name$function$
CREATE OR REPLACE FUNCTION pg_catalog.has_column_privilege(oid, text, smallint, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$has_column_privilege_id_name_attnum$function$
CREATE OR REPLACE FUNCTION pg_catalog.has_column_privilege(oid, oid, text, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$has_column_privilege_id_id_name$function$
CREATE OR REPLACE FUNCTION pg_catalog.has_column_privilege(oid, oid, smallint, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$has_column_privilege_id_id_attnum$function$
CREATE OR REPLACE FUNCTION pg_catalog.has_column_privilege(text, text, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$has_column_privilege_name_name$function$
CREATE OR REPLACE FUNCTION pg_catalog.has_column_privilege(text, smallint, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$has_column_privilege_name_attnum$function$
CREATE OR REPLACE FUNCTION pg_catalog.has_column_privilege(oid, text, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$has_column_privilege_id_name$function$
CREATE OR REPLACE FUNCTION pg_catalog.has_column_privilege(oid, smallint, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$has_column_privilege_id_attnum$function$
]]></string>
			<comment><![CDATA[user privilege on column by username, rel name, col name]]></comment>
		</function>
		<function name="has_database_privilege" id="Function_16b5a889" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.has_database_privilege(name, text, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$has_database_privilege_name_name$function$
CREATE OR REPLACE FUNCTION pg_catalog.has_database_privilege(name, oid, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$has_database_privilege_name_id$function$
CREATE OR REPLACE FUNCTION pg_catalog.has_database_privilege(oid, text, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$has_database_privilege_id_name$function$
CREATE OR REPLACE FUNCTION pg_catalog.has_database_privilege(oid, oid, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$has_database_privilege_id_id$function$
CREATE OR REPLACE FUNCTION pg_catalog.has_database_privilege(text, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$has_database_privilege_name$function$
CREATE OR REPLACE FUNCTION pg_catalog.has_database_privilege(oid, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$has_database_privilege_id$function$
]]></string>
			<comment><![CDATA[user privilege on database by username, database name]]></comment>
		</function>
		<function name="has_database_privilege_001" id="Function_33e901d7" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.has_database_privilege(name, text, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$has_database_privilege_name_name$function$
CREATE OR REPLACE FUNCTION pg_catalog.has_database_privilege(name, oid, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$has_database_privilege_name_id$function$
CREATE OR REPLACE FUNCTION pg_catalog.has_database_privilege(oid, text, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$has_database_privilege_id_name$function$
CREATE OR REPLACE FUNCTION pg_catalog.has_database_privilege(oid, oid, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$has_database_privilege_id_id$function$
CREATE OR REPLACE FUNCTION pg_catalog.has_database_privilege(text, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$has_database_privilege_name$function$
CREATE OR REPLACE FUNCTION pg_catalog.has_database_privilege(oid, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$has_database_privilege_id$function$
]]></string>
			<comment><![CDATA[user privilege on database by username, database name]]></comment>
		</function>
		<function name="has_database_privilege_002" id="Function_2e04bea6" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.has_database_privilege(name, text, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$has_database_privilege_name_name$function$
CREATE OR REPLACE FUNCTION pg_catalog.has_database_privilege(name, oid, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$has_database_privilege_name_id$function$
CREATE OR REPLACE FUNCTION pg_catalog.has_database_privilege(oid, text, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$has_database_privilege_id_name$function$
CREATE OR REPLACE FUNCTION pg_catalog.has_database_privilege(oid, oid, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$has_database_privilege_id_id$function$
CREATE OR REPLACE FUNCTION pg_catalog.has_database_privilege(text, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$has_database_privilege_name$function$
CREATE OR REPLACE FUNCTION pg_catalog.has_database_privilege(oid, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$has_database_privilege_id$function$
]]></string>
			<comment><![CDATA[user privilege on database by username, database name]]></comment>
		</function>
		<function name="has_database_privilege_003" id="Function_2045793c" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.has_database_privilege(name, text, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$has_database_privilege_name_name$function$
CREATE OR REPLACE FUNCTION pg_catalog.has_database_privilege(name, oid, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$has_database_privilege_name_id$function$
CREATE OR REPLACE FUNCTION pg_catalog.has_database_privilege(oid, text, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$has_database_privilege_id_name$function$
CREATE OR REPLACE FUNCTION pg_catalog.has_database_privilege(oid, oid, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$has_database_privilege_id_id$function$
CREATE OR REPLACE FUNCTION pg_catalog.has_database_privilege(text, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$has_database_privilege_name$function$
CREATE OR REPLACE FUNCTION pg_catalog.has_database_privilege(oid, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$has_database_privilege_id$function$
]]></string>
			<comment><![CDATA[user privilege on database by username, database name]]></comment>
		</function>
		<function name="has_database_privilege_004" id="Function_23ee0c84" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.has_database_privilege(name, text, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$has_database_privilege_name_name$function$
CREATE OR REPLACE FUNCTION pg_catalog.has_database_privilege(name, oid, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$has_database_privilege_name_id$function$
CREATE OR REPLACE FUNCTION pg_catalog.has_database_privilege(oid, text, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$has_database_privilege_id_name$function$
CREATE OR REPLACE FUNCTION pg_catalog.has_database_privilege(oid, oid, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$has_database_privilege_id_id$function$
CREATE OR REPLACE FUNCTION pg_catalog.has_database_privilege(text, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$has_database_privilege_name$function$
CREATE OR REPLACE FUNCTION pg_catalog.has_database_privilege(oid, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$has_database_privilege_id$function$
]]></string>
			<comment><![CDATA[user privilege on database by username, database name]]></comment>
		</function>
		<function name="has_database_privilege_005" id="Function_13a00465" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.has_database_privilege(name, text, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$has_database_privilege_name_name$function$
CREATE OR REPLACE FUNCTION pg_catalog.has_database_privilege(name, oid, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$has_database_privilege_name_id$function$
CREATE OR REPLACE FUNCTION pg_catalog.has_database_privilege(oid, text, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$has_database_privilege_id_name$function$
CREATE OR REPLACE FUNCTION pg_catalog.has_database_privilege(oid, oid, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$has_database_privilege_id_id$function$
CREATE OR REPLACE FUNCTION pg_catalog.has_database_privilege(text, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$has_database_privilege_name$function$
CREATE OR REPLACE FUNCTION pg_catalog.has_database_privilege(oid, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$has_database_privilege_id$function$
]]></string>
			<comment><![CDATA[user privilege on database by username, database name]]></comment>
		</function>
		<function name="has_foreign_data_wrapper_privilege" id="Function_26923be5" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.has_foreign_data_wrapper_privilege(name, text, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$has_foreign_data_wrapper_privilege_name_name$function$
CREATE OR REPLACE FUNCTION pg_catalog.has_foreign_data_wrapper_privilege(name, oid, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$has_foreign_data_wrapper_privilege_name_id$function$
CREATE OR REPLACE FUNCTION pg_catalog.has_foreign_data_wrapper_privilege(oid, text, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$has_foreign_data_wrapper_privilege_id_name$function$
CREATE OR REPLACE FUNCTION pg_catalog.has_foreign_data_wrapper_privilege(oid, oid, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$has_foreign_data_wrapper_privilege_id_id$function$
CREATE OR REPLACE FUNCTION pg_catalog.has_foreign_data_wrapper_privilege(text, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$has_foreign_data_wrapper_privilege_name$function$
CREATE OR REPLACE FUNCTION pg_catalog.has_foreign_data_wrapper_privilege(oid, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$has_foreign_data_wrapper_privilege_id$function$
]]></string>
			<comment><![CDATA[user privilege on foreign data wrapper by username, foreign data wrapper name]]></comment>
		</function>
		<function name="has_foreign_data_wrapper_privilege_001" id="Function_186e1cde" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.has_foreign_data_wrapper_privilege(name, text, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$has_foreign_data_wrapper_privilege_name_name$function$
CREATE OR REPLACE FUNCTION pg_catalog.has_foreign_data_wrapper_privilege(name, oid, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$has_foreign_data_wrapper_privilege_name_id$function$
CREATE OR REPLACE FUNCTION pg_catalog.has_foreign_data_wrapper_privilege(oid, text, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$has_foreign_data_wrapper_privilege_id_name$function$
CREATE OR REPLACE FUNCTION pg_catalog.has_foreign_data_wrapper_privilege(oid, oid, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$has_foreign_data_wrapper_privilege_id_id$function$
CREATE OR REPLACE FUNCTION pg_catalog.has_foreign_data_wrapper_privilege(text, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$has_foreign_data_wrapper_privilege_name$function$
CREATE OR REPLACE FUNCTION pg_catalog.has_foreign_data_wrapper_privilege(oid, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$has_foreign_data_wrapper_privilege_id$function$
]]></string>
			<comment><![CDATA[user privilege on foreign data wrapper by username, foreign data wrapper name]]></comment>
		</function>
		<function name="has_foreign_data_wrapper_privilege_002" id="Function_2c1d3e04" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.has_foreign_data_wrapper_privilege(name, text, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$has_foreign_data_wrapper_privilege_name_name$function$
CREATE OR REPLACE FUNCTION pg_catalog.has_foreign_data_wrapper_privilege(name, oid, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$has_foreign_data_wrapper_privilege_name_id$function$
CREATE OR REPLACE FUNCTION pg_catalog.has_foreign_data_wrapper_privilege(oid, text, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$has_foreign_data_wrapper_privilege_id_name$function$
CREATE OR REPLACE FUNCTION pg_catalog.has_foreign_data_wrapper_privilege(oid, oid, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$has_foreign_data_wrapper_privilege_id_id$function$
CREATE OR REPLACE FUNCTION pg_catalog.has_foreign_data_wrapper_privilege(text, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$has_foreign_data_wrapper_privilege_name$function$
CREATE OR REPLACE FUNCTION pg_catalog.has_foreign_data_wrapper_privilege(oid, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$has_foreign_data_wrapper_privilege_id$function$
]]></string>
			<comment><![CDATA[user privilege on foreign data wrapper by username, foreign data wrapper name]]></comment>
		</function>
		<function name="has_foreign_data_wrapper_privilege_003" id="Function_6063fa1" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.has_foreign_data_wrapper_privilege(name, text, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$has_foreign_data_wrapper_privilege_name_name$function$
CREATE OR REPLACE FUNCTION pg_catalog.has_foreign_data_wrapper_privilege(name, oid, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$has_foreign_data_wrapper_privilege_name_id$function$
CREATE OR REPLACE FUNCTION pg_catalog.has_foreign_data_wrapper_privilege(oid, text, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$has_foreign_data_wrapper_privilege_id_name$function$
CREATE OR REPLACE FUNCTION pg_catalog.has_foreign_data_wrapper_privilege(oid, oid, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$has_foreign_data_wrapper_privilege_id_id$function$
CREATE OR REPLACE FUNCTION pg_catalog.has_foreign_data_wrapper_privilege(text, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$has_foreign_data_wrapper_privilege_name$function$
CREATE OR REPLACE FUNCTION pg_catalog.has_foreign_data_wrapper_privilege(oid, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$has_foreign_data_wrapper_privilege_id$function$
]]></string>
			<comment><![CDATA[user privilege on foreign data wrapper by username, foreign data wrapper name]]></comment>
		</function>
		<function name="has_foreign_data_wrapper_privilege_004" id="Function_3995059f" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.has_foreign_data_wrapper_privilege(name, text, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$has_foreign_data_wrapper_privilege_name_name$function$
CREATE OR REPLACE FUNCTION pg_catalog.has_foreign_data_wrapper_privilege(name, oid, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$has_foreign_data_wrapper_privilege_name_id$function$
CREATE OR REPLACE FUNCTION pg_catalog.has_foreign_data_wrapper_privilege(oid, text, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$has_foreign_data_wrapper_privilege_id_name$function$
CREATE OR REPLACE FUNCTION pg_catalog.has_foreign_data_wrapper_privilege(oid, oid, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$has_foreign_data_wrapper_privilege_id_id$function$
CREATE OR REPLACE FUNCTION pg_catalog.has_foreign_data_wrapper_privilege(text, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$has_foreign_data_wrapper_privilege_name$function$
CREATE OR REPLACE FUNCTION pg_catalog.has_foreign_data_wrapper_privilege(oid, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$has_foreign_data_wrapper_privilege_id$function$
]]></string>
			<comment><![CDATA[user privilege on foreign data wrapper by username, foreign data wrapper name]]></comment>
		</function>
		<function name="has_foreign_data_wrapper_privilege_005" id="Function_15f6b45e" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.has_foreign_data_wrapper_privilege(name, text, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$has_foreign_data_wrapper_privilege_name_name$function$
CREATE OR REPLACE FUNCTION pg_catalog.has_foreign_data_wrapper_privilege(name, oid, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$has_foreign_data_wrapper_privilege_name_id$function$
CREATE OR REPLACE FUNCTION pg_catalog.has_foreign_data_wrapper_privilege(oid, text, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$has_foreign_data_wrapper_privilege_id_name$function$
CREATE OR REPLACE FUNCTION pg_catalog.has_foreign_data_wrapper_privilege(oid, oid, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$has_foreign_data_wrapper_privilege_id_id$function$
CREATE OR REPLACE FUNCTION pg_catalog.has_foreign_data_wrapper_privilege(text, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$has_foreign_data_wrapper_privilege_name$function$
CREATE OR REPLACE FUNCTION pg_catalog.has_foreign_data_wrapper_privilege(oid, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$has_foreign_data_wrapper_privilege_id$function$
]]></string>
			<comment><![CDATA[user privilege on foreign data wrapper by username, foreign data wrapper name]]></comment>
		</function>
		<function name="has_function_privilege" id="Function_d40b100" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.has_function_privilege(name, text, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$has_function_privilege_name_name$function$
CREATE OR REPLACE FUNCTION pg_catalog.has_function_privilege(name, oid, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$has_function_privilege_name_id$function$
CREATE OR REPLACE FUNCTION pg_catalog.has_function_privilege(oid, text, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$has_function_privilege_id_name$function$
CREATE OR REPLACE FUNCTION pg_catalog.has_function_privilege(oid, oid, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$has_function_privilege_id_id$function$
CREATE OR REPLACE FUNCTION pg_catalog.has_function_privilege(text, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$has_function_privilege_name$function$
CREATE OR REPLACE FUNCTION pg_catalog.has_function_privilege(oid, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$has_function_privilege_id$function$
]]></string>
			<comment><![CDATA[user privilege on function by username, function name]]></comment>
		</function>
		<function name="has_function_privilege_001" id="Function_b3a08f6" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.has_function_privilege(name, text, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$has_function_privilege_name_name$function$
CREATE OR REPLACE FUNCTION pg_catalog.has_function_privilege(name, oid, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$has_function_privilege_name_id$function$
CREATE OR REPLACE FUNCTION pg_catalog.has_function_privilege(oid, text, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$has_function_privilege_id_name$function$
CREATE OR REPLACE FUNCTION pg_catalog.has_function_privilege(oid, oid, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$has_function_privilege_id_id$function$
CREATE OR REPLACE FUNCTION pg_catalog.has_function_privilege(text, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$has_function_privilege_name$function$
CREATE OR REPLACE FUNCTION pg_catalog.has_function_privilege(oid, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$has_function_privilege_id$function$
]]></string>
			<comment><![CDATA[user privilege on function by username, function name]]></comment>
		</function>
		<function name="has_function_privilege_002" id="Function_2e8e9555" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.has_function_privilege(name, text, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$has_function_privilege_name_name$function$
CREATE OR REPLACE FUNCTION pg_catalog.has_function_privilege(name, oid, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$has_function_privilege_name_id$function$
CREATE OR REPLACE FUNCTION pg_catalog.has_function_privilege(oid, text, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$has_function_privilege_id_name$function$
CREATE OR REPLACE FUNCTION pg_catalog.has_function_privilege(oid, oid, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$has_function_privilege_id_id$function$
CREATE OR REPLACE FUNCTION pg_catalog.has_function_privilege(text, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$has_function_privilege_name$function$
CREATE OR REPLACE FUNCTION pg_catalog.has_function_privilege(oid, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$has_function_privilege_id$function$
]]></string>
			<comment><![CDATA[user privilege on function by username, function name]]></comment>
		</function>
		<function name="has_function_privilege_003" id="Function_39e00c9e" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.has_function_privilege(name, text, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$has_function_privilege_name_name$function$
CREATE OR REPLACE FUNCTION pg_catalog.has_function_privilege(name, oid, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$has_function_privilege_name_id$function$
CREATE OR REPLACE FUNCTION pg_catalog.has_function_privilege(oid, text, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$has_function_privilege_id_name$function$
CREATE OR REPLACE FUNCTION pg_catalog.has_function_privilege(oid, oid, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$has_function_privilege_id_id$function$
CREATE OR REPLACE FUNCTION pg_catalog.has_function_privilege(text, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$has_function_privilege_name$function$
CREATE OR REPLACE FUNCTION pg_catalog.has_function_privilege(oid, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$has_function_privilege_id$function$
]]></string>
			<comment><![CDATA[user privilege on function by username, function name]]></comment>
		</function>
		<function name="has_function_privilege_004" id="Function_1d39b9eb" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.has_function_privilege(name, text, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$has_function_privilege_name_name$function$
CREATE OR REPLACE FUNCTION pg_catalog.has_function_privilege(name, oid, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$has_function_privilege_name_id$function$
CREATE OR REPLACE FUNCTION pg_catalog.has_function_privilege(oid, text, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$has_function_privilege_id_name$function$
CREATE OR REPLACE FUNCTION pg_catalog.has_function_privilege(oid, oid, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$has_function_privilege_id_id$function$
CREATE OR REPLACE FUNCTION pg_catalog.has_function_privilege(text, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$has_function_privilege_name$function$
CREATE OR REPLACE FUNCTION pg_catalog.has_function_privilege(oid, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$has_function_privilege_id$function$
]]></string>
			<comment><![CDATA[user privilege on function by username, function name]]></comment>
		</function>
		<function name="has_function_privilege_005" id="Function_4b47928" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.has_function_privilege(name, text, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$has_function_privilege_name_name$function$
CREATE OR REPLACE FUNCTION pg_catalog.has_function_privilege(name, oid, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$has_function_privilege_name_id$function$
CREATE OR REPLACE FUNCTION pg_catalog.has_function_privilege(oid, text, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$has_function_privilege_id_name$function$
CREATE OR REPLACE FUNCTION pg_catalog.has_function_privilege(oid, oid, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$has_function_privilege_id_id$function$
CREATE OR REPLACE FUNCTION pg_catalog.has_function_privilege(text, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$has_function_privilege_name$function$
CREATE OR REPLACE FUNCTION pg_catalog.has_function_privilege(oid, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$has_function_privilege_id$function$
]]></string>
			<comment><![CDATA[user privilege on function by username, function name]]></comment>
		</function>
		<function name="has_language_privilege" id="Function_25d14c36" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.has_language_privilege(name, text, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$has_language_privilege_name_name$function$
CREATE OR REPLACE FUNCTION pg_catalog.has_language_privilege(name, oid, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$has_language_privilege_name_id$function$
CREATE OR REPLACE FUNCTION pg_catalog.has_language_privilege(oid, text, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$has_language_privilege_id_name$function$
CREATE OR REPLACE FUNCTION pg_catalog.has_language_privilege(oid, oid, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$has_language_privilege_id_id$function$
CREATE OR REPLACE FUNCTION pg_catalog.has_language_privilege(text, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$has_language_privilege_name$function$
CREATE OR REPLACE FUNCTION pg_catalog.has_language_privilege(oid, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$has_language_privilege_id$function$
]]></string>
			<comment><![CDATA[user privilege on language by username, language name]]></comment>
		</function>
		<function name="has_language_privilege_001" id="Function_57afd18" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.has_language_privilege(name, text, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$has_language_privilege_name_name$function$
CREATE OR REPLACE FUNCTION pg_catalog.has_language_privilege(name, oid, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$has_language_privilege_name_id$function$
CREATE OR REPLACE FUNCTION pg_catalog.has_language_privilege(oid, text, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$has_language_privilege_id_name$function$
CREATE OR REPLACE FUNCTION pg_catalog.has_language_privilege(oid, oid, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$has_language_privilege_id_id$function$
CREATE OR REPLACE FUNCTION pg_catalog.has_language_privilege(text, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$has_language_privilege_name$function$
CREATE OR REPLACE FUNCTION pg_catalog.has_language_privilege(oid, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$has_language_privilege_id$function$
]]></string>
			<comment><![CDATA[user privilege on language by username, language name]]></comment>
		</function>
		<function name="has_language_privilege_002" id="Function_b5c2440" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.has_language_privilege(name, text, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$has_language_privilege_name_name$function$
CREATE OR REPLACE FUNCTION pg_catalog.has_language_privilege(name, oid, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$has_language_privilege_name_id$function$
CREATE OR REPLACE FUNCTION pg_catalog.has_language_privilege(oid, text, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$has_language_privilege_id_name$function$
CREATE OR REPLACE FUNCTION pg_catalog.has_language_privilege(oid, oid, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$has_language_privilege_id_id$function$
CREATE OR REPLACE FUNCTION pg_catalog.has_language_privilege(text, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$has_language_privilege_name$function$
CREATE OR REPLACE FUNCTION pg_catalog.has_language_privilege(oid, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$has_language_privilege_id$function$
]]></string>
			<comment><![CDATA[user privilege on language by username, language name]]></comment>
		</function>
		<function name="has_language_privilege_003" id="Function_25b9d474" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.has_language_privilege(name, text, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$has_language_privilege_name_name$function$
CREATE OR REPLACE FUNCTION pg_catalog.has_language_privilege(name, oid, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$has_language_privilege_name_id$function$
CREATE OR REPLACE FUNCTION pg_catalog.has_language_privilege(oid, text, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$has_language_privilege_id_name$function$
CREATE OR REPLACE FUNCTION pg_catalog.has_language_privilege(oid, oid, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$has_language_privilege_id_id$function$
CREATE OR REPLACE FUNCTION pg_catalog.has_language_privilege(text, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$has_language_privilege_name$function$
CREATE OR REPLACE FUNCTION pg_catalog.has_language_privilege(oid, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$has_language_privilege_id$function$
]]></string>
			<comment><![CDATA[user privilege on language by username, language name]]></comment>
		</function>
		<function name="has_language_privilege_004" id="Function_112d1421" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.has_language_privilege(name, text, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$has_language_privilege_name_name$function$
CREATE OR REPLACE FUNCTION pg_catalog.has_language_privilege(name, oid, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$has_language_privilege_name_id$function$
CREATE OR REPLACE FUNCTION pg_catalog.has_language_privilege(oid, text, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$has_language_privilege_id_name$function$
CREATE OR REPLACE FUNCTION pg_catalog.has_language_privilege(oid, oid, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$has_language_privilege_id_id$function$
CREATE OR REPLACE FUNCTION pg_catalog.has_language_privilege(text, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$has_language_privilege_name$function$
CREATE OR REPLACE FUNCTION pg_catalog.has_language_privilege(oid, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$has_language_privilege_id$function$
]]></string>
			<comment><![CDATA[user privilege on language by username, language name]]></comment>
		</function>
		<function name="has_language_privilege_005" id="Function_5ea962c" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.has_language_privilege(name, text, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$has_language_privilege_name_name$function$
CREATE OR REPLACE FUNCTION pg_catalog.has_language_privilege(name, oid, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$has_language_privilege_name_id$function$
CREATE OR REPLACE FUNCTION pg_catalog.has_language_privilege(oid, text, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$has_language_privilege_id_name$function$
CREATE OR REPLACE FUNCTION pg_catalog.has_language_privilege(oid, oid, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$has_language_privilege_id_id$function$
CREATE OR REPLACE FUNCTION pg_catalog.has_language_privilege(text, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$has_language_privilege_name$function$
CREATE OR REPLACE FUNCTION pg_catalog.has_language_privilege(oid, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$has_language_privilege_id$function$
]]></string>
			<comment><![CDATA[user privilege on language by username, language name]]></comment>
		</function>
		<function name="has_schema_privilege" id="Function_1b299b39" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.has_schema_privilege(name, text, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$has_schema_privilege_name_name$function$
CREATE OR REPLACE FUNCTION pg_catalog.has_schema_privilege(name, oid, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$has_schema_privilege_name_id$function$
CREATE OR REPLACE FUNCTION pg_catalog.has_schema_privilege(oid, text, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$has_schema_privilege_id_name$function$
CREATE OR REPLACE FUNCTION pg_catalog.has_schema_privilege(oid, oid, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$has_schema_privilege_id_id$function$
CREATE OR REPLACE FUNCTION pg_catalog.has_schema_privilege(text, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$has_schema_privilege_name$function$
CREATE OR REPLACE FUNCTION pg_catalog.has_schema_privilege(oid, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$has_schema_privilege_id$function$
]]></string>
			<comment><![CDATA[user privilege on schema by username, schema name]]></comment>
		</function>
		<function name="has_schema_privilege_001" id="Function_6721c45" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.has_schema_privilege(name, text, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$has_schema_privilege_name_name$function$
CREATE OR REPLACE FUNCTION pg_catalog.has_schema_privilege(name, oid, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$has_schema_privilege_name_id$function$
CREATE OR REPLACE FUNCTION pg_catalog.has_schema_privilege(oid, text, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$has_schema_privilege_id_name$function$
CREATE OR REPLACE FUNCTION pg_catalog.has_schema_privilege(oid, oid, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$has_schema_privilege_id_id$function$
CREATE OR REPLACE FUNCTION pg_catalog.has_schema_privilege(text, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$has_schema_privilege_name$function$
CREATE OR REPLACE FUNCTION pg_catalog.has_schema_privilege(oid, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$has_schema_privilege_id$function$
]]></string>
			<comment><![CDATA[user privilege on schema by username, schema name]]></comment>
		</function>
		<function name="has_schema_privilege_002" id="Function_1d5744bd" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.has_schema_privilege(name, text, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$has_schema_privilege_name_name$function$
CREATE OR REPLACE FUNCTION pg_catalog.has_schema_privilege(name, oid, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$has_schema_privilege_name_id$function$
CREATE OR REPLACE FUNCTION pg_catalog.has_schema_privilege(oid, text, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$has_schema_privilege_id_name$function$
CREATE OR REPLACE FUNCTION pg_catalog.has_schema_privilege(oid, oid, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$has_schema_privilege_id_id$function$
CREATE OR REPLACE FUNCTION pg_catalog.has_schema_privilege(text, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$has_schema_privilege_name$function$
CREATE OR REPLACE FUNCTION pg_catalog.has_schema_privilege(oid, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$has_schema_privilege_id$function$
]]></string>
			<comment><![CDATA[user privilege on schema by username, schema name]]></comment>
		</function>
		<function name="has_schema_privilege_003" id="Function_2d3ba909" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.has_schema_privilege(name, text, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$has_schema_privilege_name_name$function$
CREATE OR REPLACE FUNCTION pg_catalog.has_schema_privilege(name, oid, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$has_schema_privilege_name_id$function$
CREATE OR REPLACE FUNCTION pg_catalog.has_schema_privilege(oid, text, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$has_schema_privilege_id_name$function$
CREATE OR REPLACE FUNCTION pg_catalog.has_schema_privilege(oid, oid, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$has_schema_privilege_id_id$function$
CREATE OR REPLACE FUNCTION pg_catalog.has_schema_privilege(text, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$has_schema_privilege_name$function$
CREATE OR REPLACE FUNCTION pg_catalog.has_schema_privilege(oid, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$has_schema_privilege_id$function$
]]></string>
			<comment><![CDATA[user privilege on schema by username, schema name]]></comment>
		</function>
		<function name="has_schema_privilege_004" id="Function_9252217" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.has_schema_privilege(name, text, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$has_schema_privilege_name_name$function$
CREATE OR REPLACE FUNCTION pg_catalog.has_schema_privilege(name, oid, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$has_schema_privilege_name_id$function$
CREATE OR REPLACE FUNCTION pg_catalog.has_schema_privilege(oid, text, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$has_schema_privilege_id_name$function$
CREATE OR REPLACE FUNCTION pg_catalog.has_schema_privilege(oid, oid, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$has_schema_privilege_id_id$function$
CREATE OR REPLACE FUNCTION pg_catalog.has_schema_privilege(text, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$has_schema_privilege_name$function$
CREATE OR REPLACE FUNCTION pg_catalog.has_schema_privilege(oid, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$has_schema_privilege_id$function$
]]></string>
			<comment><![CDATA[user privilege on schema by username, schema name]]></comment>
		</function>
		<function name="has_schema_privilege_005" id="Function_15386ba6" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.has_schema_privilege(name, text, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$has_schema_privilege_name_name$function$
CREATE OR REPLACE FUNCTION pg_catalog.has_schema_privilege(name, oid, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$has_schema_privilege_name_id$function$
CREATE OR REPLACE FUNCTION pg_catalog.has_schema_privilege(oid, text, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$has_schema_privilege_id_name$function$
CREATE OR REPLACE FUNCTION pg_catalog.has_schema_privilege(oid, oid, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$has_schema_privilege_id_id$function$
CREATE OR REPLACE FUNCTION pg_catalog.has_schema_privilege(text, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$has_schema_privilege_name$function$
CREATE OR REPLACE FUNCTION pg_catalog.has_schema_privilege(oid, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$has_schema_privilege_id$function$
]]></string>
			<comment><![CDATA[user privilege on schema by username, schema name]]></comment>
		</function>
		<function name="has_sequence_privilege" id="Function_19c97bbf" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.has_sequence_privilege(name, text, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$has_sequence_privilege_name_name$function$
CREATE OR REPLACE FUNCTION pg_catalog.has_sequence_privilege(name, oid, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$has_sequence_privilege_name_id$function$
CREATE OR REPLACE FUNCTION pg_catalog.has_sequence_privilege(oid, text, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$has_sequence_privilege_id_name$function$
CREATE OR REPLACE FUNCTION pg_catalog.has_sequence_privilege(oid, oid, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$has_sequence_privilege_id_id$function$
CREATE OR REPLACE FUNCTION pg_catalog.has_sequence_privilege(text, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$has_sequence_privilege_name$function$
CREATE OR REPLACE FUNCTION pg_catalog.has_sequence_privilege(oid, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$has_sequence_privilege_id$function$
]]></string>
			<comment><![CDATA[user privilege on sequence by username, seq name]]></comment>
		</function>
		<function name="has_sequence_privilege_001" id="Function_304be634" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.has_sequence_privilege(name, text, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$has_sequence_privilege_name_name$function$
CREATE OR REPLACE FUNCTION pg_catalog.has_sequence_privilege(name, oid, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$has_sequence_privilege_name_id$function$
CREATE OR REPLACE FUNCTION pg_catalog.has_sequence_privilege(oid, text, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$has_sequence_privilege_id_name$function$
CREATE OR REPLACE FUNCTION pg_catalog.has_sequence_privilege(oid, oid, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$has_sequence_privilege_id_id$function$
CREATE OR REPLACE FUNCTION pg_catalog.has_sequence_privilege(text, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$has_sequence_privilege_name$function$
CREATE OR REPLACE FUNCTION pg_catalog.has_sequence_privilege(oid, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$has_sequence_privilege_id$function$
]]></string>
			<comment><![CDATA[user privilege on sequence by username, seq name]]></comment>
		</function>
		<function name="has_sequence_privilege_002" id="Function_34f81cf4" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.has_sequence_privilege(name, text, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$has_sequence_privilege_name_name$function$
CREATE OR REPLACE FUNCTION pg_catalog.has_sequence_privilege(name, oid, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$has_sequence_privilege_name_id$function$
CREATE OR REPLACE FUNCTION pg_catalog.has_sequence_privilege(oid, text, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$has_sequence_privilege_id_name$function$
CREATE OR REPLACE FUNCTION pg_catalog.has_sequence_privilege(oid, oid, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$has_sequence_privilege_id_id$function$
CREATE OR REPLACE FUNCTION pg_catalog.has_sequence_privilege(text, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$has_sequence_privilege_name$function$
CREATE OR REPLACE FUNCTION pg_catalog.has_sequence_privilege(oid, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$has_sequence_privilege_id$function$
]]></string>
			<comment><![CDATA[user privilege on sequence by username, seq name]]></comment>
		</function>
		<function name="has_sequence_privilege_003" id="Function_25d4d94a" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.has_sequence_privilege(name, text, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$has_sequence_privilege_name_name$function$
CREATE OR REPLACE FUNCTION pg_catalog.has_sequence_privilege(name, oid, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$has_sequence_privilege_name_id$function$
CREATE OR REPLACE FUNCTION pg_catalog.has_sequence_privilege(oid, text, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$has_sequence_privilege_id_name$function$
CREATE OR REPLACE FUNCTION pg_catalog.has_sequence_privilege(oid, oid, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$has_sequence_privilege_id_id$function$
CREATE OR REPLACE FUNCTION pg_catalog.has_sequence_privilege(text, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$has_sequence_privilege_name$function$
CREATE OR REPLACE FUNCTION pg_catalog.has_sequence_privilege(oid, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$has_sequence_privilege_id$function$
]]></string>
			<comment><![CDATA[user privilege on sequence by username, seq name]]></comment>
		</function>
		<function name="has_sequence_privilege_004" id="Function_345dbe95" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.has_sequence_privilege(name, text, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$has_sequence_privilege_name_name$function$
CREATE OR REPLACE FUNCTION pg_catalog.has_sequence_privilege(name, oid, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$has_sequence_privilege_name_id$function$
CREATE OR REPLACE FUNCTION pg_catalog.has_sequence_privilege(oid, text, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$has_sequence_privilege_id_name$function$
CREATE OR REPLACE FUNCTION pg_catalog.has_sequence_privilege(oid, oid, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$has_sequence_privilege_id_id$function$
CREATE OR REPLACE FUNCTION pg_catalog.has_sequence_privilege(text, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$has_sequence_privilege_name$function$
CREATE OR REPLACE FUNCTION pg_catalog.has_sequence_privilege(oid, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$has_sequence_privilege_id$function$
]]></string>
			<comment><![CDATA[user privilege on sequence by username, seq name]]></comment>
		</function>
		<function name="has_sequence_privilege_005" id="Function_11289243" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.has_sequence_privilege(name, text, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$has_sequence_privilege_name_name$function$
CREATE OR REPLACE FUNCTION pg_catalog.has_sequence_privilege(name, oid, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$has_sequence_privilege_name_id$function$
CREATE OR REPLACE FUNCTION pg_catalog.has_sequence_privilege(oid, text, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$has_sequence_privilege_id_name$function$
CREATE OR REPLACE FUNCTION pg_catalog.has_sequence_privilege(oid, oid, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$has_sequence_privilege_id_id$function$
CREATE OR REPLACE FUNCTION pg_catalog.has_sequence_privilege(text, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$has_sequence_privilege_name$function$
CREATE OR REPLACE FUNCTION pg_catalog.has_sequence_privilege(oid, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$has_sequence_privilege_id$function$
]]></string>
			<comment><![CDATA[user privilege on sequence by username, seq name]]></comment>
		</function>
		<function name="has_server_privilege" id="Function_284d35d5" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.has_server_privilege(name, text, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$has_server_privilege_name_name$function$
CREATE OR REPLACE FUNCTION pg_catalog.has_server_privilege(name, oid, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$has_server_privilege_name_id$function$
CREATE OR REPLACE FUNCTION pg_catalog.has_server_privilege(oid, text, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$has_server_privilege_id_name$function$
CREATE OR REPLACE FUNCTION pg_catalog.has_server_privilege(oid, oid, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$has_server_privilege_id_id$function$
CREATE OR REPLACE FUNCTION pg_catalog.has_server_privilege(text, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$has_server_privilege_name$function$
CREATE OR REPLACE FUNCTION pg_catalog.has_server_privilege(oid, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$has_server_privilege_id$function$
]]></string>
			<comment><![CDATA[user privilege on server by username, server name]]></comment>
		</function>
		<function name="has_server_privilege_001" id="Function_398d54e8" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.has_server_privilege(name, text, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$has_server_privilege_name_name$function$
CREATE OR REPLACE FUNCTION pg_catalog.has_server_privilege(name, oid, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$has_server_privilege_name_id$function$
CREATE OR REPLACE FUNCTION pg_catalog.has_server_privilege(oid, text, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$has_server_privilege_id_name$function$
CREATE OR REPLACE FUNCTION pg_catalog.has_server_privilege(oid, oid, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$has_server_privilege_id_id$function$
CREATE OR REPLACE FUNCTION pg_catalog.has_server_privilege(text, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$has_server_privilege_name$function$
CREATE OR REPLACE FUNCTION pg_catalog.has_server_privilege(oid, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$has_server_privilege_id$function$
]]></string>
			<comment><![CDATA[user privilege on server by username, server name]]></comment>
		</function>
		<function name="has_server_privilege_002" id="Function_2c3e688a" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.has_server_privilege(name, text, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$has_server_privilege_name_name$function$
CREATE OR REPLACE FUNCTION pg_catalog.has_server_privilege(name, oid, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$has_server_privilege_name_id$function$
CREATE OR REPLACE FUNCTION pg_catalog.has_server_privilege(oid, text, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$has_server_privilege_id_name$function$
CREATE OR REPLACE FUNCTION pg_catalog.has_server_privilege(oid, oid, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$has_server_privilege_id_id$function$
CREATE OR REPLACE FUNCTION pg_catalog.has_server_privilege(text, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$has_server_privilege_name$function$
CREATE OR REPLACE FUNCTION pg_catalog.has_server_privilege(oid, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$has_server_privilege_id$function$
]]></string>
			<comment><![CDATA[user privilege on server by username, server name]]></comment>
		</function>
		<function name="has_server_privilege_003" id="Function_deb5e8" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.has_server_privilege(name, text, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$has_server_privilege_name_name$function$
CREATE OR REPLACE FUNCTION pg_catalog.has_server_privilege(name, oid, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$has_server_privilege_name_id$function$
CREATE OR REPLACE FUNCTION pg_catalog.has_server_privilege(oid, text, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$has_server_privilege_id_name$function$
CREATE OR REPLACE FUNCTION pg_catalog.has_server_privilege(oid, oid, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$has_server_privilege_id_id$function$
CREATE OR REPLACE FUNCTION pg_catalog.has_server_privilege(text, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$has_server_privilege_name$function$
CREATE OR REPLACE FUNCTION pg_catalog.has_server_privilege(oid, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$has_server_privilege_id$function$
]]></string>
			<comment><![CDATA[user privilege on server by username, server name]]></comment>
		</function>
		<function name="has_server_privilege_004" id="Function_6b389a5" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.has_server_privilege(name, text, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$has_server_privilege_name_name$function$
CREATE OR REPLACE FUNCTION pg_catalog.has_server_privilege(name, oid, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$has_server_privilege_name_id$function$
CREATE OR REPLACE FUNCTION pg_catalog.has_server_privilege(oid, text, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$has_server_privilege_id_name$function$
CREATE OR REPLACE FUNCTION pg_catalog.has_server_privilege(oid, oid, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$has_server_privilege_id_id$function$
CREATE OR REPLACE FUNCTION pg_catalog.has_server_privilege(text, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$has_server_privilege_name$function$
CREATE OR REPLACE FUNCTION pg_catalog.has_server_privilege(oid, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$has_server_privilege_id$function$
]]></string>
			<comment><![CDATA[user privilege on server by username, server name]]></comment>
		</function>
		<function name="has_server_privilege_005" id="Function_c4e9583" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.has_server_privilege(name, text, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$has_server_privilege_name_name$function$
CREATE OR REPLACE FUNCTION pg_catalog.has_server_privilege(name, oid, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$has_server_privilege_name_id$function$
CREATE OR REPLACE FUNCTION pg_catalog.has_server_privilege(oid, text, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$has_server_privilege_id_name$function$
CREATE OR REPLACE FUNCTION pg_catalog.has_server_privilege(oid, oid, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$has_server_privilege_id_id$function$
CREATE OR REPLACE FUNCTION pg_catalog.has_server_privilege(text, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$has_server_privilege_name$function$
CREATE OR REPLACE FUNCTION pg_catalog.has_server_privilege(oid, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$has_server_privilege_id$function$
]]></string>
			<comment><![CDATA[user privilege on server by username, server name]]></comment>
		</function>
		<function name="has_table_privilege" id="Function_20ff7690" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.has_table_privilege(name, text, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$has_table_privilege_name_name$function$
CREATE OR REPLACE FUNCTION pg_catalog.has_table_privilege(name, oid, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$has_table_privilege_name_id$function$
CREATE OR REPLACE FUNCTION pg_catalog.has_table_privilege(oid, text, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$has_table_privilege_id_name$function$
CREATE OR REPLACE FUNCTION pg_catalog.has_table_privilege(oid, oid, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$has_table_privilege_id_id$function$
CREATE OR REPLACE FUNCTION pg_catalog.has_table_privilege(text, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$has_table_privilege_name$function$
CREATE OR REPLACE FUNCTION pg_catalog.has_table_privilege(oid, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$has_table_privilege_id$function$
]]></string>
			<comment><![CDATA[user privilege on relation by username, rel name]]></comment>
		</function>
		<function name="has_table_privilege_001" id="Function_35ab77b" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.has_table_privilege(name, text, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$has_table_privilege_name_name$function$
CREATE OR REPLACE FUNCTION pg_catalog.has_table_privilege(name, oid, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$has_table_privilege_name_id$function$
CREATE OR REPLACE FUNCTION pg_catalog.has_table_privilege(oid, text, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$has_table_privilege_id_name$function$
CREATE OR REPLACE FUNCTION pg_catalog.has_table_privilege(oid, oid, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$has_table_privilege_id_id$function$
CREATE OR REPLACE FUNCTION pg_catalog.has_table_privilege(text, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$has_table_privilege_name$function$
CREATE OR REPLACE FUNCTION pg_catalog.has_table_privilege(oid, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$has_table_privilege_id$function$
]]></string>
			<comment><![CDATA[user privilege on relation by username, rel name]]></comment>
		</function>
		<function name="has_table_privilege_002" id="Function_36e78cfe" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.has_table_privilege(name, text, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$has_table_privilege_name_name$function$
CREATE OR REPLACE FUNCTION pg_catalog.has_table_privilege(name, oid, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$has_table_privilege_name_id$function$
CREATE OR REPLACE FUNCTION pg_catalog.has_table_privilege(oid, text, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$has_table_privilege_id_name$function$
CREATE OR REPLACE FUNCTION pg_catalog.has_table_privilege(oid, oid, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$has_table_privilege_id_id$function$
CREATE OR REPLACE FUNCTION pg_catalog.has_table_privilege(text, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$has_table_privilege_name$function$
CREATE OR REPLACE FUNCTION pg_catalog.has_table_privilege(oid, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$has_table_privilege_id$function$
]]></string>
			<comment><![CDATA[user privilege on relation by username, rel name]]></comment>
		</function>
		<function name="has_table_privilege_003" id="Function_3040e054" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.has_table_privilege(name, text, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$has_table_privilege_name_name$function$
CREATE OR REPLACE FUNCTION pg_catalog.has_table_privilege(name, oid, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$has_table_privilege_name_id$function$
CREATE OR REPLACE FUNCTION pg_catalog.has_table_privilege(oid, text, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$has_table_privilege_id_name$function$
CREATE OR REPLACE FUNCTION pg_catalog.has_table_privilege(oid, oid, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$has_table_privilege_id_id$function$
CREATE OR REPLACE FUNCTION pg_catalog.has_table_privilege(text, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$has_table_privilege_name$function$
CREATE OR REPLACE FUNCTION pg_catalog.has_table_privilege(oid, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$has_table_privilege_id$function$
]]></string>
			<comment><![CDATA[user privilege on relation by username, rel name]]></comment>
		</function>
		<function name="has_table_privilege_004" id="Function_3467dd68" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.has_table_privilege(name, text, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$has_table_privilege_name_name$function$
CREATE OR REPLACE FUNCTION pg_catalog.has_table_privilege(name, oid, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$has_table_privilege_name_id$function$
CREATE OR REPLACE FUNCTION pg_catalog.has_table_privilege(oid, text, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$has_table_privilege_id_name$function$
CREATE OR REPLACE FUNCTION pg_catalog.has_table_privilege(oid, oid, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$has_table_privilege_id_id$function$
CREATE OR REPLACE FUNCTION pg_catalog.has_table_privilege(text, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$has_table_privilege_name$function$
CREATE OR REPLACE FUNCTION pg_catalog.has_table_privilege(oid, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$has_table_privilege_id$function$
]]></string>
			<comment><![CDATA[user privilege on relation by username, rel name]]></comment>
		</function>
		<function name="has_table_privilege_005" id="Function_182ba950" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.has_table_privilege(name, text, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$has_table_privilege_name_name$function$
CREATE OR REPLACE FUNCTION pg_catalog.has_table_privilege(name, oid, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$has_table_privilege_name_id$function$
CREATE OR REPLACE FUNCTION pg_catalog.has_table_privilege(oid, text, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$has_table_privilege_id_name$function$
CREATE OR REPLACE FUNCTION pg_catalog.has_table_privilege(oid, oid, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$has_table_privilege_id_id$function$
CREATE OR REPLACE FUNCTION pg_catalog.has_table_privilege(text, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$has_table_privilege_name$function$
CREATE OR REPLACE FUNCTION pg_catalog.has_table_privilege(oid, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$has_table_privilege_id$function$
]]></string>
			<comment><![CDATA[user privilege on relation by username, rel name]]></comment>
		</function>
		<function name="has_tablespace_privilege" id="Function_3647c62b" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.has_tablespace_privilege(name, text, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$has_tablespace_privilege_name_name$function$
CREATE OR REPLACE FUNCTION pg_catalog.has_tablespace_privilege(name, oid, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$has_tablespace_privilege_name_id$function$
CREATE OR REPLACE FUNCTION pg_catalog.has_tablespace_privilege(oid, text, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$has_tablespace_privilege_id_name$function$
CREATE OR REPLACE FUNCTION pg_catalog.has_tablespace_privilege(oid, oid, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$has_tablespace_privilege_id_id$function$
CREATE OR REPLACE FUNCTION pg_catalog.has_tablespace_privilege(text, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$has_tablespace_privilege_name$function$
CREATE OR REPLACE FUNCTION pg_catalog.has_tablespace_privilege(oid, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$has_tablespace_privilege_id$function$
]]></string>
			<comment><![CDATA[user privilege on tablespace by username, tablespace name]]></comment>
		</function>
		<function name="has_tablespace_privilege_001" id="Function_d4c72db" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.has_tablespace_privilege(name, text, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$has_tablespace_privilege_name_name$function$
CREATE OR REPLACE FUNCTION pg_catalog.has_tablespace_privilege(name, oid, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$has_tablespace_privilege_name_id$function$
CREATE OR REPLACE FUNCTION pg_catalog.has_tablespace_privilege(oid, text, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$has_tablespace_privilege_id_name$function$
CREATE OR REPLACE FUNCTION pg_catalog.has_tablespace_privilege(oid, oid, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$has_tablespace_privilege_id_id$function$
CREATE OR REPLACE FUNCTION pg_catalog.has_tablespace_privilege(text, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$has_tablespace_privilege_name$function$
CREATE OR REPLACE FUNCTION pg_catalog.has_tablespace_privilege(oid, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$has_tablespace_privilege_id$function$
]]></string>
			<comment><![CDATA[user privilege on tablespace by username, tablespace name]]></comment>
		</function>
		<function name="has_tablespace_privilege_002" id="Function_20aa3687" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.has_tablespace_privilege(name, text, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$has_tablespace_privilege_name_name$function$
CREATE OR REPLACE FUNCTION pg_catalog.has_tablespace_privilege(name, oid, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$has_tablespace_privilege_name_id$function$
CREATE OR REPLACE FUNCTION pg_catalog.has_tablespace_privilege(oid, text, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$has_tablespace_privilege_id_name$function$
CREATE OR REPLACE FUNCTION pg_catalog.has_tablespace_privilege(oid, oid, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$has_tablespace_privilege_id_id$function$
CREATE OR REPLACE FUNCTION pg_catalog.has_tablespace_privilege(text, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$has_tablespace_privilege_name$function$
CREATE OR REPLACE FUNCTION pg_catalog.has_tablespace_privilege(oid, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$has_tablespace_privilege_id$function$
]]></string>
			<comment><![CDATA[user privilege on tablespace by username, tablespace name]]></comment>
		</function>
		<function name="has_tablespace_privilege_003" id="Function_38bc6c53" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.has_tablespace_privilege(name, text, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$has_tablespace_privilege_name_name$function$
CREATE OR REPLACE FUNCTION pg_catalog.has_tablespace_privilege(name, oid, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$has_tablespace_privilege_name_id$function$
CREATE OR REPLACE FUNCTION pg_catalog.has_tablespace_privilege(oid, text, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$has_tablespace_privilege_id_name$function$
CREATE OR REPLACE FUNCTION pg_catalog.has_tablespace_privilege(oid, oid, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$has_tablespace_privilege_id_id$function$
CREATE OR REPLACE FUNCTION pg_catalog.has_tablespace_privilege(text, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$has_tablespace_privilege_name$function$
CREATE OR REPLACE FUNCTION pg_catalog.has_tablespace_privilege(oid, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$has_tablespace_privilege_id$function$
]]></string>
			<comment><![CDATA[user privilege on tablespace by username, tablespace name]]></comment>
		</function>
		<function name="has_tablespace_privilege_004" id="Function_11ff99f5" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.has_tablespace_privilege(name, text, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$has_tablespace_privilege_name_name$function$
CREATE OR REPLACE FUNCTION pg_catalog.has_tablespace_privilege(name, oid, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$has_tablespace_privilege_name_id$function$
CREATE OR REPLACE FUNCTION pg_catalog.has_tablespace_privilege(oid, text, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$has_tablespace_privilege_id_name$function$
CREATE OR REPLACE FUNCTION pg_catalog.has_tablespace_privilege(oid, oid, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$has_tablespace_privilege_id_id$function$
CREATE OR REPLACE FUNCTION pg_catalog.has_tablespace_privilege(text, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$has_tablespace_privilege_name$function$
CREATE OR REPLACE FUNCTION pg_catalog.has_tablespace_privilege(oid, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$has_tablespace_privilege_id$function$
]]></string>
			<comment><![CDATA[user privilege on tablespace by username, tablespace name]]></comment>
		</function>
		<function name="has_tablespace_privilege_005" id="Function_2ee08c65" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.has_tablespace_privilege(name, text, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$has_tablespace_privilege_name_name$function$
CREATE OR REPLACE FUNCTION pg_catalog.has_tablespace_privilege(name, oid, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$has_tablespace_privilege_name_id$function$
CREATE OR REPLACE FUNCTION pg_catalog.has_tablespace_privilege(oid, text, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$has_tablespace_privilege_id_name$function$
CREATE OR REPLACE FUNCTION pg_catalog.has_tablespace_privilege(oid, oid, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$has_tablespace_privilege_id_id$function$
CREATE OR REPLACE FUNCTION pg_catalog.has_tablespace_privilege(text, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$has_tablespace_privilege_name$function$
CREATE OR REPLACE FUNCTION pg_catalog.has_tablespace_privilege(oid, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$has_tablespace_privilege_id$function$
]]></string>
			<comment><![CDATA[user privilege on tablespace by username, tablespace name]]></comment>
		</function>
		<function name="has_type_privilege" id="Function_4bc0f6c" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.has_type_privilege(name, text, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$has_type_privilege_name_name$function$
CREATE OR REPLACE FUNCTION pg_catalog.has_type_privilege(name, oid, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$has_type_privilege_name_id$function$
CREATE OR REPLACE FUNCTION pg_catalog.has_type_privilege(oid, text, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$has_type_privilege_id_name$function$
CREATE OR REPLACE FUNCTION pg_catalog.has_type_privilege(oid, oid, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$has_type_privilege_id_id$function$
CREATE OR REPLACE FUNCTION pg_catalog.has_type_privilege(text, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$has_type_privilege_name$function$
CREATE OR REPLACE FUNCTION pg_catalog.has_type_privilege(oid, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$has_type_privilege_id$function$
]]></string>
			<comment><![CDATA[user privilege on type by username, type name]]></comment>
		</function>
		<function name="has_type_privilege_001" id="Function_c18d510" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.has_type_privilege(name, text, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$has_type_privilege_name_name$function$
CREATE OR REPLACE FUNCTION pg_catalog.has_type_privilege(name, oid, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$has_type_privilege_name_id$function$
CREATE OR REPLACE FUNCTION pg_catalog.has_type_privilege(oid, text, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$has_type_privilege_id_name$function$
CREATE OR REPLACE FUNCTION pg_catalog.has_type_privilege(oid, oid, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$has_type_privilege_id_id$function$
CREATE OR REPLACE FUNCTION pg_catalog.has_type_privilege(text, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$has_type_privilege_name$function$
CREATE OR REPLACE FUNCTION pg_catalog.has_type_privilege(oid, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$has_type_privilege_id$function$
]]></string>
			<comment><![CDATA[user privilege on type by username, type name]]></comment>
		</function>
		<function name="has_type_privilege_002" id="Function_e464fdc" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.has_type_privilege(name, text, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$has_type_privilege_name_name$function$
CREATE OR REPLACE FUNCTION pg_catalog.has_type_privilege(name, oid, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$has_type_privilege_name_id$function$
CREATE OR REPLACE FUNCTION pg_catalog.has_type_privilege(oid, text, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$has_type_privilege_id_name$function$
CREATE OR REPLACE FUNCTION pg_catalog.has_type_privilege(oid, oid, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$has_type_privilege_id_id$function$
CREATE OR REPLACE FUNCTION pg_catalog.has_type_privilege(text, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$has_type_privilege_name$function$
CREATE OR REPLACE FUNCTION pg_catalog.has_type_privilege(oid, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$has_type_privilege_id$function$
]]></string>
			<comment><![CDATA[user privilege on type by username, type name]]></comment>
		</function>
		<function name="has_type_privilege_003" id="Function_38e0eae" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.has_type_privilege(name, text, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$has_type_privilege_name_name$function$
CREATE OR REPLACE FUNCTION pg_catalog.has_type_privilege(name, oid, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$has_type_privilege_name_id$function$
CREATE OR REPLACE FUNCTION pg_catalog.has_type_privilege(oid, text, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$has_type_privilege_id_name$function$
CREATE OR REPLACE FUNCTION pg_catalog.has_type_privilege(oid, oid, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$has_type_privilege_id_id$function$
CREATE OR REPLACE FUNCTION pg_catalog.has_type_privilege(text, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$has_type_privilege_name$function$
CREATE OR REPLACE FUNCTION pg_catalog.has_type_privilege(oid, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$has_type_privilege_id$function$
]]></string>
			<comment><![CDATA[user privilege on type by username, type name]]></comment>
		</function>
		<function name="has_type_privilege_004" id="Function_14510c9d" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.has_type_privilege(name, text, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$has_type_privilege_name_name$function$
CREATE OR REPLACE FUNCTION pg_catalog.has_type_privilege(name, oid, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$has_type_privilege_name_id$function$
CREATE OR REPLACE FUNCTION pg_catalog.has_type_privilege(oid, text, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$has_type_privilege_id_name$function$
CREATE OR REPLACE FUNCTION pg_catalog.has_type_privilege(oid, oid, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$has_type_privilege_id_id$function$
CREATE OR REPLACE FUNCTION pg_catalog.has_type_privilege(text, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$has_type_privilege_name$function$
CREATE OR REPLACE FUNCTION pg_catalog.has_type_privilege(oid, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$has_type_privilege_id$function$
]]></string>
			<comment><![CDATA[user privilege on type by username, type name]]></comment>
		</function>
		<function name="has_type_privilege_005" id="Function_1023ebc4" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.has_type_privilege(name, text, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$has_type_privilege_name_name$function$
CREATE OR REPLACE FUNCTION pg_catalog.has_type_privilege(name, oid, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$has_type_privilege_name_id$function$
CREATE OR REPLACE FUNCTION pg_catalog.has_type_privilege(oid, text, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$has_type_privilege_id_name$function$
CREATE OR REPLACE FUNCTION pg_catalog.has_type_privilege(oid, oid, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$has_type_privilege_id_id$function$
CREATE OR REPLACE FUNCTION pg_catalog.has_type_privilege(text, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$has_type_privilege_name$function$
CREATE OR REPLACE FUNCTION pg_catalog.has_type_privilege(oid, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$has_type_privilege_id$function$
]]></string>
			<comment><![CDATA[user privilege on type by username, type name]]></comment>
		</function>
		<function name="hash_aclitem" id="Function_6b94285" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.hash_aclitem(aclitem)
 RETURNS integer
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$hash_aclitem$function$
]]></string>
			<comment><![CDATA[hash]]></comment>
		</function>
		<function name="hash_array" id="Function_1bd45440" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.hash_array(anyarray)
 RETURNS integer
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$hash_array$function$
]]></string>
			<comment><![CDATA[hash]]></comment>
		</function>
		<function name="hash_numeric" id="Function_9080818" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.hash_numeric(numeric)
 RETURNS integer
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$hash_numeric$function$
]]></string>
			<comment><![CDATA[hash]]></comment>
		</function>
		<function name="hash_range" id="Function_12a76290" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.hash_range(anyrange)
 RETURNS integer
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$hash_range$function$
]]></string>
			<comment><![CDATA[hash a range]]></comment>
		</function>
		<function name="hashbpchar" id="Function_e587069" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.hashbpchar(character)
 RETURNS integer
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$hashbpchar$function$
]]></string>
			<comment><![CDATA[hash]]></comment>
		</function>
		<function name="hashchar" id="Function_2fd4701a" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.hashchar("char")
 RETURNS integer
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$hashchar$function$
]]></string>
			<comment><![CDATA[hash]]></comment>
		</function>
		<function name="hashenum" id="Function_18ce4c8f" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.hashenum(anyenum)
 RETURNS integer
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$hashenum$function$
]]></string>
			<comment><![CDATA[hash]]></comment>
		</function>
		<function name="hashfloat4" id="Function_8aaf5db" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.hashfloat4(real)
 RETURNS integer
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$hashfloat4$function$
]]></string>
			<comment><![CDATA[hash]]></comment>
		</function>
		<function name="hashfloat8" id="Function_25a32940" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.hashfloat8(double precision)
 RETURNS integer
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$hashfloat8$function$
]]></string>
			<comment><![CDATA[hash]]></comment>
		</function>
		<function name="hashhandler" id="Function_2840ccf8" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.hashhandler(internal)
 RETURNS index_am_handler
 LANGUAGE internal
 PARALLEL SAFE STRICT
AS $function$hashhandler$function$
]]></string>
			<comment><![CDATA[hash index access method handler]]></comment>
		</function>
		<function name="hashinet" id="Function_2a0e4251" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.hashinet(inet)
 RETURNS integer
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$hashinet$function$
]]></string>
			<comment><![CDATA[hash]]></comment>
		</function>
		<function name="hashint2" id="Function_2ad5bd82" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.hashint2(smallint)
 RETURNS integer
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$hashint2$function$
]]></string>
			<comment><![CDATA[hash]]></comment>
		</function>
		<function name="hashint2vector" id="Function_2910d1bf" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.hashint2vector(int2vector)
 RETURNS integer
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$hashint2vector$function$
]]></string>
			<comment><![CDATA[hash]]></comment>
		</function>
		<function name="hashint4" id="Function_2fccca88" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.hashint4(integer)
 RETURNS integer
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$hashint4$function$
]]></string>
			<comment><![CDATA[hash]]></comment>
		</function>
		<function name="hashint8" id="Function_491d861" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.hashint8(bigint)
 RETURNS integer
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$hashint8$function$
]]></string>
			<comment><![CDATA[hash]]></comment>
		</function>
		<function name="hashmacaddr" id="Function_b112021" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.hashmacaddr(macaddr)
 RETURNS integer
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$hashmacaddr$function$
]]></string>
			<comment><![CDATA[hash]]></comment>
		</function>
		<function name="hashname" id="Function_e2a78c1" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.hashname(name)
 RETURNS integer
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$hashname$function$
]]></string>
			<comment><![CDATA[hash]]></comment>
		</function>
		<function name="hashoid" id="Function_18e3d35f" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.hashoid(oid)
 RETURNS integer
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$hashoid$function$
]]></string>
			<comment><![CDATA[hash]]></comment>
		</function>
		<function name="hashoidvector" id="Function_8d849bb" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.hashoidvector(oidvector)
 RETURNS integer
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$hashoidvector$function$
]]></string>
			<comment><![CDATA[hash]]></comment>
		</function>
		<function name="hashtext" id="Function_22d6e054" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.hashtext(text)
 RETURNS integer
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$hashtext$function$
]]></string>
			<comment><![CDATA[hash]]></comment>
		</function>
		<function name="hashvarlena" id="Function_12a440f" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.hashvarlena(internal)
 RETURNS integer
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$hashvarlena$function$
]]></string>
			<comment><![CDATA[hash]]></comment>
		</function>
		<function name="height" id="Function_c5c4d7e" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.height(box)
 RETURNS double precision
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$box_height$function$
]]></string>
			<comment><![CDATA[box height]]></comment>
		</function>
		<function name="host" id="Function_28fc11af" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.host(inet)
 RETURNS text
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$network_host$function$
]]></string>
			<comment><![CDATA[show address octets only]]></comment>
		</function>
		<function name="hostmask" id="Function_103f62c9" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.hostmask(inet)
 RETURNS inet
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$network_hostmask$function$
]]></string>
			<comment><![CDATA[hostmask of address]]></comment>
		</function>
		<function name="iclikejoinsel" id="Function_2a1320b3" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.iclikejoinsel(internal, oid, internal, smallint, internal)
 RETURNS double precision
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$iclikejoinsel$function$
]]></string>
			<comment><![CDATA[join selectivity of ILIKE]]></comment>
		</function>
		<function name="iclikesel" id="Function_2b04813f" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.iclikesel(internal, oid, internal, integer)
 RETURNS double precision
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$iclikesel$function$
]]></string>
			<comment><![CDATA[restriction selectivity of ILIKE]]></comment>
		</function>
		<function name="icnlikejoinsel" id="Function_3685e6ef" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.icnlikejoinsel(internal, oid, internal, smallint, internal)
 RETURNS double precision
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$icnlikejoinsel$function$
]]></string>
			<comment><![CDATA[join selectivity of NOT ILIKE]]></comment>
		</function>
		<function name="icnlikesel" id="Function_31964ae3" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.icnlikesel(internal, oid, internal, integer)
 RETURNS double precision
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$icnlikesel$function$
]]></string>
			<comment><![CDATA[restriction selectivity of NOT ILIKE]]></comment>
		</function>
		<function name="icregexeqjoinsel" id="Function_356ce159" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.icregexeqjoinsel(internal, oid, internal, smallint, internal)
 RETURNS double precision
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$icregexeqjoinsel$function$
]]></string>
			<comment><![CDATA[join selectivity of case-insensitive regex match]]></comment>
		</function>
		<function name="icregexeqsel" id="Function_128d0f41" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.icregexeqsel(internal, oid, internal, integer)
 RETURNS double precision
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$icregexeqsel$function$
]]></string>
			<comment><![CDATA[restriction selectivity of case-insensitive regex match]]></comment>
		</function>
		<function name="icregexnejoinsel" id="Function_790bcb7" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.icregexnejoinsel(internal, oid, internal, smallint, internal)
 RETURNS double precision
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$icregexnejoinsel$function$
]]></string>
			<comment><![CDATA[join selectivity of case-insensitive regex non-match]]></comment>
		</function>
		<function name="icregexnesel" id="Function_2413209b" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.icregexnesel(internal, oid, internal, integer)
 RETURNS double precision
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$icregexnesel$function$
]]></string>
			<comment><![CDATA[restriction selectivity of case-insensitive regex non-match]]></comment>
		</function>
		<function name="index_am_handler_in" id="Function_31586192" isSystem="false" >
			<comment><![CDATA[I/O]]></comment>
		</function>
		<function name="index_am_handler_out" id="Function_33a669c7" isSystem="false" >
			<comment><![CDATA[I/O]]></comment>
		</function>
		<function name="inet_client_addr" id="Function_1cfa91de" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.inet_client_addr()
 RETURNS inet
 LANGUAGE internal
 STABLE PARALLEL RESTRICTED
AS $function$inet_client_addr$function$
]]></string>
			<comment><![CDATA[inet address of the client]]></comment>
		</function>
		<function name="inet_client_port" id="Function_104634f4" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.inet_client_port()
 RETURNS integer
 LANGUAGE internal
 STABLE PARALLEL RESTRICTED
AS $function$inet_client_port$function$
]]></string>
			<comment><![CDATA[client's port number for this connection]]></comment>
		</function>
		<function name="inet_gist_compress" id="Function_2db3c504" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.inet_gist_compress(internal)
 RETURNS internal
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$inet_gist_compress$function$
]]></string>
			<comment><![CDATA[GiST support]]></comment>
		</function>
		<function name="inet_gist_consistent" id="Function_35849472" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.inet_gist_consistent(internal, inet, smallint, oid, internal)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$inet_gist_consistent$function$
]]></string>
			<comment><![CDATA[GiST support]]></comment>
		</function>
		<function name="inet_gist_decompress" id="Function_432b39f" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.inet_gist_decompress(internal)
 RETURNS internal
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$inet_gist_decompress$function$
]]></string>
			<comment><![CDATA[GiST support]]></comment>
		</function>
		<function name="inet_gist_fetch" id="Function_7e0652c" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.inet_gist_fetch(internal)
 RETURNS internal
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$inet_gist_fetch$function$
]]></string>
			<comment><![CDATA[GiST support]]></comment>
		</function>
		<function name="inet_gist_penalty" id="Function_1235056c" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.inet_gist_penalty(internal, internal, internal)
 RETURNS internal
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$inet_gist_penalty$function$
]]></string>
			<comment><![CDATA[GiST support]]></comment>
		</function>
		<function name="inet_gist_picksplit" id="Function_2c18a4a9" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.inet_gist_picksplit(internal, internal)
 RETURNS internal
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$inet_gist_picksplit$function$
]]></string>
			<comment><![CDATA[GiST support]]></comment>
		</function>
		<function name="inet_gist_same" id="Function_1fe1350c" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.inet_gist_same(inet, inet, internal)
 RETURNS internal
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$inet_gist_same$function$
]]></string>
			<comment><![CDATA[GiST support]]></comment>
		</function>
		<function name="inet_gist_union" id="Function_3abc4918" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.inet_gist_union(internal, internal)
 RETURNS inet
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$inet_gist_union$function$
]]></string>
			<comment><![CDATA[GiST support]]></comment>
		</function>
		<function name="inet_in" id="Function_241c2a4" isSystem="false" >
			<comment><![CDATA[I/O]]></comment>
		</function>
		<function name="inet_merge" id="Function_369b7395" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.inet_merge(inet, inet)
 RETURNS cidr
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$inet_merge$function$
]]></string>
			<comment><![CDATA[the smallest network which includes both of the given networks]]></comment>
		</function>
		<function name="inet_out" id="Function_3a7e3b53" isSystem="false" >
			<comment><![CDATA[I/O]]></comment>
		</function>
		<function name="inet_recv" id="Function_2fde4a4e" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.inet_recv(internal)
 RETURNS inet
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$inet_recv$function$
]]></string>
			<comment><![CDATA[I/O]]></comment>
		</function>
		<function name="inet_same_family" id="Function_13f6756e" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.inet_same_family(inet, inet)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$inet_same_family$function$
]]></string>
			<comment><![CDATA[are the addresses from the same family?]]></comment>
		</function>
		<function name="inet_send" id="Function_38a42dc6" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.inet_send(inet)
 RETURNS bytea
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$inet_send$function$
]]></string>
			<comment><![CDATA[I/O]]></comment>
		</function>
		<function name="inet_server_addr" id="Function_34acafdd" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.inet_server_addr()
 RETURNS inet
 LANGUAGE internal
 STABLE PARALLEL SAFE
AS $function$inet_server_addr$function$
]]></string>
			<comment><![CDATA[inet address of the server]]></comment>
		</function>
		<function name="inet_server_port" id="Function_21ba5ffc" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.inet_server_port()
 RETURNS integer
 LANGUAGE internal
 STABLE PARALLEL SAFE
AS $function$inet_server_port$function$
]]></string>
			<comment><![CDATA[server's port number for this connection]]></comment>
		</function>
		<function name="inetand" id="Function_b8c266d" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.inetand(inet, inet)
 RETURNS inet
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$inetand$function$
]]></string>
			<comment><![CDATA[implementation of & operator]]></comment>
		</function>
		<function name="inetmi" id="Function_94b5e0b" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.inetmi(inet, inet)
 RETURNS bigint
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$inetmi$function$
]]></string>
			<comment><![CDATA[implementation of - operator]]></comment>
		</function>
		<function name="inetmi_int8" id="Function_9e8fea5" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.inetmi_int8(inet, bigint)
 RETURNS inet
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$inetmi_int8$function$
]]></string>
			<comment><![CDATA[implementation of - operator]]></comment>
		</function>
		<function name="inetnot" id="Function_389ba381" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.inetnot(inet)
 RETURNS inet
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$inetnot$function$
]]></string>
			<comment><![CDATA[implementation of ~ operator]]></comment>
		</function>
		<function name="inetor" id="Function_16cd48c4" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.inetor(inet, inet)
 RETURNS inet
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$inetor$function$
]]></string>
			<comment><![CDATA[implementation of | operator]]></comment>
		</function>
		<function name="inetpl" id="Function_b8c347e" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.inetpl(inet, bigint)
 RETURNS inet
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$inetpl$function$
]]></string>
			<comment><![CDATA[implementation of + operator]]></comment>
		</function>
		<function name="initcap" id="Function_2eafd8a2" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.initcap(text)
 RETURNS text
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$initcap$function$
]]></string>
			<comment><![CDATA[capitalize each word]]></comment>
		</function>
		<function name="int2" id="Function_1196b067" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.int2(double precision)
 RETURNS smallint
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$dtoi2$function$
CREATE OR REPLACE FUNCTION pg_catalog.int2(real)
 RETURNS smallint
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$ftoi2$function$
CREATE OR REPLACE FUNCTION pg_catalog.int2(integer)
 RETURNS smallint
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$i4toi2$function$
CREATE OR REPLACE FUNCTION pg_catalog.int2(bigint)
 RETURNS smallint
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$int82$function$
CREATE OR REPLACE FUNCTION pg_catalog.int2(numeric)
 RETURNS smallint
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$numeric_int2$function$
]]></string>
			<comment><![CDATA[convert numeric to int2]]></comment>
		</function>
		<function name="int24div" id="Function_26d9ca2b" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.int24div(smallint, integer)
 RETURNS integer
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$int24div$function$
]]></string>
			<comment><![CDATA[implementation of / operator]]></comment>
		</function>
		<function name="int24eq" id="Function_1639a2b7" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.int24eq(smallint, integer)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT LEAKPROOF
AS $function$int24eq$function$
]]></string>
			<comment><![CDATA[implementation of = operator]]></comment>
		</function>
		<function name="int24ge" id="Function_4413db" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.int24ge(smallint, integer)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT LEAKPROOF
AS $function$int24ge$function$
]]></string>
			<comment><![CDATA[implementation of >= operator]]></comment>
		</function>
		<function name="int24gt" id="Function_3aeb513b" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.int24gt(smallint, integer)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT LEAKPROOF
AS $function$int24gt$function$
]]></string>
			<comment><![CDATA[implementation of > operator]]></comment>
		</function>
		<function name="int24le" id="Function_2e401e17" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.int24le(smallint, integer)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT LEAKPROOF
AS $function$int24le$function$
]]></string>
			<comment><![CDATA[implementation of <= operator]]></comment>
		</function>
		<function name="int24lt" id="Function_2cc6f710" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.int24lt(smallint, integer)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT LEAKPROOF
AS $function$int24lt$function$
]]></string>
			<comment><![CDATA[implementation of < operator]]></comment>
		</function>
		<function name="int24mi" id="Function_23dc349a" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.int24mi(smallint, integer)
 RETURNS integer
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$int24mi$function$
]]></string>
			<comment><![CDATA[implementation of - operator]]></comment>
		</function>
		<function name="int24mul" id="Function_57dd185" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.int24mul(smallint, integer)
 RETURNS integer
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$int24mul$function$
]]></string>
			<comment><![CDATA[implementation of * operator]]></comment>
		</function>
		<function name="int24ne" id="Function_2c35f761" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.int24ne(smallint, integer)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT LEAKPROOF
AS $function$int24ne$function$
]]></string>
			<comment><![CDATA[implementation of <> operator]]></comment>
		</function>
		<function name="int24pl" id="Function_39e243a4" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.int24pl(smallint, integer)
 RETURNS integer
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$int24pl$function$
]]></string>
			<comment><![CDATA[implementation of + operator]]></comment>
		</function>
		<function name="int28div" id="Function_ecbe578" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.int28div(smallint, bigint)
 RETURNS bigint
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$int28div$function$
]]></string>
			<comment><![CDATA[implementation of / operator]]></comment>
		</function>
		<function name="int28eq" id="Function_c677315" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.int28eq(smallint, bigint)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT LEAKPROOF
AS $function$int28eq$function$
]]></string>
			<comment><![CDATA[implementation of = operator]]></comment>
		</function>
		<function name="int28ge" id="Function_2f3d8a8f" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.int28ge(smallint, bigint)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT LEAKPROOF
AS $function$int28ge$function$
]]></string>
			<comment><![CDATA[implementation of >= operator]]></comment>
		</function>
		<function name="int28gt" id="Function_219c269" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.int28gt(smallint, bigint)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT LEAKPROOF
AS $function$int28gt$function$
]]></string>
			<comment><![CDATA[implementation of > operator]]></comment>
		</function>
		<function name="int28le" id="Function_6dd185c" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.int28le(smallint, bigint)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT LEAKPROOF
AS $function$int28le$function$
]]></string>
			<comment><![CDATA[implementation of <= operator]]></comment>
		</function>
		<function name="int28lt" id="Function_351c3755" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.int28lt(smallint, bigint)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT LEAKPROOF
AS $function$int28lt$function$
]]></string>
			<comment><![CDATA[implementation of < operator]]></comment>
		</function>
		<function name="int28mi" id="Function_3b6b193e" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.int28mi(smallint, bigint)
 RETURNS bigint
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$int28mi$function$
]]></string>
			<comment><![CDATA[implementation of - operator]]></comment>
		</function>
		<function name="int28mul" id="Function_ac05885" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.int28mul(smallint, bigint)
 RETURNS bigint
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$int28mul$function$
]]></string>
			<comment><![CDATA[implementation of * operator]]></comment>
		</function>
		<function name="int28ne" id="Function_16235a55" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.int28ne(smallint, bigint)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT LEAKPROOF
AS $function$int28ne$function$
]]></string>
			<comment><![CDATA[implementation of <> operator]]></comment>
		</function>
		<function name="int28pl" id="Function_2a56c2fd" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.int28pl(smallint, bigint)
 RETURNS bigint
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$int28pl$function$
]]></string>
			<comment><![CDATA[implementation of + operator]]></comment>
		</function>
		<function name="int2_001" id="Function_17b098e3" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.int2(double precision)
 RETURNS smallint
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$dtoi2$function$
CREATE OR REPLACE FUNCTION pg_catalog.int2(real)
 RETURNS smallint
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$ftoi2$function$
CREATE OR REPLACE FUNCTION pg_catalog.int2(integer)
 RETURNS smallint
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$i4toi2$function$
CREATE OR REPLACE FUNCTION pg_catalog.int2(bigint)
 RETURNS smallint
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$int82$function$
CREATE OR REPLACE FUNCTION pg_catalog.int2(numeric)
 RETURNS smallint
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$numeric_int2$function$
]]></string>
			<comment><![CDATA[convert numeric to int2]]></comment>
		</function>
		<function name="int2_002" id="Function_198b5ebb" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.int2(double precision)
 RETURNS smallint
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$dtoi2$function$
CREATE OR REPLACE FUNCTION pg_catalog.int2(real)
 RETURNS smallint
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$ftoi2$function$
CREATE OR REPLACE FUNCTION pg_catalog.int2(integer)
 RETURNS smallint
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$i4toi2$function$
CREATE OR REPLACE FUNCTION pg_catalog.int2(bigint)
 RETURNS smallint
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$int82$function$
CREATE OR REPLACE FUNCTION pg_catalog.int2(numeric)
 RETURNS smallint
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$numeric_int2$function$
]]></string>
			<comment><![CDATA[convert numeric to int2]]></comment>
		</function>
		<function name="int2_003" id="Function_151f34a6" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.int2(double precision)
 RETURNS smallint
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$dtoi2$function$
CREATE OR REPLACE FUNCTION pg_catalog.int2(real)
 RETURNS smallint
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$ftoi2$function$
CREATE OR REPLACE FUNCTION pg_catalog.int2(integer)
 RETURNS smallint
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$i4toi2$function$
CREATE OR REPLACE FUNCTION pg_catalog.int2(bigint)
 RETURNS smallint
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$int82$function$
CREATE OR REPLACE FUNCTION pg_catalog.int2(numeric)
 RETURNS smallint
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$numeric_int2$function$
]]></string>
			<comment><![CDATA[convert numeric to int2]]></comment>
		</function>
		<function name="int2_004" id="Function_2d79816a" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.int2(double precision)
 RETURNS smallint
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$dtoi2$function$
CREATE OR REPLACE FUNCTION pg_catalog.int2(real)
 RETURNS smallint
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$ftoi2$function$
CREATE OR REPLACE FUNCTION pg_catalog.int2(integer)
 RETURNS smallint
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$i4toi2$function$
CREATE OR REPLACE FUNCTION pg_catalog.int2(bigint)
 RETURNS smallint
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$int82$function$
CREATE OR REPLACE FUNCTION pg_catalog.int2(numeric)
 RETURNS smallint
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$numeric_int2$function$
]]></string>
			<comment><![CDATA[convert numeric to int2]]></comment>
		</function>
		<function name="int2_accum" id="Function_29ad3a5c" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.int2_accum(internal, smallint)
 RETURNS internal
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE
AS $function$int2_accum$function$
]]></string>
			<comment><![CDATA[aggregate transition function]]></comment>
		</function>
		<function name="int2_accum_inv" id="Function_2e617d9a" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.int2_accum_inv(internal, smallint)
 RETURNS internal
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE
AS $function$int2_accum_inv$function$
]]></string>
			<comment><![CDATA[aggregate transition function]]></comment>
		</function>
		<function name="int2_avg_accum" id="Function_541d11" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.int2_avg_accum(bigint[], smallint)
 RETURNS bigint[]
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$int2_avg_accum$function$
]]></string>
			<comment><![CDATA[aggregate transition function]]></comment>
		</function>
		<function name="int2_avg_accum_inv" id="Function_19f5869f" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.int2_avg_accum_inv(bigint[], smallint)
 RETURNS bigint[]
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$int2_avg_accum_inv$function$
]]></string>
			<comment><![CDATA[aggregate transition function]]></comment>
		</function>
		<function name="int2_mul_cash" id="Function_2e4d523" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.int2_mul_cash(smallint, money)
 RETURNS money
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$int2_mul_cash$function$
]]></string>
			<comment><![CDATA[implementation of * operator]]></comment>
		</function>
		<function name="int2_sum" id="Function_10d7a2a1" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.int2_sum(bigint, smallint)
 RETURNS bigint
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE
AS $function$int2_sum$function$
]]></string>
			<comment><![CDATA[aggregate transition function]]></comment>
		</function>
		<function name="int2abs" id="Function_375d8665" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.int2abs(smallint)
 RETURNS smallint
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$int2abs$function$
]]></string>
			<comment><![CDATA[implementation of @ operator]]></comment>
		</function>
		<function name="int2and" id="Function_f32bd20" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.int2and(smallint, smallint)
 RETURNS smallint
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$int2and$function$
]]></string>
			<comment><![CDATA[implementation of & operator]]></comment>
		</function>
		<function name="int2div" id="Function_48dd285" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.int2div(smallint, smallint)
 RETURNS smallint
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$int2div$function$
]]></string>
			<comment><![CDATA[implementation of / operator]]></comment>
		</function>
		<function name="int2eq" id="Function_f7ccd2e" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.int2eq(smallint, smallint)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT LEAKPROOF
AS $function$int2eq$function$
]]></string>
			<comment><![CDATA[implementation of = operator]]></comment>
		</function>
		<function name="int2ge" id="Function_392ea883" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.int2ge(smallint, smallint)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT LEAKPROOF
AS $function$int2ge$function$
]]></string>
			<comment><![CDATA[implementation of >= operator]]></comment>
		</function>
		<function name="int2gt" id="Function_b34249c" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.int2gt(smallint, smallint)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT LEAKPROOF
AS $function$int2gt$function$
]]></string>
			<comment><![CDATA[implementation of > operator]]></comment>
		</function>
		<function name="int2in" id="Function_2d5c9c1" isSystem="false" >
			<comment><![CDATA[I/O]]></comment>
		</function>
		<function name="int2int4_sum" id="Function_2ecdde3e" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.int2int4_sum(bigint[])
 RETURNS bigint
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$int2int4_sum$function$
]]></string>
			<comment><![CDATA[aggregate final function]]></comment>
		</function>
		<function name="int2larger" id="Function_1fba478e" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.int2larger(smallint, smallint)
 RETURNS smallint
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$int2larger$function$
]]></string>
			<comment><![CDATA[larger of two]]></comment>
		</function>
		<function name="int2le" id="Function_5f9c6b9" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.int2le(smallint, smallint)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT LEAKPROOF
AS $function$int2le$function$
]]></string>
			<comment><![CDATA[implementation of <= operator]]></comment>
		</function>
		<function name="int2lt" id="Function_355bfb0" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.int2lt(smallint, smallint)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT LEAKPROOF
AS $function$int2lt$function$
]]></string>
			<comment><![CDATA[implementation of < operator]]></comment>
		</function>
		<function name="int2mi" id="Function_2c429b3c" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.int2mi(smallint, smallint)
 RETURNS smallint
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$int2mi$function$
]]></string>
			<comment><![CDATA[implementation of - operator]]></comment>
		</function>
		<function name="int2mod" id="Function_e1e25ac" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.int2mod(smallint, smallint)
 RETURNS smallint
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$int2mod$function$
]]></string>
			<comment><![CDATA[implementation of % operator]]></comment>
		</function>
		<function name="int2mul" id="Function_3a9fc9ce" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.int2mul(smallint, smallint)
 RETURNS smallint
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$int2mul$function$
]]></string>
			<comment><![CDATA[implementation of * operator]]></comment>
		</function>
		<function name="int2ne" id="Function_543543e" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.int2ne(smallint, smallint)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT LEAKPROOF
AS $function$int2ne$function$
]]></string>
			<comment><![CDATA[implementation of <> operator]]></comment>
		</function>
		<function name="int2not" id="Function_3056a40c" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.int2not(smallint)
 RETURNS smallint
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$int2not$function$
]]></string>
			<comment><![CDATA[implementation of ~ operator]]></comment>
		</function>
		<function name="int2or" id="Function_1f4e5209" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.int2or(smallint, smallint)
 RETURNS smallint
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$int2or$function$
]]></string>
			<comment><![CDATA[implementation of | operator]]></comment>
		</function>
		<function name="int2out" id="Function_185cdbec" isSystem="false" >
			<comment><![CDATA[I/O]]></comment>
		</function>
		<function name="int2pl" id="Function_1b0af49" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.int2pl(smallint, smallint)
 RETURNS smallint
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$int2pl$function$
]]></string>
			<comment><![CDATA[implementation of + operator]]></comment>
		</function>
		<function name="int2recv" id="Function_a6aae19" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.int2recv(internal)
 RETURNS smallint
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$int2recv$function$
]]></string>
			<comment><![CDATA[I/O]]></comment>
		</function>
		<function name="int2send" id="Function_b78d728" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.int2send(smallint)
 RETURNS bytea
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$int2send$function$
]]></string>
			<comment><![CDATA[I/O]]></comment>
		</function>
		<function name="int2shl" id="Function_12ab37da" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.int2shl(smallint, integer)
 RETURNS smallint
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$int2shl$function$
]]></string>
			<comment><![CDATA[implementation of << operator]]></comment>
		</function>
		<function name="int2shr" id="Function_13533ff9" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.int2shr(smallint, integer)
 RETURNS smallint
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$int2shr$function$
]]></string>
			<comment><![CDATA[implementation of >> operator]]></comment>
		</function>
		<function name="int2smaller" id="Function_e5968f7" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.int2smaller(smallint, smallint)
 RETURNS smallint
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$int2smaller$function$
]]></string>
			<comment><![CDATA[smaller of two]]></comment>
		</function>
		<function name="int2um" id="Function_1c48b855" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.int2um(smallint)
 RETURNS smallint
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$int2um$function$
]]></string>
			<comment><![CDATA[implementation of - operator]]></comment>
		</function>
		<function name="int2up" id="Function_1fbb70a0" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.int2up(smallint)
 RETURNS smallint
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$int2up$function$
]]></string>
			<comment><![CDATA[implementation of + operator]]></comment>
		</function>
		<function name="int2vectoreq" id="Function_115fb3ee" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.int2vectoreq(int2vector, int2vector)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$int2vectoreq$function$
]]></string>
			<comment><![CDATA[implementation of = operator]]></comment>
		</function>
		<function name="int2vectorin" id="Function_35940d3c" isSystem="false" >
			<comment><![CDATA[I/O]]></comment>
		</function>
		<function name="int2vectorout" id="Function_33635118" isSystem="false" >
			<comment><![CDATA[I/O]]></comment>
		</function>
		<function name="int2vectorrecv" id="Function_2bd7911b" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.int2vectorrecv(internal)
 RETURNS int2vector
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$int2vectorrecv$function$
]]></string>
			<comment><![CDATA[I/O]]></comment>
		</function>
		<function name="int2vectorsend" id="Function_10615a10" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.int2vectorsend(int2vector)
 RETURNS bytea
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$int2vectorsend$function$
]]></string>
			<comment><![CDATA[I/O]]></comment>
		</function>
		<function name="int2xor" id="Function_69f0205" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.int2xor(smallint, smallint)
 RETURNS smallint
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$int2xor$function$
]]></string>
			<comment><![CDATA[implementation of # operator]]></comment>
		</function>
		<function name="int4" id="Function_2d9e7b8c" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.int4("char")
 RETURNS integer
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$chartoi4$function$
CREATE OR REPLACE FUNCTION pg_catalog.int4(smallint)
 RETURNS integer
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$i2toi4$function$
CREATE OR REPLACE FUNCTION pg_catalog.int4(double precision)
 RETURNS integer
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$dtoi4$function$
CREATE OR REPLACE FUNCTION pg_catalog.int4(real)
 RETURNS integer
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$ftoi4$function$
CREATE OR REPLACE FUNCTION pg_catalog.int4(bigint)
 RETURNS integer
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$int84$function$
CREATE OR REPLACE FUNCTION pg_catalog.int4(bit)
 RETURNS integer
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$bittoint4$function$
CREATE OR REPLACE FUNCTION pg_catalog.int4(numeric)
 RETURNS integer
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$numeric_int4$function$
CREATE OR REPLACE FUNCTION pg_catalog.int4(boolean)
 RETURNS integer
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$bool_int4$function$
]]></string>
			<comment><![CDATA[convert bitstring to int4]]></comment>
		</function>
		<function name="int42div" id="Function_114cbe83" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.int42div(integer, smallint)
 RETURNS integer
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$int42div$function$
]]></string>
			<comment><![CDATA[implementation of / operator]]></comment>
		</function>
		<function name="int42eq" id="Function_1a530cb2" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.int42eq(integer, smallint)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT LEAKPROOF
AS $function$int42eq$function$
]]></string>
			<comment><![CDATA[implementation of = operator]]></comment>
		</function>
		<function name="int42ge" id="Function_35aa3d3a" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.int42ge(integer, smallint)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT LEAKPROOF
AS $function$int42ge$function$
]]></string>
			<comment><![CDATA[implementation of >= operator]]></comment>
		</function>
		<function name="int42gt" id="Function_31e27431" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.int42gt(integer, smallint)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT LEAKPROOF
AS $function$int42gt$function$
]]></string>
			<comment><![CDATA[implementation of > operator]]></comment>
		</function>
		<function name="int42le" id="Function_34a05eb1" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.int42le(integer, smallint)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT LEAKPROOF
AS $function$int42le$function$
]]></string>
			<comment><![CDATA[implementation of <= operator]]></comment>
		</function>
		<function name="int42lt" id="Function_2ff6601a" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.int42lt(integer, smallint)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT LEAKPROOF
AS $function$int42lt$function$
]]></string>
			<comment><![CDATA[implementation of < operator]]></comment>
		</function>
		<function name="int42mi" id="Function_1865076b" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.int42mi(integer, smallint)
 RETURNS integer
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$int42mi$function$
]]></string>
			<comment><![CDATA[implementation of - operator]]></comment>
		</function>
		<function name="int42mul" id="Function_f6c3e08" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.int42mul(integer, smallint)
 RETURNS integer
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$int42mul$function$
]]></string>
			<comment><![CDATA[implementation of * operator]]></comment>
		</function>
		<function name="int42ne" id="Function_f821525" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.int42ne(integer, smallint)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT LEAKPROOF
AS $function$int42ne$function$
]]></string>
			<comment><![CDATA[implementation of <> operator]]></comment>
		</function>
		<function name="int42pl" id="Function_2c87c51c" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.int42pl(integer, smallint)
 RETURNS integer
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$int42pl$function$
]]></string>
			<comment><![CDATA[implementation of + operator]]></comment>
		</function>
		<function name="int48div" id="Function_17a64699" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.int48div(integer, bigint)
 RETURNS bigint
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$int48div$function$
]]></string>
			<comment><![CDATA[implementation of / operator]]></comment>
		</function>
		<function name="int48eq" id="Function_7c8fb54" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.int48eq(integer, bigint)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT LEAKPROOF
AS $function$int48eq$function$
]]></string>
			<comment><![CDATA[implementation of = operator]]></comment>
		</function>
		<function name="int48ge" id="Function_374c6fc9" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.int48ge(integer, bigint)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT LEAKPROOF
AS $function$int48ge$function$
]]></string>
			<comment><![CDATA[implementation of >= operator]]></comment>
		</function>
		<function name="int48gt" id="Function_18f53569" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.int48gt(integer, bigint)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT LEAKPROOF
AS $function$int48gt$function$
]]></string>
			<comment><![CDATA[implementation of > operator]]></comment>
		</function>
		<function name="int48le" id="Function_35e2a325" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.int48le(integer, bigint)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT LEAKPROOF
AS $function$int48le$function$
]]></string>
			<comment><![CDATA[implementation of <= operator]]></comment>
		</function>
		<function name="int48lt" id="Function_1ed46bb3" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.int48lt(integer, bigint)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT LEAKPROOF
AS $function$int48lt$function$
]]></string>
			<comment><![CDATA[implementation of < operator]]></comment>
		</function>
		<function name="int48mi" id="Function_5723a81" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.int48mi(integer, bigint)
 RETURNS bigint
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$int48mi$function$
]]></string>
			<comment><![CDATA[implementation of - operator]]></comment>
		</function>
		<function name="int48mul" id="Function_258621cc" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.int48mul(integer, bigint)
 RETURNS bigint
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$int48mul$function$
]]></string>
			<comment><![CDATA[implementation of * operator]]></comment>
		</function>
		<function name="int48ne" id="Function_1634db67" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.int48ne(integer, bigint)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT LEAKPROOF
AS $function$int48ne$function$
]]></string>
			<comment><![CDATA[implementation of <> operator]]></comment>
		</function>
		<function name="int48pl" id="Function_12ff9f05" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.int48pl(integer, bigint)
 RETURNS bigint
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$int48pl$function$
]]></string>
			<comment><![CDATA[implementation of + operator]]></comment>
		</function>
		<function name="int4_001" id="Function_311b689e" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.int4("char")
 RETURNS integer
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$chartoi4$function$
CREATE OR REPLACE FUNCTION pg_catalog.int4(smallint)
 RETURNS integer
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$i2toi4$function$
CREATE OR REPLACE FUNCTION pg_catalog.int4(double precision)
 RETURNS integer
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$dtoi4$function$
CREATE OR REPLACE FUNCTION pg_catalog.int4(real)
 RETURNS integer
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$ftoi4$function$
CREATE OR REPLACE FUNCTION pg_catalog.int4(bigint)
 RETURNS integer
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$int84$function$
CREATE OR REPLACE FUNCTION pg_catalog.int4(bit)
 RETURNS integer
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$bittoint4$function$
CREATE OR REPLACE FUNCTION pg_catalog.int4(numeric)
 RETURNS integer
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$numeric_int4$function$
CREATE OR REPLACE FUNCTION pg_catalog.int4(boolean)
 RETURNS integer
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$bool_int4$function$
]]></string>
			<comment><![CDATA[convert bitstring to int4]]></comment>
		</function>
		<function name="int4_002" id="Function_36b1d59d" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.int4("char")
 RETURNS integer
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$chartoi4$function$
CREATE OR REPLACE FUNCTION pg_catalog.int4(smallint)
 RETURNS integer
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$i2toi4$function$
CREATE OR REPLACE FUNCTION pg_catalog.int4(double precision)
 RETURNS integer
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$dtoi4$function$
CREATE OR REPLACE FUNCTION pg_catalog.int4(real)
 RETURNS integer
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$ftoi4$function$
CREATE OR REPLACE FUNCTION pg_catalog.int4(bigint)
 RETURNS integer
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$int84$function$
CREATE OR REPLACE FUNCTION pg_catalog.int4(bit)
 RETURNS integer
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$bittoint4$function$
CREATE OR REPLACE FUNCTION pg_catalog.int4(numeric)
 RETURNS integer
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$numeric_int4$function$
CREATE OR REPLACE FUNCTION pg_catalog.int4(boolean)
 RETURNS integer
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$bool_int4$function$
]]></string>
			<comment><![CDATA[convert bitstring to int4]]></comment>
		</function>
		<function name="int4_003" id="Function_6f825b3" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.int4("char")
 RETURNS integer
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$chartoi4$function$
CREATE OR REPLACE FUNCTION pg_catalog.int4(smallint)
 RETURNS integer
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$i2toi4$function$
CREATE OR REPLACE FUNCTION pg_catalog.int4(double precision)
 RETURNS integer
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$dtoi4$function$
CREATE OR REPLACE FUNCTION pg_catalog.int4(real)
 RETURNS integer
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$ftoi4$function$
CREATE OR REPLACE FUNCTION pg_catalog.int4(bigint)
 RETURNS integer
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$int84$function$
CREATE OR REPLACE FUNCTION pg_catalog.int4(bit)
 RETURNS integer
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$bittoint4$function$
CREATE OR REPLACE FUNCTION pg_catalog.int4(numeric)
 RETURNS integer
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$numeric_int4$function$
CREATE OR REPLACE FUNCTION pg_catalog.int4(boolean)
 RETURNS integer
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$bool_int4$function$
]]></string>
			<comment><![CDATA[convert bitstring to int4]]></comment>
		</function>
		<function name="int4_004" id="Function_33723243" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.int4("char")
 RETURNS integer
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$chartoi4$function$
CREATE OR REPLACE FUNCTION pg_catalog.int4(smallint)
 RETURNS integer
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$i2toi4$function$
CREATE OR REPLACE FUNCTION pg_catalog.int4(double precision)
 RETURNS integer
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$dtoi4$function$
CREATE OR REPLACE FUNCTION pg_catalog.int4(real)
 RETURNS integer
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$ftoi4$function$
CREATE OR REPLACE FUNCTION pg_catalog.int4(bigint)
 RETURNS integer
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$int84$function$
CREATE OR REPLACE FUNCTION pg_catalog.int4(bit)
 RETURNS integer
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$bittoint4$function$
CREATE OR REPLACE FUNCTION pg_catalog.int4(numeric)
 RETURNS integer
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$numeric_int4$function$
CREATE OR REPLACE FUNCTION pg_catalog.int4(boolean)
 RETURNS integer
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$bool_int4$function$
]]></string>
			<comment><![CDATA[convert bitstring to int4]]></comment>
		</function>
		<function name="int4_005" id="Function_862ca04" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.int4("char")
 RETURNS integer
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$chartoi4$function$
CREATE OR REPLACE FUNCTION pg_catalog.int4(smallint)
 RETURNS integer
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$i2toi4$function$
CREATE OR REPLACE FUNCTION pg_catalog.int4(double precision)
 RETURNS integer
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$dtoi4$function$
CREATE OR REPLACE FUNCTION pg_catalog.int4(real)
 RETURNS integer
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$ftoi4$function$
CREATE OR REPLACE FUNCTION pg_catalog.int4(bigint)
 RETURNS integer
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$int84$function$
CREATE OR REPLACE FUNCTION pg_catalog.int4(bit)
 RETURNS integer
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$bittoint4$function$
CREATE OR REPLACE FUNCTION pg_catalog.int4(numeric)
 RETURNS integer
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$numeric_int4$function$
CREATE OR REPLACE FUNCTION pg_catalog.int4(boolean)
 RETURNS integer
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$bool_int4$function$
]]></string>
			<comment><![CDATA[convert bitstring to int4]]></comment>
		</function>
		<function name="int4_006" id="Function_284fc21d" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.int4("char")
 RETURNS integer
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$chartoi4$function$
CREATE OR REPLACE FUNCTION pg_catalog.int4(smallint)
 RETURNS integer
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$i2toi4$function$
CREATE OR REPLACE FUNCTION pg_catalog.int4(double precision)
 RETURNS integer
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$dtoi4$function$
CREATE OR REPLACE FUNCTION pg_catalog.int4(real)
 RETURNS integer
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$ftoi4$function$
CREATE OR REPLACE FUNCTION pg_catalog.int4(bigint)
 RETURNS integer
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$int84$function$
CREATE OR REPLACE FUNCTION pg_catalog.int4(bit)
 RETURNS integer
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$bittoint4$function$
CREATE OR REPLACE FUNCTION pg_catalog.int4(numeric)
 RETURNS integer
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$numeric_int4$function$
CREATE OR REPLACE FUNCTION pg_catalog.int4(boolean)
 RETURNS integer
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$bool_int4$function$
]]></string>
			<comment><![CDATA[convert bitstring to int4]]></comment>
		</function>
		<function name="int4_007" id="Function_3a4ff25c" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.int4("char")
 RETURNS integer
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$chartoi4$function$
CREATE OR REPLACE FUNCTION pg_catalog.int4(smallint)
 RETURNS integer
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$i2toi4$function$
CREATE OR REPLACE FUNCTION pg_catalog.int4(double precision)
 RETURNS integer
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$dtoi4$function$
CREATE OR REPLACE FUNCTION pg_catalog.int4(real)
 RETURNS integer
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$ftoi4$function$
CREATE OR REPLACE FUNCTION pg_catalog.int4(bigint)
 RETURNS integer
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$int84$function$
CREATE OR REPLACE FUNCTION pg_catalog.int4(bit)
 RETURNS integer
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$bittoint4$function$
CREATE OR REPLACE FUNCTION pg_catalog.int4(numeric)
 RETURNS integer
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$numeric_int4$function$
CREATE OR REPLACE FUNCTION pg_catalog.int4(boolean)
 RETURNS integer
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$bool_int4$function$
]]></string>
			<comment><![CDATA[convert bitstring to int4]]></comment>
		</function>
		<function name="int4_accum" id="Function_2a84a41a" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.int4_accum(internal, integer)
 RETURNS internal
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE
AS $function$int4_accum$function$
]]></string>
			<comment><![CDATA[aggregate transition function]]></comment>
		</function>
		<function name="int4_accum_inv" id="Function_2edadcd5" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.int4_accum_inv(internal, integer)
 RETURNS internal
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE
AS $function$int4_accum_inv$function$
]]></string>
			<comment><![CDATA[aggregate transition function]]></comment>
		</function>
		<function name="int4_avg_accum" id="Function_2910d45d" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.int4_avg_accum(bigint[], integer)
 RETURNS bigint[]
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$int4_avg_accum$function$
]]></string>
			<comment><![CDATA[aggregate transition function]]></comment>
		</function>
		<function name="int4_avg_accum_inv" id="Function_2cbb489a" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.int4_avg_accum_inv(bigint[], integer)
 RETURNS bigint[]
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$int4_avg_accum_inv$function$
]]></string>
			<comment><![CDATA[aggregate transition function]]></comment>
		</function>
		<function name="int4_avg_combine" id="Function_18abadd1" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.int4_avg_combine(bigint[], bigint[])
 RETURNS bigint[]
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$int4_avg_combine$function$
]]></string>
			<comment><![CDATA[aggregate combine function]]></comment>
		</function>
		<function name="int4_mul_cash" id="Function_193f06f5" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.int4_mul_cash(integer, money)
 RETURNS money
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$int4_mul_cash$function$
]]></string>
			<comment><![CDATA[implementation of * operator]]></comment>
		</function>
		<function name="int4_sum" id="Function_1467c292" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.int4_sum(bigint, integer)
 RETURNS bigint
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE
AS $function$int4_sum$function$
]]></string>
			<comment><![CDATA[aggregate transition function]]></comment>
		</function>
		<function name="int4abs" id="Function_1bdcaa21" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.int4abs(integer)
 RETURNS integer
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$int4abs$function$
]]></string>
			<comment><![CDATA[implementation of @ operator]]></comment>
		</function>
		<function name="int4and" id="Function_30958a54" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.int4and(integer, integer)
 RETURNS integer
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$int4and$function$
]]></string>
			<comment><![CDATA[implementation of & operator]]></comment>
		</function>
		<function name="int4div" id="Function_1d6f9f16" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.int4div(integer, integer)
 RETURNS integer
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$int4div$function$
]]></string>
			<comment><![CDATA[implementation of / operator]]></comment>
		</function>
		<function name="int4eq" id="Function_18d3378a" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.int4eq(integer, integer)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT LEAKPROOF
AS $function$int4eq$function$
]]></string>
			<comment><![CDATA[implementation of = operator]]></comment>
		</function>
		<function name="int4ge" id="Function_24de6faf" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.int4ge(integer, integer)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT LEAKPROOF
AS $function$int4ge$function$
]]></string>
			<comment><![CDATA[implementation of >= operator]]></comment>
		</function>
		<function name="int4gt" id="Function_a692725" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.int4gt(integer, integer)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT LEAKPROOF
AS $function$int4gt$function$
]]></string>
			<comment><![CDATA[implementation of > operator]]></comment>
		</function>
		<function name="int4in" id="Function_30dc0bce" isSystem="false" >
			<comment><![CDATA[I/O]]></comment>
		</function>
		<function name="int4inc" id="Function_173db29f" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.int4inc(integer)
 RETURNS integer
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$int4inc$function$
]]></string>
			<comment><![CDATA[increment]]></comment>
		</function>
		<function name="int4larger" id="Function_15cb895b" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.int4larger(integer, integer)
 RETURNS integer
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$int4larger$function$
]]></string>
			<comment><![CDATA[larger of two]]></comment>
		</function>
		<function name="int4le" id="Function_184c7216" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.int4le(integer, integer)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT LEAKPROOF
AS $function$int4le$function$
]]></string>
			<comment><![CDATA[implementation of <= operator]]></comment>
		</function>
		<function name="int4lt" id="Function_165c0918" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.int4lt(integer, integer)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT LEAKPROOF
AS $function$int4lt$function$
]]></string>
			<comment><![CDATA[implementation of < operator]]></comment>
		</function>
		<function name="int4mi" id="Function_39959598" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.int4mi(integer, integer)
 RETURNS integer
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$int4mi$function$
]]></string>
			<comment><![CDATA[implementation of - operator]]></comment>
		</function>
		<function name="int4mod" id="Function_26e7f676" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.int4mod(integer, integer)
 RETURNS integer
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$int4mod$function$
]]></string>
			<comment><![CDATA[implementation of % operator]]></comment>
		</function>
		<function name="int4mul" id="Function_32491581" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.int4mul(integer, integer)
 RETURNS integer
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$int4mul$function$
]]></string>
			<comment><![CDATA[implementation of * operator]]></comment>
		</function>
		<function name="int4ne" id="Function_11ff925c" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.int4ne(integer, integer)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT LEAKPROOF
AS $function$int4ne$function$
]]></string>
			<comment><![CDATA[implementation of <> operator]]></comment>
		</function>
		<function name="int4not" id="Function_183f9aba" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.int4not(integer)
 RETURNS integer
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$int4not$function$
]]></string>
			<comment><![CDATA[implementation of ~ operator]]></comment>
		</function>
		<function name="int4or" id="Function_f83521a" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.int4or(integer, integer)
 RETURNS integer
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$int4or$function$
]]></string>
			<comment><![CDATA[implementation of | operator]]></comment>
		</function>
		<function name="int4out" id="Function_12e1bda5" isSystem="false" >
			<comment><![CDATA[I/O]]></comment>
		</function>
		<function name="int4pl" id="Function_31137847" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.int4pl(integer, integer)
 RETURNS integer
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$int4pl$function$
]]></string>
			<comment><![CDATA[implementation of + operator]]></comment>
		</function>
		<function name="int4range" id="Function_19a0e5e5" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.int4range(integer, integer)
 RETURNS int4range
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE
AS $function$range_constructor2$function$
CREATE OR REPLACE FUNCTION pg_catalog.int4range(integer, integer, text)
 RETURNS int4range
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE
AS $function$range_constructor3$function$
]]></string>
			<comment><![CDATA[int4range constructor]]></comment>
		</function>
		<function name="int4range_001" id="Function_56d7e8e" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.int4range(integer, integer)
 RETURNS int4range
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE
AS $function$range_constructor2$function$
CREATE OR REPLACE FUNCTION pg_catalog.int4range(integer, integer, text)
 RETURNS int4range
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE
AS $function$range_constructor3$function$
]]></string>
			<comment><![CDATA[int4range constructor]]></comment>
		</function>
		<function name="int4range_canonical" id="Function_1a07cdec" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.int4range_canonical(int4range)
 RETURNS int4range
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$int4range_canonical$function$
]]></string>
			<comment><![CDATA[convert an int4 range to canonical form]]></comment>
		</function>
		<function name="int4range_subdiff" id="Function_1ba3710e" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.int4range_subdiff(integer, integer)
 RETURNS double precision
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$int4range_subdiff$function$
]]></string>
			<comment><![CDATA[float8 difference of two int4 values]]></comment>
		</function>
		<function name="int4recv" id="Function_103aa3a9" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.int4recv(internal)
 RETURNS integer
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$int4recv$function$
]]></string>
			<comment><![CDATA[I/O]]></comment>
		</function>
		<function name="int4send" id="Function_2378e3eb" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.int4send(integer)
 RETURNS bytea
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$int4send$function$
]]></string>
			<comment><![CDATA[I/O]]></comment>
		</function>
		<function name="int4shl" id="Function_837bf39" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.int4shl(integer, integer)
 RETURNS integer
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$int4shl$function$
]]></string>
			<comment><![CDATA[implementation of << operator]]></comment>
		</function>
		<function name="int4shr" id="Function_e086470" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.int4shr(integer, integer)
 RETURNS integer
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$int4shr$function$
]]></string>
			<comment><![CDATA[implementation of >> operator]]></comment>
		</function>
		<function name="int4smaller" id="Function_f4b32e7" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.int4smaller(integer, integer)
 RETURNS integer
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$int4smaller$function$
]]></string>
			<comment><![CDATA[smaller of two]]></comment>
		</function>
		<function name="int4um" id="Function_165d6d" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.int4um(integer)
 RETURNS integer
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$int4um$function$
]]></string>
			<comment><![CDATA[implementation of - operator]]></comment>
		</function>
		<function name="int4up" id="Function_32f1f5f2" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.int4up(integer)
 RETURNS integer
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$int4up$function$
]]></string>
			<comment><![CDATA[implementation of + operator]]></comment>
		</function>
		<function name="int4xor" id="Function_29e694d3" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.int4xor(integer, integer)
 RETURNS integer
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$int4xor$function$
]]></string>
			<comment><![CDATA[implementation of # operator]]></comment>
		</function>
		<function name="int8" id="Function_253adca" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.int8(integer)
 RETURNS bigint
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$int48$function$
CREATE OR REPLACE FUNCTION pg_catalog.int8(double precision)
 RETURNS bigint
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$dtoi8$function$
CREATE OR REPLACE FUNCTION pg_catalog.int8(real)
 RETURNS bigint
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$ftoi8$function$
CREATE OR REPLACE FUNCTION pg_catalog.int8(smallint)
 RETURNS bigint
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$int28$function$
CREATE OR REPLACE FUNCTION pg_catalog.int8(oid)
 RETURNS bigint
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$oidtoi8$function$
CREATE OR REPLACE FUNCTION pg_catalog.int8(numeric)
 RETURNS bigint
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$numeric_int8$function$
CREATE OR REPLACE FUNCTION pg_catalog.int8(bit)
 RETURNS bigint
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$bittoint8$function$
]]></string>
			<comment><![CDATA[convert oid to int8]]></comment>
		</function>
		<function name="int82div" id="Function_2f79343e" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.int82div(bigint, smallint)
 RETURNS bigint
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$int82div$function$
]]></string>
			<comment><![CDATA[implementation of / operator]]></comment>
		</function>
		<function name="int82eq" id="Function_282a3120" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.int82eq(bigint, smallint)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT LEAKPROOF
AS $function$int82eq$function$
]]></string>
			<comment><![CDATA[implementation of = operator]]></comment>
		</function>
		<function name="int82ge" id="Function_30237791" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.int82ge(bigint, smallint)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT LEAKPROOF
AS $function$int82ge$function$
]]></string>
			<comment><![CDATA[implementation of >= operator]]></comment>
		</function>
		<function name="int82gt" id="Function_36e7859a" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.int82gt(bigint, smallint)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT LEAKPROOF
AS $function$int82gt$function$
]]></string>
			<comment><![CDATA[implementation of > operator]]></comment>
		</function>
		<function name="int82le" id="Function_6fb6244" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.int82le(bigint, smallint)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT LEAKPROOF
AS $function$int82le$function$
]]></string>
			<comment><![CDATA[implementation of <= operator]]></comment>
		</function>
		<function name="int82lt" id="Function_1dbb3997" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.int82lt(bigint, smallint)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT LEAKPROOF
AS $function$int82lt$function$
]]></string>
			<comment><![CDATA[implementation of < operator]]></comment>
		</function>
		<function name="int82mi" id="Function_1ae81a4b" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.int82mi(bigint, smallint)
 RETURNS bigint
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$int82mi$function$
]]></string>
			<comment><![CDATA[implementation of - operator]]></comment>
		</function>
		<function name="int82mul" id="Function_1a7053b5" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.int82mul(bigint, smallint)
 RETURNS bigint
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$int82mul$function$
]]></string>
			<comment><![CDATA[implementation of * operator]]></comment>
		</function>
		<function name="int82ne" id="Function_32ce4beb" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.int82ne(bigint, smallint)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT LEAKPROOF
AS $function$int82ne$function$
]]></string>
			<comment><![CDATA[implementation of <> operator]]></comment>
		</function>
		<function name="int82pl" id="Function_2a186f50" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.int82pl(bigint, smallint)
 RETURNS bigint
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$int82pl$function$
]]></string>
			<comment><![CDATA[implementation of + operator]]></comment>
		</function>
		<function name="int84div" id="Function_fbccda7" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.int84div(bigint, integer)
 RETURNS bigint
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$int84div$function$
]]></string>
			<comment><![CDATA[implementation of / operator]]></comment>
		</function>
		<function name="int84eq" id="Function_36b5c415" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.int84eq(bigint, integer)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT LEAKPROOF
AS $function$int84eq$function$
]]></string>
			<comment><![CDATA[implementation of = operator]]></comment>
		</function>
		<function name="int84ge" id="Function_b5f9582" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.int84ge(bigint, integer)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT LEAKPROOF
AS $function$int84ge$function$
]]></string>
			<comment><![CDATA[implementation of >= operator]]></comment>
		</function>
		<function name="int84gt" id="Function_1137fd7a" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.int84gt(bigint, integer)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT LEAKPROOF
AS $function$int84gt$function$
]]></string>
			<comment><![CDATA[implementation of > operator]]></comment>
		</function>
		<function name="int84le" id="Function_cc9c377" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.int84le(bigint, integer)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT LEAKPROOF
AS $function$int84le$function$
]]></string>
			<comment><![CDATA[implementation of <= operator]]></comment>
		</function>
		<function name="int84lt" id="Function_134172b3" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.int84lt(bigint, integer)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT LEAKPROOF
AS $function$int84lt$function$
]]></string>
			<comment><![CDATA[implementation of < operator]]></comment>
		</function>
		<function name="int84mi" id="Function_87a922c" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.int84mi(bigint, integer)
 RETURNS bigint
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$int84mi$function$
]]></string>
			<comment><![CDATA[implementation of - operator]]></comment>
		</function>
		<function name="int84mul" id="Function_1f8f9133" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.int84mul(bigint, integer)
 RETURNS bigint
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$int84mul$function$
]]></string>
			<comment><![CDATA[implementation of * operator]]></comment>
		</function>
		<function name="int84ne" id="Function_3117a735" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.int84ne(bigint, integer)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT LEAKPROOF
AS $function$int84ne$function$
]]></string>
			<comment><![CDATA[implementation of <> operator]]></comment>
		</function>
		<function name="int84pl" id="Function_239be08d" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.int84pl(bigint, integer)
 RETURNS bigint
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$int84pl$function$
]]></string>
			<comment><![CDATA[implementation of + operator]]></comment>
		</function>
		<function name="int8_001" id="Function_478d586" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.int8(integer)
 RETURNS bigint
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$int48$function$
CREATE OR REPLACE FUNCTION pg_catalog.int8(double precision)
 RETURNS bigint
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$dtoi8$function$
CREATE OR REPLACE FUNCTION pg_catalog.int8(real)
 RETURNS bigint
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$ftoi8$function$
CREATE OR REPLACE FUNCTION pg_catalog.int8(smallint)
 RETURNS bigint
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$int28$function$
CREATE OR REPLACE FUNCTION pg_catalog.int8(oid)
 RETURNS bigint
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$oidtoi8$function$
CREATE OR REPLACE FUNCTION pg_catalog.int8(numeric)
 RETURNS bigint
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$numeric_int8$function$
CREATE OR REPLACE FUNCTION pg_catalog.int8(bit)
 RETURNS bigint
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$bittoint8$function$
]]></string>
			<comment><![CDATA[convert oid to int8]]></comment>
		</function>
		<function name="int8_002" id="Function_a1927e6" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.int8(integer)
 RETURNS bigint
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$int48$function$
CREATE OR REPLACE FUNCTION pg_catalog.int8(double precision)
 RETURNS bigint
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$dtoi8$function$
CREATE OR REPLACE FUNCTION pg_catalog.int8(real)
 RETURNS bigint
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$ftoi8$function$
CREATE OR REPLACE FUNCTION pg_catalog.int8(smallint)
 RETURNS bigint
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$int28$function$
CREATE OR REPLACE FUNCTION pg_catalog.int8(oid)
 RETURNS bigint
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$oidtoi8$function$
CREATE OR REPLACE FUNCTION pg_catalog.int8(numeric)
 RETURNS bigint
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$numeric_int8$function$
CREATE OR REPLACE FUNCTION pg_catalog.int8(bit)
 RETURNS bigint
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$bittoint8$function$
]]></string>
			<comment><![CDATA[convert oid to int8]]></comment>
		</function>
		<function name="int8_003" id="Function_4fdbf06" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.int8(integer)
 RETURNS bigint
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$int48$function$
CREATE OR REPLACE FUNCTION pg_catalog.int8(double precision)
 RETURNS bigint
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$dtoi8$function$
CREATE OR REPLACE FUNCTION pg_catalog.int8(real)
 RETURNS bigint
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$ftoi8$function$
CREATE OR REPLACE FUNCTION pg_catalog.int8(smallint)
 RETURNS bigint
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$int28$function$
CREATE OR REPLACE FUNCTION pg_catalog.int8(oid)
 RETURNS bigint
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$oidtoi8$function$
CREATE OR REPLACE FUNCTION pg_catalog.int8(numeric)
 RETURNS bigint
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$numeric_int8$function$
CREATE OR REPLACE FUNCTION pg_catalog.int8(bit)
 RETURNS bigint
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$bittoint8$function$
]]></string>
			<comment><![CDATA[convert oid to int8]]></comment>
		</function>
		<function name="int8_004" id="Function_36e23502" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.int8(integer)
 RETURNS bigint
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$int48$function$
CREATE OR REPLACE FUNCTION pg_catalog.int8(double precision)
 RETURNS bigint
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$dtoi8$function$
CREATE OR REPLACE FUNCTION pg_catalog.int8(real)
 RETURNS bigint
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$ftoi8$function$
CREATE OR REPLACE FUNCTION pg_catalog.int8(smallint)
 RETURNS bigint
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$int28$function$
CREATE OR REPLACE FUNCTION pg_catalog.int8(oid)
 RETURNS bigint
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$oidtoi8$function$
CREATE OR REPLACE FUNCTION pg_catalog.int8(numeric)
 RETURNS bigint
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$numeric_int8$function$
CREATE OR REPLACE FUNCTION pg_catalog.int8(bit)
 RETURNS bigint
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$bittoint8$function$
]]></string>
			<comment><![CDATA[convert oid to int8]]></comment>
		</function>
		<function name="int8_005" id="Function_f24751f" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.int8(integer)
 RETURNS bigint
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$int48$function$
CREATE OR REPLACE FUNCTION pg_catalog.int8(double precision)
 RETURNS bigint
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$dtoi8$function$
CREATE OR REPLACE FUNCTION pg_catalog.int8(real)
 RETURNS bigint
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$ftoi8$function$
CREATE OR REPLACE FUNCTION pg_catalog.int8(smallint)
 RETURNS bigint
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$int28$function$
CREATE OR REPLACE FUNCTION pg_catalog.int8(oid)
 RETURNS bigint
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$oidtoi8$function$
CREATE OR REPLACE FUNCTION pg_catalog.int8(numeric)
 RETURNS bigint
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$numeric_int8$function$
CREATE OR REPLACE FUNCTION pg_catalog.int8(bit)
 RETURNS bigint
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$bittoint8$function$
]]></string>
			<comment><![CDATA[convert oid to int8]]></comment>
		</function>
		<function name="int8_006" id="Function_1c498499" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.int8(integer)
 RETURNS bigint
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$int48$function$
CREATE OR REPLACE FUNCTION pg_catalog.int8(double precision)
 RETURNS bigint
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$dtoi8$function$
CREATE OR REPLACE FUNCTION pg_catalog.int8(real)
 RETURNS bigint
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$ftoi8$function$
CREATE OR REPLACE FUNCTION pg_catalog.int8(smallint)
 RETURNS bigint
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$int28$function$
CREATE OR REPLACE FUNCTION pg_catalog.int8(oid)
 RETURNS bigint
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$oidtoi8$function$
CREATE OR REPLACE FUNCTION pg_catalog.int8(numeric)
 RETURNS bigint
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$numeric_int8$function$
CREATE OR REPLACE FUNCTION pg_catalog.int8(bit)
 RETURNS bigint
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$bittoint8$function$
]]></string>
			<comment><![CDATA[convert oid to int8]]></comment>
		</function>
		<function name="int8_accum" id="Function_d69f116" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.int8_accum(internal, bigint)
 RETURNS internal
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE
AS $function$int8_accum$function$
]]></string>
			<comment><![CDATA[aggregate transition function]]></comment>
		</function>
		<function name="int8_accum_inv" id="Function_21863c9e" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.int8_accum_inv(internal, bigint)
 RETURNS internal
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE
AS $function$int8_accum_inv$function$
]]></string>
			<comment><![CDATA[aggregate transition function]]></comment>
		</function>
		<function name="int8_avg" id="Function_a778cd2" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.int8_avg(bigint[])
 RETURNS numeric
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$int8_avg$function$
]]></string>
			<comment><![CDATA[aggregate final function]]></comment>
		</function>
		<function name="int8_avg_accum" id="Function_142380e8" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.int8_avg_accum(internal, bigint)
 RETURNS internal
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE
AS $function$int8_avg_accum$function$
]]></string>
			<comment><![CDATA[aggregate transition function]]></comment>
		</function>
		<function name="int8_avg_accum_inv" id="Function_129438e2" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.int8_avg_accum_inv(internal, bigint)
 RETURNS internal
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE
AS $function$int8_avg_accum_inv$function$
]]></string>
			<comment><![CDATA[aggregate transition function]]></comment>
		</function>
		<function name="int8_avg_combine" id="Function_245b822d" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.int8_avg_combine(internal, internal)
 RETURNS internal
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE
AS $function$int8_avg_combine$function$
]]></string>
			<comment><![CDATA[aggregate combine function]]></comment>
		</function>
		<function name="int8_avg_deserialize" id="Function_833f3b1" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.int8_avg_deserialize(bytea, internal)
 RETURNS internal
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$int8_avg_deserialize$function$
]]></string>
			<comment><![CDATA[aggregate deserial function]]></comment>
		</function>
		<function name="int8_avg_serialize" id="Function_1e0b77a5" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.int8_avg_serialize(internal)
 RETURNS bytea
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$int8_avg_serialize$function$
]]></string>
			<comment><![CDATA[aggregate serial function]]></comment>
		</function>
		<function name="int8_sum" id="Function_2f429c1f" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.int8_sum(numeric, bigint)
 RETURNS numeric
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE
AS $function$int8_sum$function$
]]></string>
			<comment><![CDATA[aggregate transition function]]></comment>
		</function>
		<function name="int8abs" id="Function_24ba22cb" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.int8abs(bigint)
 RETURNS bigint
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$int8abs$function$
]]></string>
			<comment><![CDATA[implementation of @ operator]]></comment>
		</function>
		<function name="int8and" id="Function_43ca590" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.int8and(bigint, bigint)
 RETURNS bigint
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$int8and$function$
]]></string>
			<comment><![CDATA[implementation of & operator]]></comment>
		</function>
		<function name="int8dec" id="Function_3a20192e" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.int8dec(bigint)
 RETURNS bigint
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$int8dec$function$
]]></string>
			<comment><![CDATA[decrement]]></comment>
		</function>
		<function name="int8dec_any" id="Function_1c04a146" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.int8dec_any(bigint, "any")
 RETURNS bigint
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$int8dec_any$function$
]]></string>
			<comment><![CDATA[decrement, ignores second argument]]></comment>
		</function>
		<function name="int8div" id="Function_ef62dda" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.int8div(bigint, bigint)
 RETURNS bigint
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$int8div$function$
]]></string>
			<comment><![CDATA[implementation of / operator]]></comment>
		</function>
		<function name="int8eq" id="Function_2200a362" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.int8eq(bigint, bigint)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT LEAKPROOF
AS $function$int8eq$function$
]]></string>
			<comment><![CDATA[implementation of = operator]]></comment>
		</function>
		<function name="int8ge" id="Function_364c131" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.int8ge(bigint, bigint)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT LEAKPROOF
AS $function$int8ge$function$
]]></string>
			<comment><![CDATA[implementation of >= operator]]></comment>
		</function>
		<function name="int8gt" id="Function_31e01f78" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.int8gt(bigint, bigint)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT LEAKPROOF
AS $function$int8gt$function$
]]></string>
			<comment><![CDATA[implementation of > operator]]></comment>
		</function>
		<function name="int8in" id="Function_1e3bcb1f" isSystem="false" >
			<comment><![CDATA[I/O]]></comment>
		</function>
		<function name="int8inc" id="Function_e0747e" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.int8inc(bigint)
 RETURNS bigint
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$int8inc$function$
]]></string>
			<comment><![CDATA[increment]]></comment>
		</function>
		<function name="int8inc_any" id="Function_11142e3b" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.int8inc_any(bigint, "any")
 RETURNS bigint
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$int8inc_any$function$
]]></string>
			<comment><![CDATA[increment, ignores second argument]]></comment>
		</function>
		<function name="int8inc_float8_float8" id="Function_27460643" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.int8inc_float8_float8(bigint, double precision, double precision)
 RETURNS bigint
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$int8inc_float8_float8$function$
]]></string>
			<comment><![CDATA[aggregate transition function]]></comment>
		</function>
		<function name="int8larger" id="Function_159f6261" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.int8larger(bigint, bigint)
 RETURNS bigint
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$int8larger$function$
]]></string>
			<comment><![CDATA[larger of two]]></comment>
		</function>
		<function name="int8le" id="Function_3998b40b" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.int8le(bigint, bigint)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT LEAKPROOF
AS $function$int8le$function$
]]></string>
			<comment><![CDATA[implementation of <= operator]]></comment>
		</function>
		<function name="int8lt" id="Function_7f0536a" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.int8lt(bigint, bigint)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT LEAKPROOF
AS $function$int8lt$function$
]]></string>
			<comment><![CDATA[implementation of < operator]]></comment>
		</function>
		<function name="int8mi" id="Function_d4ba46" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.int8mi(bigint, bigint)
 RETURNS bigint
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$int8mi$function$
]]></string>
			<comment><![CDATA[implementation of - operator]]></comment>
		</function>
		<function name="int8mod" id="Function_dc8a93b" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.int8mod(bigint, bigint)
 RETURNS bigint
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$int8mod$function$
]]></string>
			<comment><![CDATA[implementation of % operator]]></comment>
		</function>
		<function name="int8mul" id="Function_29eb7aca" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.int8mul(bigint, bigint)
 RETURNS bigint
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$int8mul$function$
]]></string>
			<comment><![CDATA[implementation of * operator]]></comment>
		</function>
		<function name="int8ne" id="Function_1a55ecf6" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.int8ne(bigint, bigint)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT LEAKPROOF
AS $function$int8ne$function$
]]></string>
			<comment><![CDATA[implementation of <> operator]]></comment>
		</function>
		<function name="int8not" id="Function_be37620" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.int8not(bigint)
 RETURNS bigint
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$int8not$function$
]]></string>
			<comment><![CDATA[implementation of ~ operator]]></comment>
		</function>
		<function name="int8or" id="Function_a55e530" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.int8or(bigint, bigint)
 RETURNS bigint
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$int8or$function$
]]></string>
			<comment><![CDATA[implementation of | operator]]></comment>
		</function>
		<function name="int8out" id="Function_18fd50f0" isSystem="false" >
			<comment><![CDATA[I/O]]></comment>
		</function>
		<function name="int8pl" id="Function_2ac83b7f" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.int8pl(bigint, bigint)
 RETURNS bigint
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$int8pl$function$
]]></string>
			<comment><![CDATA[implementation of + operator]]></comment>
		</function>
		<function name="int8pl_inet" id="Function_a2fe04a" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.int8pl_inet(bigint, inet)
 RETURNS inet
 LANGUAGE sql
 IMMUTABLE PARALLEL SAFE STRICT COST 1
AS $function$select $2 + $1$function$
]]></string>
			<comment><![CDATA[implementation of + operator]]></comment>
		</function>
		<function name="int8range" id="Function_343e25c9" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.int8range(bigint, bigint)
 RETURNS int8range
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE
AS $function$range_constructor2$function$
CREATE OR REPLACE FUNCTION pg_catalog.int8range(bigint, bigint, text)
 RETURNS int8range
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE
AS $function$range_constructor3$function$
]]></string>
			<comment><![CDATA[int8range constructor]]></comment>
		</function>
		<function name="int8range_001" id="Function_5785e08" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.int8range(bigint, bigint)
 RETURNS int8range
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE
AS $function$range_constructor2$function$
CREATE OR REPLACE FUNCTION pg_catalog.int8range(bigint, bigint, text)
 RETURNS int8range
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE
AS $function$range_constructor3$function$
]]></string>
			<comment><![CDATA[int8range constructor]]></comment>
		</function>
		<function name="int8range_canonical" id="Function_23bf8c80" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.int8range_canonical(int8range)
 RETURNS int8range
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$int8range_canonical$function$
]]></string>
			<comment><![CDATA[convert an int8 range to canonical form]]></comment>
		</function>
		<function name="int8range_subdiff" id="Function_18f99ab4" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.int8range_subdiff(bigint, bigint)
 RETURNS double precision
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$int8range_subdiff$function$
]]></string>
			<comment><![CDATA[float8 difference of two int8 values]]></comment>
		</function>
		<function name="int8recv" id="Function_16c0965e" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.int8recv(internal)
 RETURNS bigint
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$int8recv$function$
]]></string>
			<comment><![CDATA[I/O]]></comment>
		</function>
		<function name="int8send" id="Function_20a35e23" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.int8send(bigint)
 RETURNS bytea
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$int8send$function$
]]></string>
			<comment><![CDATA[I/O]]></comment>
		</function>
		<function name="int8shl" id="Function_71e8c72" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.int8shl(bigint, integer)
 RETURNS bigint
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$int8shl$function$
]]></string>
			<comment><![CDATA[implementation of << operator]]></comment>
		</function>
		<function name="int8shr" id="Function_1aa08b4c" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.int8shr(bigint, integer)
 RETURNS bigint
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$int8shr$function$
]]></string>
			<comment><![CDATA[implementation of >> operator]]></comment>
		</function>
		<function name="int8smaller" id="Function_2d5cc809" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.int8smaller(bigint, bigint)
 RETURNS bigint
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$int8smaller$function$
]]></string>
			<comment><![CDATA[smaller of two]]></comment>
		</function>
		<function name="int8um" id="Function_1f9d4584" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.int8um(bigint)
 RETURNS bigint
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$int8um$function$
]]></string>
			<comment><![CDATA[implementation of - operator]]></comment>
		</function>
		<function name="int8up" id="Function_236f6180" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.int8up(bigint)
 RETURNS bigint
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$int8up$function$
]]></string>
			<comment><![CDATA[implementation of + operator]]></comment>
		</function>
		<function name="int8xor" id="Function_f443d89" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.int8xor(bigint, bigint)
 RETURNS bigint
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$int8xor$function$
]]></string>
			<comment><![CDATA[implementation of # operator]]></comment>
		</function>
		<function name="integer_pl_date" id="Function_ef8c6d4" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.integer_pl_date(integer, date)
 RETURNS date
 LANGUAGE sql
 IMMUTABLE PARALLEL SAFE STRICT COST 1
AS $function$select $2 + $1$function$
]]></string>
			<comment><![CDATA[implementation of + operator]]></comment>
		</function>
		<function name="inter_lb" id="Function_2e01187b" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.inter_lb(line, box)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$inter_lb$function$
]]></string>
			<comment><![CDATA[implementation of ?# operator]]></comment>
		</function>
		<function name="inter_sb" id="Function_f19f19a" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.inter_sb(lseg, box)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$inter_sb$function$
]]></string>
			<comment><![CDATA[implementation of ?# operator]]></comment>
		</function>
		<function name="inter_sl" id="Function_1e1cd0c8" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.inter_sl(lseg, line)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$inter_sl$function$
]]></string>
			<comment><![CDATA[implementation of ?# operator]]></comment>
		</function>
		<function name="internal_in" id="Function_1fba55a0" isSystem="false" >
			<comment><![CDATA[I/O]]></comment>
		</function>
		<function name="internal_out" id="Function_16f5a7bf" isSystem="false" >
			<comment><![CDATA[I/O]]></comment>
		</function>
		<function name="interval" id="Function_8a9d2f3" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog."interval"(reltime)
 RETURNS interval
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$reltime_interval$function$
CREATE OR REPLACE FUNCTION pg_catalog."interval"(time without time zone)
 RETURNS interval
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$time_interval$function$
CREATE OR REPLACE FUNCTION pg_catalog."interval"(interval, integer)
 RETURNS interval
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$interval_scale$function$
]]></string>
			<comment><![CDATA[convert reltime to interval]]></comment>
		</function>
		<function name="interval_001" id="Function_e97c1c4" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog."interval"(reltime)
 RETURNS interval
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$reltime_interval$function$
CREATE OR REPLACE FUNCTION pg_catalog."interval"(time without time zone)
 RETURNS interval
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$time_interval$function$
CREATE OR REPLACE FUNCTION pg_catalog."interval"(interval, integer)
 RETURNS interval
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$interval_scale$function$
]]></string>
			<comment><![CDATA[convert reltime to interval]]></comment>
		</function>
		<function name="interval_002" id="Function_37f8c2d7" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog."interval"(reltime)
 RETURNS interval
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$reltime_interval$function$
CREATE OR REPLACE FUNCTION pg_catalog."interval"(time without time zone)
 RETURNS interval
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$time_interval$function$
CREATE OR REPLACE FUNCTION pg_catalog."interval"(interval, integer)
 RETURNS interval
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$interval_scale$function$
]]></string>
			<comment><![CDATA[convert reltime to interval]]></comment>
		</function>
		<function name="interval_accum" id="Function_5c57230" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.interval_accum(interval[], interval)
 RETURNS interval[]
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$interval_accum$function$
]]></string>
			<comment><![CDATA[aggregate transition function]]></comment>
		</function>
		<function name="interval_accum_inv" id="Function_1d337583" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.interval_accum_inv(interval[], interval)
 RETURNS interval[]
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$interval_accum_inv$function$
]]></string>
			<comment><![CDATA[aggregate transition function]]></comment>
		</function>
		<function name="interval_avg" id="Function_179aa82d" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.interval_avg(interval[])
 RETURNS interval
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$interval_avg$function$
]]></string>
			<comment><![CDATA[aggregate final function]]></comment>
		</function>
		<function name="interval_cmp" id="Function_fb1e3eb" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.interval_cmp(interval, interval)
 RETURNS integer
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$interval_cmp$function$
]]></string>
			<comment><![CDATA[less-equal-greater]]></comment>
		</function>
		<function name="interval_combine" id="Function_659d276" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.interval_combine(interval[], interval[])
 RETURNS interval[]
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$interval_combine$function$
]]></string>
			<comment><![CDATA[aggregate combine function]]></comment>
		</function>
		<function name="interval_div" id="Function_266defa1" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.interval_div(interval, double precision)
 RETURNS interval
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$interval_div$function$
]]></string>
			<comment><![CDATA[implementation of / operator]]></comment>
		</function>
		<function name="interval_eq" id="Function_168224b5" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.interval_eq(interval, interval)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT LEAKPROOF
AS $function$interval_eq$function$
]]></string>
			<comment><![CDATA[implementation of = operator]]></comment>
		</function>
		<function name="interval_ge" id="Function_4783be" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.interval_ge(interval, interval)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT LEAKPROOF
AS $function$interval_ge$function$
]]></string>
			<comment><![CDATA[implementation of >= operator]]></comment>
		</function>
		<function name="interval_gt" id="Function_35809d53" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.interval_gt(interval, interval)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT LEAKPROOF
AS $function$interval_gt$function$
]]></string>
			<comment><![CDATA[implementation of > operator]]></comment>
		</function>
		<function name="interval_hash" id="Function_21faa9f4" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.interval_hash(interval)
 RETURNS integer
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$interval_hash$function$
]]></string>
			<comment><![CDATA[hash]]></comment>
		</function>
		<function name="interval_in" id="Function_2077a5bc" isSystem="false" >
			<comment><![CDATA[I/O]]></comment>
		</function>
		<function name="interval_larger" id="Function_1e7cedba" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.interval_larger(interval, interval)
 RETURNS interval
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$interval_larger$function$
]]></string>
			<comment><![CDATA[larger of two]]></comment>
		</function>
		<function name="interval_le" id="Function_2e8d323b" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.interval_le(interval, interval)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT LEAKPROOF
AS $function$interval_le$function$
]]></string>
			<comment><![CDATA[implementation of <= operator]]></comment>
		</function>
		<function name="interval_lt" id="Function_154be10a" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.interval_lt(interval, interval)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT LEAKPROOF
AS $function$interval_lt$function$
]]></string>
			<comment><![CDATA[implementation of < operator]]></comment>
		</function>
		<function name="interval_mi" id="Function_14b73791" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.interval_mi(interval, interval)
 RETURNS interval
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$interval_mi$function$
]]></string>
			<comment><![CDATA[implementation of - operator]]></comment>
		</function>
		<function name="interval_mul" id="Function_fc9577c" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.interval_mul(interval, double precision)
 RETURNS interval
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$interval_mul$function$
]]></string>
			<comment><![CDATA[implementation of * operator]]></comment>
		</function>
		<function name="interval_ne" id="Function_c795459" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.interval_ne(interval, interval)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT LEAKPROOF
AS $function$interval_ne$function$
]]></string>
			<comment><![CDATA[implementation of <> operator]]></comment>
		</function>
		<function name="interval_out" id="Function_53154bb" isSystem="false" >
			<comment><![CDATA[I/O]]></comment>
		</function>
		<function name="interval_pl" id="Function_162779af" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.interval_pl(interval, interval)
 RETURNS interval
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$interval_pl$function$
]]></string>
			<comment><![CDATA[implementation of + operator]]></comment>
		</function>
		<function name="interval_pl_date" id="Function_157a8a64" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.interval_pl_date(interval, date)
 RETURNS timestamp without time zone
 LANGUAGE sql
 IMMUTABLE PARALLEL SAFE STRICT COST 1
AS $function$select $2 + $1$function$
]]></string>
			<comment><![CDATA[implementation of + operator]]></comment>
		</function>
		<function name="interval_pl_time" id="Function_8a8ac45" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.interval_pl_time(interval, time without time zone)
 RETURNS time without time zone
 LANGUAGE sql
 IMMUTABLE PARALLEL SAFE STRICT COST 1
AS $function$select $2 + $1$function$
]]></string>
			<comment><![CDATA[implementation of + operator]]></comment>
		</function>
		<function name="interval_pl_timestamp" id="Function_126ebf18" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.interval_pl_timestamp(interval, timestamp without time zone)
 RETURNS timestamp without time zone
 LANGUAGE sql
 IMMUTABLE PARALLEL SAFE STRICT COST 1
AS $function$select $2 + $1$function$
]]></string>
			<comment><![CDATA[implementation of + operator]]></comment>
		</function>
		<function name="interval_pl_timestamptz" id="Function_27dfe613" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.interval_pl_timestamptz(interval, timestamp with time zone)
 RETURNS timestamp with time zone
 LANGUAGE sql
 STABLE PARALLEL SAFE STRICT COST 1
AS $function$select $2 + $1$function$
]]></string>
			<comment><![CDATA[implementation of + operator]]></comment>
		</function>
		<function name="interval_pl_timetz" id="Function_2ab223f1" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.interval_pl_timetz(interval, time with time zone)
 RETURNS time with time zone
 LANGUAGE sql
 IMMUTABLE PARALLEL SAFE STRICT COST 1
AS $function$select $2 + $1$function$
]]></string>
			<comment><![CDATA[implementation of + operator]]></comment>
		</function>
		<function name="interval_recv" id="Function_13abbe7" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.interval_recv(internal, oid, integer)
 RETURNS interval
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$interval_recv$function$
]]></string>
			<comment><![CDATA[I/O]]></comment>
		</function>
		<function name="interval_send" id="Function_211f79b" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.interval_send(interval)
 RETURNS bytea
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$interval_send$function$
]]></string>
			<comment><![CDATA[I/O]]></comment>
		</function>
		<function name="interval_smaller" id="Function_261c269" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.interval_smaller(interval, interval)
 RETURNS interval
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$interval_smaller$function$
]]></string>
			<comment><![CDATA[smaller of two]]></comment>
		</function>
		<function name="interval_transform" id="Function_1a1034eb" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.interval_transform(internal)
 RETURNS internal
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$interval_transform$function$
]]></string>
			<comment><![CDATA[transform an interval length coercion]]></comment>
		</function>
		<function name="interval_um" id="Function_422f493" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.interval_um(interval)
 RETURNS interval
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$interval_um$function$
]]></string>
			<comment><![CDATA[implementation of - operator]]></comment>
		</function>
		<function name="intervaltypmodin" id="Function_2317e2f8" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.intervaltypmodin(cstring[])
 RETURNS integer
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$intervaltypmodin$function$
]]></string>
			<comment><![CDATA[I/O typmod]]></comment>
		</function>
		<function name="intervaltypmodout" id="Function_a93fa97" isSystem="false" >
			<comment><![CDATA[I/O typmod]]></comment>
		</function>
		<function name="intinterval" id="Function_3001d5d4" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.intinterval(abstime, tinterval)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$intinterval$function$
]]></string>
			<comment><![CDATA[implementation of <?> operator]]></comment>
		</function>
		<function name="isclosed" id="Function_4490f9f" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.isclosed(path)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$path_isclosed$function$
]]></string>
			<comment><![CDATA[path closed?]]></comment>
		</function>
		<function name="isempty" id="Function_36eddcc7" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.isempty(anyrange)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$range_empty$function$
]]></string>
			<comment><![CDATA[is the range empty?]]></comment>
		</function>
		<function name="isfinite" id="Function_1857aa75" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.isfinite(abstime)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$abstime_finite$function$
CREATE OR REPLACE FUNCTION pg_catalog.isfinite(date)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$date_finite$function$
CREATE OR REPLACE FUNCTION pg_catalog.isfinite(timestamp with time zone)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$timestamp_finite$function$
CREATE OR REPLACE FUNCTION pg_catalog.isfinite(interval)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$interval_finite$function$
CREATE OR REPLACE FUNCTION pg_catalog.isfinite(timestamp without time zone)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$timestamp_finite$function$
]]></string>
			<comment><![CDATA[finite date?]]></comment>
		</function>
		<function name="isfinite_001" id="Function_d67a520" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.isfinite(abstime)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$abstime_finite$function$
CREATE OR REPLACE FUNCTION pg_catalog.isfinite(date)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$date_finite$function$
CREATE OR REPLACE FUNCTION pg_catalog.isfinite(timestamp with time zone)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$timestamp_finite$function$
CREATE OR REPLACE FUNCTION pg_catalog.isfinite(interval)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$interval_finite$function$
CREATE OR REPLACE FUNCTION pg_catalog.isfinite(timestamp without time zone)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$timestamp_finite$function$
]]></string>
			<comment><![CDATA[finite date?]]></comment>
		</function>
		<function name="isfinite_002" id="Function_2f518b2a" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.isfinite(abstime)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$abstime_finite$function$
CREATE OR REPLACE FUNCTION pg_catalog.isfinite(date)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$date_finite$function$
CREATE OR REPLACE FUNCTION pg_catalog.isfinite(timestamp with time zone)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$timestamp_finite$function$
CREATE OR REPLACE FUNCTION pg_catalog.isfinite(interval)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$interval_finite$function$
CREATE OR REPLACE FUNCTION pg_catalog.isfinite(timestamp without time zone)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$timestamp_finite$function$
]]></string>
			<comment><![CDATA[finite date?]]></comment>
		</function>
		<function name="isfinite_003" id="Function_251fdd8a" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.isfinite(abstime)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$abstime_finite$function$
CREATE OR REPLACE FUNCTION pg_catalog.isfinite(date)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$date_finite$function$
CREATE OR REPLACE FUNCTION pg_catalog.isfinite(timestamp with time zone)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$timestamp_finite$function$
CREATE OR REPLACE FUNCTION pg_catalog.isfinite(interval)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$interval_finite$function$
CREATE OR REPLACE FUNCTION pg_catalog.isfinite(timestamp without time zone)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$timestamp_finite$function$
]]></string>
			<comment><![CDATA[finite date?]]></comment>
		</function>
		<function name="isfinite_004" id="Function_3196a2d5" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.isfinite(abstime)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$abstime_finite$function$
CREATE OR REPLACE FUNCTION pg_catalog.isfinite(date)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$date_finite$function$
CREATE OR REPLACE FUNCTION pg_catalog.isfinite(timestamp with time zone)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$timestamp_finite$function$
CREATE OR REPLACE FUNCTION pg_catalog.isfinite(interval)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$interval_finite$function$
CREATE OR REPLACE FUNCTION pg_catalog.isfinite(timestamp without time zone)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$timestamp_finite$function$
]]></string>
			<comment><![CDATA[finite date?]]></comment>
		</function>
		<function name="ishorizontal" id="Function_38c06b1b" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.ishorizontal(lseg)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$lseg_horizontal$function$
CREATE OR REPLACE FUNCTION pg_catalog.ishorizontal(line)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$line_horizontal$function$
CREATE OR REPLACE FUNCTION pg_catalog.ishorizontal(point, point)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$point_horiz$function$
]]></string>
			<comment><![CDATA[horizontally aligned]]></comment>
		</function>
		<function name="ishorizontal_001" id="Function_271dce5f" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.ishorizontal(lseg)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$lseg_horizontal$function$
CREATE OR REPLACE FUNCTION pg_catalog.ishorizontal(line)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$line_horizontal$function$
CREATE OR REPLACE FUNCTION pg_catalog.ishorizontal(point, point)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$point_horiz$function$
]]></string>
			<comment><![CDATA[horizontally aligned]]></comment>
		</function>
		<function name="ishorizontal_002" id="Function_3443e94e" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.ishorizontal(lseg)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$lseg_horizontal$function$
CREATE OR REPLACE FUNCTION pg_catalog.ishorizontal(line)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$line_horizontal$function$
CREATE OR REPLACE FUNCTION pg_catalog.ishorizontal(point, point)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$point_horiz$function$
]]></string>
			<comment><![CDATA[horizontally aligned]]></comment>
		</function>
		<function name="iso8859_1_to_utf8" id="Function_270c5aff" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.iso8859_1_to_utf8(integer, integer, cstring, internal, integer)
 RETURNS void
 LANGUAGE c
 PARALLEL SAFE STRICT
AS '$libdir/utf8_and_iso8859_1', $function$iso8859_1_to_utf8$function$
]]></string>
			<comment><![CDATA[internal conversion function for LATIN1 to UTF8]]></comment>
		</function>
		<function name="iso8859_to_utf8" id="Function_38b6f92c" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.iso8859_to_utf8(integer, integer, cstring, internal, integer)
 RETURNS void
 LANGUAGE c
 PARALLEL SAFE STRICT
AS '$libdir/utf8_and_iso8859', $function$iso8859_to_utf8$function$
]]></string>
			<comment><![CDATA[internal conversion function for ISO-8859-8 to UTF8]]></comment>
		</function>
		<function name="iso_to_koi8r" id="Function_1911f888" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.iso_to_koi8r(integer, integer, cstring, internal, integer)
 RETURNS void
 LANGUAGE c
 PARALLEL SAFE STRICT
AS '$libdir/cyrillic_and_mic', $function$iso_to_koi8r$function$
]]></string>
			<comment><![CDATA[internal conversion function for ISO-8859-5 to KOI8R]]></comment>
		</function>
		<function name="iso_to_mic" id="Function_231e4c0f" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.iso_to_mic(integer, integer, cstring, internal, integer)
 RETURNS void
 LANGUAGE c
 PARALLEL SAFE STRICT
AS '$libdir/cyrillic_and_mic', $function$iso_to_mic$function$
]]></string>
			<comment><![CDATA[internal conversion function for ISO-8859-5 to MULE_INTERNAL]]></comment>
		</function>
		<function name="iso_to_win1251" id="Function_1522e473" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.iso_to_win1251(integer, integer, cstring, internal, integer)
 RETURNS void
 LANGUAGE c
 PARALLEL SAFE STRICT
AS '$libdir/cyrillic_and_mic', $function$iso_to_win1251$function$
]]></string>
			<comment><![CDATA[internal conversion function for ISO-8859-5 to WIN1251]]></comment>
		</function>
		<function name="iso_to_win866" id="Function_331cd60d" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.iso_to_win866(integer, integer, cstring, internal, integer)
 RETURNS void
 LANGUAGE c
 PARALLEL SAFE STRICT
AS '$libdir/cyrillic_and_mic', $function$iso_to_win866$function$
]]></string>
			<comment><![CDATA[internal conversion function for ISO-8859-5 to WIN866]]></comment>
		</function>
		<function name="isopen" id="Function_3726f3e9" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.isopen(path)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$path_isopen$function$
]]></string>
			<comment><![CDATA[path open?]]></comment>
		</function>
		<function name="isparallel" id="Function_a851e26" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.isparallel(lseg, lseg)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$lseg_parallel$function$
CREATE OR REPLACE FUNCTION pg_catalog.isparallel(line, line)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$line_parallel$function$
]]></string>
			<comment><![CDATA[parallel]]></comment>
		</function>
		<function name="isparallel_001" id="Function_2e25e1b7" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.isparallel(lseg, lseg)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$lseg_parallel$function$
CREATE OR REPLACE FUNCTION pg_catalog.isparallel(line, line)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$line_parallel$function$
]]></string>
			<comment><![CDATA[parallel]]></comment>
		</function>
		<function name="isperp" id="Function_968adbc" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.isperp(lseg, lseg)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$lseg_perp$function$
CREATE OR REPLACE FUNCTION pg_catalog.isperp(line, line)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$line_perp$function$
]]></string>
			<comment><![CDATA[perpendicular]]></comment>
		</function>
		<function name="isperp_001" id="Function_c2338fb" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.isperp(lseg, lseg)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$lseg_perp$function$
CREATE OR REPLACE FUNCTION pg_catalog.isperp(line, line)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$line_perp$function$
]]></string>
			<comment><![CDATA[perpendicular]]></comment>
		</function>
		<function name="isvertical" id="Function_348eff1d" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.isvertical(lseg)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$lseg_vertical$function$
CREATE OR REPLACE FUNCTION pg_catalog.isvertical(line)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$line_vertical$function$
CREATE OR REPLACE FUNCTION pg_catalog.isvertical(point, point)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$point_vert$function$
]]></string>
			<comment><![CDATA[vertically aligned]]></comment>
		</function>
		<function name="isvertical_001" id="Function_621fad7" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.isvertical(lseg)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$lseg_vertical$function$
CREATE OR REPLACE FUNCTION pg_catalog.isvertical(line)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$line_vertical$function$
CREATE OR REPLACE FUNCTION pg_catalog.isvertical(point, point)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$point_vert$function$
]]></string>
			<comment><![CDATA[vertically aligned]]></comment>
		</function>
		<function name="isvertical_002" id="Function_24954135" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.isvertical(lseg)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$lseg_vertical$function$
CREATE OR REPLACE FUNCTION pg_catalog.isvertical(line)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$line_vertical$function$
CREATE OR REPLACE FUNCTION pg_catalog.isvertical(point, point)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$point_vert$function$
]]></string>
			<comment><![CDATA[vertically aligned]]></comment>
		</function>
		<function name="johab_to_utf8" id="Function_bd22b90" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.johab_to_utf8(integer, integer, cstring, internal, integer)
 RETURNS void
 LANGUAGE c
 PARALLEL SAFE STRICT
AS '$libdir/utf8_and_johab', $function$johab_to_utf8$function$
]]></string>
			<comment><![CDATA[internal conversion function for JOHAB to UTF8]]></comment>
		</function>
		<function name="json_agg" id="Function_11710c5a" isSystem="false" >
			<comment><![CDATA[aggregate input into json]]></comment>
		</function>
		<function name="json_agg_finalfn" id="Function_522c275" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.json_agg_finalfn(internal)
 RETURNS json
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE
AS $function$json_agg_finalfn$function$
]]></string>
			<comment><![CDATA[json aggregate final function]]></comment>
		</function>
		<function name="json_agg_transfn" id="Function_29109e4a" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.json_agg_transfn(internal, anyelement)
 RETURNS internal
 LANGUAGE internal
 STABLE PARALLEL SAFE
AS $function$json_agg_transfn$function$
]]></string>
			<comment><![CDATA[json aggregate transition function]]></comment>
		</function>
		<function name="json_array_element" id="Function_30d11890" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.json_array_element(from_json json, element_index integer)
 RETURNS json
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$json_array_element$function$
]]></string>
			<comment><![CDATA[implementation of -> operator]]></comment>
		</function>
		<function name="json_array_element_text" id="Function_136a8f16" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.json_array_element_text(from_json json, element_index integer)
 RETURNS text
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$json_array_element_text$function$
]]></string>
			<comment><![CDATA[implementation of ->> operator]]></comment>
		</function>
		<function name="json_array_elements" id="Function_32a0cc81" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.json_array_elements(from_json json, OUT value json)
 RETURNS SETOF json
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT ROWS 100
AS $function$json_array_elements$function$
]]></string>
			<comment><![CDATA[key value pairs of a json object]]></comment>
		</function>
		<function name="json_array_elements_text" id="Function_155960b6" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.json_array_elements_text(from_json json, OUT value text)
 RETURNS SETOF text
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT ROWS 100
AS $function$json_array_elements_text$function$
]]></string>
			<comment><![CDATA[elements of json array]]></comment>
		</function>
		<function name="json_array_length" id="Function_2e3bcc50" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.json_array_length(json)
 RETURNS integer
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$json_array_length$function$
]]></string>
			<comment><![CDATA[length of json array]]></comment>
		</function>
		<function name="json_build_array" id="Function_3afc5d83" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.json_build_array()
 RETURNS json
 LANGUAGE internal
 STABLE PARALLEL SAFE
AS $function$json_build_array_noargs$function$
CREATE OR REPLACE FUNCTION pg_catalog.json_build_array(VARIADIC "any")
 RETURNS json
 LANGUAGE internal
 STABLE PARALLEL SAFE
AS $function$json_build_array$function$
]]></string>
			<comment><![CDATA[build a json array from any inputs]]></comment>
		</function>
		<function name="json_build_array_001" id="Function_2eecb03" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.json_build_array()
 RETURNS json
 LANGUAGE internal
 STABLE PARALLEL SAFE
AS $function$json_build_array_noargs$function$
CREATE OR REPLACE FUNCTION pg_catalog.json_build_array(VARIADIC "any")
 RETURNS json
 LANGUAGE internal
 STABLE PARALLEL SAFE
AS $function$json_build_array$function$
]]></string>
			<comment><![CDATA[build a json array from any inputs]]></comment>
		</function>
		<function name="json_build_object" id="Function_47d6987" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.json_build_object()
 RETURNS json
 LANGUAGE internal
 STABLE PARALLEL SAFE
AS $function$json_build_object_noargs$function$
CREATE OR REPLACE FUNCTION pg_catalog.json_build_object(VARIADIC "any")
 RETURNS json
 LANGUAGE internal
 STABLE PARALLEL SAFE
AS $function$json_build_object$function$
]]></string>
			<comment><![CDATA[build a json object from pairwise key/value inputs]]></comment>
		</function>
		<function name="json_build_object_001" id="Function_2b015288" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.json_build_object()
 RETURNS json
 LANGUAGE internal
 STABLE PARALLEL SAFE
AS $function$json_build_object_noargs$function$
CREATE OR REPLACE FUNCTION pg_catalog.json_build_object(VARIADIC "any")
 RETURNS json
 LANGUAGE internal
 STABLE PARALLEL SAFE
AS $function$json_build_object$function$
]]></string>
			<comment><![CDATA[build a json object from pairwise key/value inputs]]></comment>
		</function>
		<function name="json_each" id="Function_bcfcc56" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.json_each(from_json json, OUT key text, OUT value json)
 RETURNS SETOF record
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT ROWS 100
AS $function$json_each$function$
]]></string>
			<comment><![CDATA[key value pairs of a json object]]></comment>
		</function>
		<function name="json_each_text" id="Function_2f5306a7" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.json_each_text(from_json json, OUT key text, OUT value text)
 RETURNS SETOF record
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT ROWS 100
AS $function$json_each_text$function$
]]></string>
			<comment><![CDATA[key value pairs of a json object]]></comment>
		</function>
		<function name="json_extract_path" id="Function_3a435517" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.json_extract_path(from_json json, VARIADIC path_elems text[])
 RETURNS json
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$json_extract_path$function$
]]></string>
			<comment><![CDATA[get value from json with path elements]]></comment>
		</function>
		<function name="json_extract_path_text" id="Function_2d0d8c5d" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.json_extract_path_text(from_json json, VARIADIC path_elems text[])
 RETURNS text
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$json_extract_path_text$function$
]]></string>
			<comment><![CDATA[get value from json as text with path elements]]></comment>
		</function>
		<function name="json_in" id="Function_27e94ded" isSystem="false" >
			<comment><![CDATA[I/O]]></comment>
		</function>
		<function name="json_object" id="Function_110a61a9" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.json_object(text[])
 RETURNS json
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$json_object$function$
CREATE OR REPLACE FUNCTION pg_catalog.json_object(text[], text[])
 RETURNS json
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$json_object_two_arg$function$
]]></string>
			<comment><![CDATA[map text array of key value pairs to json object]]></comment>
		</function>
		<function name="json_object_001" id="Function_1992779f" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.json_object(text[])
 RETURNS json
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$json_object$function$
CREATE OR REPLACE FUNCTION pg_catalog.json_object(text[], text[])
 RETURNS json
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$json_object_two_arg$function$
]]></string>
			<comment><![CDATA[map text array of key value pairs to json object]]></comment>
		</function>
		<function name="json_object_agg" id="Function_395f555e" isSystem="false" >
			<comment><![CDATA[aggregate input into a json object]]></comment>
		</function>
		<function name="json_object_agg_finalfn" id="Function_30b50131" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.json_object_agg_finalfn(internal)
 RETURNS json
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE
AS $function$json_object_agg_finalfn$function$
]]></string>
			<comment><![CDATA[json object aggregate final function]]></comment>
		</function>
		<function name="json_object_agg_transfn" id="Function_18a327d9" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.json_object_agg_transfn(internal, "any", "any")
 RETURNS internal
 LANGUAGE internal
 STABLE PARALLEL SAFE
AS $function$json_object_agg_transfn$function$
]]></string>
			<comment><![CDATA[json object aggregate transition function]]></comment>
		</function>
		<function name="json_object_field" id="Function_9abc7e7" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.json_object_field(from_json json, field_name text)
 RETURNS json
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$json_object_field$function$
]]></string>
			<comment><![CDATA[implementation of -> operator]]></comment>
		</function>
		<function name="json_object_field_text" id="Function_154275b9" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.json_object_field_text(from_json json, field_name text)
 RETURNS text
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$json_object_field_text$function$
]]></string>
			<comment><![CDATA[implementation of ->> operator]]></comment>
		</function>
		<function name="json_object_keys" id="Function_34386945" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.json_object_keys(json)
 RETURNS SETOF text
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT ROWS 100
AS $function$json_object_keys$function$
]]></string>
			<comment><![CDATA[get json object keys]]></comment>
		</function>
		<function name="json_out" id="Function_1fcb7b8c" isSystem="false" >
			<comment><![CDATA[I/O]]></comment>
		</function>
		<function name="json_populate_record" id="Function_178af3fb" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.json_populate_record(base anyelement, from_json json, use_json_as_text boolean DEFAULT false)
 RETURNS anyelement
 LANGUAGE internal
 STABLE PARALLEL SAFE
AS $function$json_populate_record$function$
]]></string>
			<comment><![CDATA[get record fields from a json object]]></comment>
		</function>
		<function name="json_populate_recordset" id="Function_86df6b3" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.json_populate_recordset(base anyelement, from_json json, use_json_as_text boolean DEFAULT false)
 RETURNS SETOF anyelement
 LANGUAGE internal
 STABLE PARALLEL SAFE ROWS 100
AS $function$json_populate_recordset$function$
]]></string>
			<comment><![CDATA[get set of records with fields from a json array of objects]]></comment>
		</function>
		<function name="json_recv" id="Function_15cc8d06" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.json_recv(internal)
 RETURNS json
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$json_recv$function$
]]></string>
			<comment><![CDATA[I/O]]></comment>
		</function>
		<function name="json_send" id="Function_248e3e4e" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.json_send(json)
 RETURNS bytea
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$json_send$function$
]]></string>
			<comment><![CDATA[I/O]]></comment>
		</function>
		<function name="json_strip_nulls" id="Function_1b46f800" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.json_strip_nulls(json)
 RETURNS json
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$json_strip_nulls$function$
]]></string>
			<comment><![CDATA[remove object fields with null values from json]]></comment>
		</function>
		<function name="json_to_record" id="Function_e502619" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.json_to_record(json)
 RETURNS record
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$json_to_record$function$
]]></string>
			<comment><![CDATA[get record fields from a json object]]></comment>
		</function>
		<function name="json_to_recordset" id="Function_21cd226d" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.json_to_recordset(json)
 RETURNS SETOF record
 LANGUAGE internal
 STABLE PARALLEL SAFE ROWS 100
AS $function$json_to_recordset$function$
]]></string>
			<comment><![CDATA[get set of records with fields from a json array of objects]]></comment>
		</function>
		<function name="json_typeof" id="Function_2f8d4497" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.json_typeof(json)
 RETURNS text
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$json_typeof$function$
]]></string>
			<comment><![CDATA[get the type of a json value]]></comment>
		</function>
		<function name="jsonb_agg" id="Function_26169529" isSystem="false" >
			<comment><![CDATA[aggregate input into jsonb]]></comment>
		</function>
		<function name="jsonb_agg_finalfn" id="Function_1890ece9" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.jsonb_agg_finalfn(internal)
 RETURNS jsonb
 LANGUAGE internal
 STABLE PARALLEL SAFE
AS $function$jsonb_agg_finalfn$function$
]]></string>
			<comment><![CDATA[jsonb aggregate final function]]></comment>
		</function>
		<function name="jsonb_agg_transfn" id="Function_194156ca" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.jsonb_agg_transfn(internal, anyelement)
 RETURNS internal
 LANGUAGE internal
 STABLE PARALLEL SAFE
AS $function$jsonb_agg_transfn$function$
]]></string>
			<comment><![CDATA[jsonb aggregate transition function]]></comment>
		</function>
		<function name="jsonb_array_element" id="Function_f7a82bb" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.jsonb_array_element(from_json jsonb, element_index integer)
 RETURNS jsonb
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$jsonb_array_element$function$
]]></string>
			<comment><![CDATA[implementation of -> operator]]></comment>
		</function>
		<function name="jsonb_array_element_text" id="Function_15ae8e8b" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.jsonb_array_element_text(from_json jsonb, element_index integer)
 RETURNS text
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$jsonb_array_element_text$function$
]]></string>
			<comment><![CDATA[implementation of ->> operator]]></comment>
		</function>
		<function name="jsonb_array_elements" id="Function_14590e67" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.jsonb_array_elements(from_json jsonb, OUT value jsonb)
 RETURNS SETOF jsonb
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT ROWS 100
AS $function$jsonb_array_elements$function$
]]></string>
			<comment><![CDATA[elements of a jsonb array]]></comment>
		</function>
		<function name="jsonb_array_elements_text" id="Function_1b94c1d2" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.jsonb_array_elements_text(from_json jsonb, OUT value text)
 RETURNS SETOF text
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT ROWS 100
AS $function$jsonb_array_elements_text$function$
]]></string>
			<comment><![CDATA[elements of jsonb array]]></comment>
		</function>
		<function name="jsonb_array_length" id="Function_1d441f31" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.jsonb_array_length(jsonb)
 RETURNS integer
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$jsonb_array_length$function$
]]></string>
			<comment><![CDATA[length of jsonb array]]></comment>
		</function>
		<function name="jsonb_build_array" id="Function_3a9307b8" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.jsonb_build_array()
 RETURNS jsonb
 LANGUAGE internal
 STABLE PARALLEL SAFE
AS $function$jsonb_build_array_noargs$function$
CREATE OR REPLACE FUNCTION pg_catalog.jsonb_build_array(VARIADIC "any")
 RETURNS jsonb
 LANGUAGE internal
 STABLE PARALLEL SAFE
AS $function$jsonb_build_array$function$
]]></string>
			<comment><![CDATA[build a jsonb array from any inputs]]></comment>
		</function>
		<function name="jsonb_build_array_001" id="Function_1965deb4" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.jsonb_build_array()
 RETURNS jsonb
 LANGUAGE internal
 STABLE PARALLEL SAFE
AS $function$jsonb_build_array_noargs$function$
CREATE OR REPLACE FUNCTION pg_catalog.jsonb_build_array(VARIADIC "any")
 RETURNS jsonb
 LANGUAGE internal
 STABLE PARALLEL SAFE
AS $function$jsonb_build_array$function$
]]></string>
			<comment><![CDATA[build a jsonb array from any inputs]]></comment>
		</function>
		<function name="jsonb_build_object" id="Function_2311bac8" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.jsonb_build_object()
 RETURNS jsonb
 LANGUAGE internal
 STABLE PARALLEL SAFE
AS $function$jsonb_build_object_noargs$function$
CREATE OR REPLACE FUNCTION pg_catalog.jsonb_build_object(VARIADIC "any")
 RETURNS jsonb
 LANGUAGE internal
 STABLE PARALLEL SAFE
AS $function$jsonb_build_object$function$
]]></string>
			<comment><![CDATA[build a jsonb object from pairwise key/value inputs]]></comment>
		</function>
		<function name="jsonb_build_object_001" id="Function_22d4e36e" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.jsonb_build_object()
 RETURNS jsonb
 LANGUAGE internal
 STABLE PARALLEL SAFE
AS $function$jsonb_build_object_noargs$function$
CREATE OR REPLACE FUNCTION pg_catalog.jsonb_build_object(VARIADIC "any")
 RETURNS jsonb
 LANGUAGE internal
 STABLE PARALLEL SAFE
AS $function$jsonb_build_object$function$
]]></string>
			<comment><![CDATA[build a jsonb object from pairwise key/value inputs]]></comment>
		</function>
		<function name="jsonb_cmp" id="Function_6857a0b" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.jsonb_cmp(jsonb, jsonb)
 RETURNS integer
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$jsonb_cmp$function$
]]></string>
			<comment><![CDATA[less-equal-greater]]></comment>
		</function>
		<function name="jsonb_concat" id="Function_29cfe0e4" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.jsonb_concat(jsonb, jsonb)
 RETURNS jsonb
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$jsonb_concat$function$
]]></string>
			<comment><![CDATA[implementation of || operator]]></comment>
		</function>
		<function name="jsonb_contained" id="Function_30b66270" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.jsonb_contained(jsonb, jsonb)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$jsonb_contained$function$
]]></string>
			<comment><![CDATA[implementation of <@ operator]]></comment>
		</function>
		<function name="jsonb_contains" id="Function_b7df494" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.jsonb_contains(jsonb, jsonb)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$jsonb_contains$function$
]]></string>
			<comment><![CDATA[implementation of @> operator]]></comment>
		</function>
		<function name="jsonb_delete" id="Function_3b13818c" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.jsonb_delete(jsonb, integer)
 RETURNS jsonb
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$jsonb_delete_idx$function$
CREATE OR REPLACE FUNCTION pg_catalog.jsonb_delete(jsonb, text)
 RETURNS jsonb
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$jsonb_delete$function$
]]></string>
			<comment><![CDATA[implementation of - operator]]></comment>
		</function>
		<function name="jsonb_delete_001" id="Function_18afc2c2" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.jsonb_delete(jsonb, integer)
 RETURNS jsonb
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$jsonb_delete_idx$function$
CREATE OR REPLACE FUNCTION pg_catalog.jsonb_delete(jsonb, text)
 RETURNS jsonb
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$jsonb_delete$function$
]]></string>
			<comment><![CDATA[implementation of - operator]]></comment>
		</function>
		<function name="jsonb_delete_path" id="Function_1714ed00" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.jsonb_delete_path(jsonb, text[])
 RETURNS jsonb
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$jsonb_delete_path$function$
]]></string>
			<comment><![CDATA[implementation of #- operator]]></comment>
		</function>
		<function name="jsonb_each" id="Function_3b4027aa" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.jsonb_each(from_json jsonb, OUT key text, OUT value jsonb)
 RETURNS SETOF record
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT ROWS 100
AS $function$jsonb_each$function$
]]></string>
			<comment><![CDATA[key value pairs of a jsonb object]]></comment>
		</function>
		<function name="jsonb_each_text" id="Function_33af968a" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.jsonb_each_text(from_json jsonb, OUT key text, OUT value text)
 RETURNS SETOF record
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT ROWS 100
AS $function$jsonb_each_text$function$
]]></string>
			<comment><![CDATA[key value pairs of a jsonb object]]></comment>
		</function>
		<function name="jsonb_eq" id="Function_2fee6b8c" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.jsonb_eq(jsonb, jsonb)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$jsonb_eq$function$
]]></string>
			<comment><![CDATA[implementation of = operator]]></comment>
		</function>
		<function name="jsonb_exists" id="Function_29932ce3" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.jsonb_exists(jsonb, text)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$jsonb_exists$function$
]]></string>
			<comment><![CDATA[implementation of ? operator]]></comment>
		</function>
		<function name="jsonb_exists_all" id="Function_3931701c" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.jsonb_exists_all(jsonb, text[])
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$jsonb_exists_all$function$
]]></string>
			<comment><![CDATA[implementation of ?& operator]]></comment>
		</function>
		<function name="jsonb_exists_any" id="Function_25cdb4f1" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.jsonb_exists_any(jsonb, text[])
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$jsonb_exists_any$function$
]]></string>
			<comment><![CDATA[implementation of ?| operator]]></comment>
		</function>
		<function name="jsonb_extract_path" id="Function_2e968e53" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.jsonb_extract_path(from_json jsonb, VARIADIC path_elems text[])
 RETURNS jsonb
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$jsonb_extract_path$function$
]]></string>
			<comment><![CDATA[get value from jsonb with path elements]]></comment>
		</function>
		<function name="jsonb_extract_path_text" id="Function_404c446" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.jsonb_extract_path_text(from_json jsonb, VARIADIC path_elems text[])
 RETURNS text
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$jsonb_extract_path_text$function$
]]></string>
			<comment><![CDATA[get value from jsonb as text with path elements]]></comment>
		</function>
		<function name="jsonb_ge" id="Function_299c7305" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.jsonb_ge(jsonb, jsonb)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$jsonb_ge$function$
]]></string>
			<comment><![CDATA[implementation of >= operator]]></comment>
		</function>
		<function name="jsonb_gt" id="Function_363ae62b" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.jsonb_gt(jsonb, jsonb)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$jsonb_gt$function$
]]></string>
			<comment><![CDATA[implementation of > operator]]></comment>
		</function>
		<function name="jsonb_hash" id="Function_369da0c7" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.jsonb_hash(jsonb)
 RETURNS integer
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$jsonb_hash$function$
]]></string>
			<comment><![CDATA[hash]]></comment>
		</function>
		<function name="jsonb_in" id="Function_138c38c9" isSystem="false" >
			<comment><![CDATA[I/O]]></comment>
		</function>
		<function name="jsonb_insert" id="Function_24e3bc24" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.jsonb_insert(jsonb_in jsonb, path text[], replacement jsonb, insert_after boolean DEFAULT false)
 RETURNS jsonb
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$jsonb_insert$function$
]]></string>
			<comment><![CDATA[Insert value into a jsonb]]></comment>
		</function>
		<function name="jsonb_le" id="Function_2ffe07d7" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.jsonb_le(jsonb, jsonb)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$jsonb_le$function$
]]></string>
			<comment><![CDATA[implementation of <= operator]]></comment>
		</function>
		<function name="jsonb_lt" id="Function_19e7d9af" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.jsonb_lt(jsonb, jsonb)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$jsonb_lt$function$
]]></string>
			<comment><![CDATA[implementation of < operator]]></comment>
		</function>
		<function name="jsonb_ne" id="Function_2507e230" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.jsonb_ne(jsonb, jsonb)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$jsonb_ne$function$
]]></string>
			<comment><![CDATA[implementation of <> operator]]></comment>
		</function>
		<function name="jsonb_object" id="Function_c6e6cba" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.jsonb_object(text[])
 RETURNS jsonb
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$jsonb_object$function$
CREATE OR REPLACE FUNCTION pg_catalog.jsonb_object(text[], text[])
 RETURNS jsonb
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$jsonb_object_two_arg$function$
]]></string>
			<comment><![CDATA[map text array of key value pairs to jsonb object]]></comment>
		</function>
		<function name="jsonb_object_001" id="Function_2f6541c7" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.jsonb_object(text[])
 RETURNS jsonb
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$jsonb_object$function$
CREATE OR REPLACE FUNCTION pg_catalog.jsonb_object(text[], text[])
 RETURNS jsonb
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$jsonb_object_two_arg$function$
]]></string>
			<comment><![CDATA[map text array of key value pairs to jsonb object]]></comment>
		</function>
		<function name="jsonb_object_agg" id="Function_379641e8" isSystem="false" >
			<comment><![CDATA[aggregate inputs into jsonb object]]></comment>
		</function>
		<function name="jsonb_object_agg_finalfn" id="Function_1ff225" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.jsonb_object_agg_finalfn(internal)
 RETURNS jsonb
 LANGUAGE internal
 STABLE PARALLEL SAFE
AS $function$jsonb_object_agg_finalfn$function$
]]></string>
			<comment><![CDATA[jsonb object aggregate final function]]></comment>
		</function>
		<function name="jsonb_object_agg_transfn" id="Function_29567a8e" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.jsonb_object_agg_transfn(internal, "any", "any")
 RETURNS internal
 LANGUAGE internal
 STABLE PARALLEL SAFE
AS $function$jsonb_object_agg_transfn$function$
]]></string>
			<comment><![CDATA[jsonb object aggregate transition function]]></comment>
		</function>
		<function name="jsonb_object_field" id="Function_14418600" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.jsonb_object_field(from_json jsonb, field_name text)
 RETURNS jsonb
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$jsonb_object_field$function$
]]></string>
			<comment><![CDATA[implementation of -> operator]]></comment>
		</function>
		<function name="jsonb_object_field_text" id="Function_30781ac" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.jsonb_object_field_text(from_json jsonb, field_name text)
 RETURNS text
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$jsonb_object_field_text$function$
]]></string>
			<comment><![CDATA[implementation of ->> operator]]></comment>
		</function>
		<function name="jsonb_object_keys" id="Function_290ab056" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.jsonb_object_keys(jsonb)
 RETURNS SETOF text
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT ROWS 100
AS $function$jsonb_object_keys$function$
]]></string>
			<comment><![CDATA[get jsonb object keys]]></comment>
		</function>
		<function name="jsonb_out" id="Function_aa64c8c" isSystem="false" >
			<comment><![CDATA[I/O]]></comment>
		</function>
		<function name="jsonb_populate_record" id="Function_39efd182" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.jsonb_populate_record(anyelement, jsonb)
 RETURNS anyelement
 LANGUAGE internal
 STABLE PARALLEL SAFE
AS $function$jsonb_populate_record$function$
]]></string>
			<comment><![CDATA[get record fields from a jsonb object]]></comment>
		</function>
		<function name="jsonb_populate_recordset" id="Function_d57ef3d" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.jsonb_populate_recordset(anyelement, jsonb)
 RETURNS SETOF anyelement
 LANGUAGE internal
 STABLE PARALLEL SAFE ROWS 100
AS $function$jsonb_populate_recordset$function$
]]></string>
			<comment><![CDATA[get set of records with fields from a jsonb array of objects]]></comment>
		</function>
		<function name="jsonb_pretty" id="Function_397900c" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.jsonb_pretty(jsonb)
 RETURNS text
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$jsonb_pretty$function$
]]></string>
			<comment><![CDATA[Indented text from jsonb]]></comment>
		</function>
		<function name="jsonb_recv" id="Function_1b087056" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.jsonb_recv(internal)
 RETURNS jsonb
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$jsonb_recv$function$
]]></string>
			<comment><![CDATA[I/O]]></comment>
		</function>
		<function name="jsonb_send" id="Function_20573fb2" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.jsonb_send(jsonb)
 RETURNS bytea
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$jsonb_send$function$
]]></string>
			<comment><![CDATA[I/O]]></comment>
		</function>
		<function name="jsonb_set" id="Function_11395df2" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.jsonb_set(jsonb_in jsonb, path text[], replacement jsonb, create_if_missing boolean DEFAULT true)
 RETURNS jsonb
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$jsonb_set$function$
]]></string>
			<comment><![CDATA[Set part of a jsonb]]></comment>
		</function>
		<function name="jsonb_strip_nulls" id="Function_2cc2d1e5" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.jsonb_strip_nulls(jsonb)
 RETURNS jsonb
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$jsonb_strip_nulls$function$
]]></string>
			<comment><![CDATA[remove object fields with null values from jsonb]]></comment>
		</function>
		<function name="jsonb_to_record" id="Function_326438d9" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.jsonb_to_record(jsonb)
 RETURNS record
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$jsonb_to_record$function$
]]></string>
			<comment><![CDATA[get record fields from a jsonb object]]></comment>
		</function>
		<function name="jsonb_to_recordset" id="Function_25620440" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.jsonb_to_recordset(jsonb)
 RETURNS SETOF record
 LANGUAGE internal
 STABLE PARALLEL SAFE ROWS 100
AS $function$jsonb_to_recordset$function$
]]></string>
			<comment><![CDATA[get set of records with fields from a jsonb array of objects]]></comment>
		</function>
		<function name="jsonb_typeof" id="Function_3af99466" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.jsonb_typeof(jsonb)
 RETURNS text
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$jsonb_typeof$function$
]]></string>
			<comment><![CDATA[get the type of a jsonb value]]></comment>
		</function>
		<function name="justify_days" id="Function_19dc6e33" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.justify_days(interval)
 RETURNS interval
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$interval_justify_days$function$
]]></string>
			<comment><![CDATA[promote groups of 30 days to numbers of months]]></comment>
		</function>
		<function name="justify_hours" id="Function_23a3a388" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.justify_hours(interval)
 RETURNS interval
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$interval_justify_hours$function$
]]></string>
			<comment><![CDATA[promote groups of 24 hours to numbers of days]]></comment>
		</function>
		<function name="justify_interval" id="Function_1db2d857" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.justify_interval(interval)
 RETURNS interval
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$interval_justify_interval$function$
]]></string>
			<comment><![CDATA[promote groups of 24 hours to numbers of days and promote groups of 30 days to numbers of months]]></comment>
		</function>
		<function name="koi8r_to_iso" id="Function_27339c69" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.koi8r_to_iso(integer, integer, cstring, internal, integer)
 RETURNS void
 LANGUAGE c
 PARALLEL SAFE STRICT
AS '$libdir/cyrillic_and_mic', $function$koi8r_to_iso$function$
]]></string>
			<comment><![CDATA[internal conversion function for KOI8R to ISO-8859-5]]></comment>
		</function>
		<function name="koi8r_to_mic" id="Function_8c27a22" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.koi8r_to_mic(integer, integer, cstring, internal, integer)
 RETURNS void
 LANGUAGE c
 PARALLEL SAFE STRICT
AS '$libdir/cyrillic_and_mic', $function$koi8r_to_mic$function$
]]></string>
			<comment><![CDATA[internal conversion function for KOI8R to MULE_INTERNAL]]></comment>
		</function>
		<function name="koi8r_to_utf8" id="Function_4b471c4" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.koi8r_to_utf8(integer, integer, cstring, internal, integer)
 RETURNS void
 LANGUAGE c
 PARALLEL SAFE STRICT
AS '$libdir/utf8_and_cyrillic', $function$koi8r_to_utf8$function$
]]></string>
			<comment><![CDATA[internal conversion function for KOI8R to UTF8]]></comment>
		</function>
		<function name="koi8r_to_win1251" id="Function_2c327006" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.koi8r_to_win1251(integer, integer, cstring, internal, integer)
 RETURNS void
 LANGUAGE c
 PARALLEL SAFE STRICT
AS '$libdir/cyrillic_and_mic', $function$koi8r_to_win1251$function$
]]></string>
			<comment><![CDATA[internal conversion function for KOI8R to WIN1251]]></comment>
		</function>
		<function name="koi8r_to_win866" id="Function_248ec32e" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.koi8r_to_win866(integer, integer, cstring, internal, integer)
 RETURNS void
 LANGUAGE c
 PARALLEL SAFE STRICT
AS '$libdir/cyrillic_and_mic', $function$koi8r_to_win866$function$
]]></string>
			<comment><![CDATA[internal conversion function for KOI8R to WIN866]]></comment>
		</function>
		<function name="koi8u_to_utf8" id="Function_f42ad4a" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.koi8u_to_utf8(integer, integer, cstring, internal, integer)
 RETURNS void
 LANGUAGE c
 PARALLEL SAFE STRICT
AS '$libdir/utf8_and_cyrillic', $function$koi8u_to_utf8$function$
]]></string>
			<comment><![CDATA[internal conversion function for KOI8U to UTF8]]></comment>
		</function>
		<function name="lag" id="Function_3a53df5" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.lag(anyelement)
 RETURNS anyelement
 LANGUAGE internal
 WINDOW IMMUTABLE PARALLEL SAFE STRICT
AS $function$window_lag$function$
CREATE OR REPLACE FUNCTION pg_catalog.lag(anyelement, integer)
 RETURNS anyelement
 LANGUAGE internal
 WINDOW IMMUTABLE PARALLEL SAFE STRICT
AS $function$window_lag_with_offset$function$
CREATE OR REPLACE FUNCTION pg_catalog.lag(anyelement, integer, anyelement)
 RETURNS anyelement
 LANGUAGE internal
 WINDOW IMMUTABLE PARALLEL SAFE STRICT
AS $function$window_lag_with_offset_and_default$function$
]]></string>
			<comment><![CDATA[fetch the preceding row value]]></comment>
		</function>
		<function name="lag_001" id="Function_916fa6d" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.lag(anyelement)
 RETURNS anyelement
 LANGUAGE internal
 WINDOW IMMUTABLE PARALLEL SAFE STRICT
AS $function$window_lag$function$
CREATE OR REPLACE FUNCTION pg_catalog.lag(anyelement, integer)
 RETURNS anyelement
 LANGUAGE internal
 WINDOW IMMUTABLE PARALLEL SAFE STRICT
AS $function$window_lag_with_offset$function$
CREATE OR REPLACE FUNCTION pg_catalog.lag(anyelement, integer, anyelement)
 RETURNS anyelement
 LANGUAGE internal
 WINDOW IMMUTABLE PARALLEL SAFE STRICT
AS $function$window_lag_with_offset_and_default$function$
]]></string>
			<comment><![CDATA[fetch the preceding row value]]></comment>
		</function>
		<function name="lag_002" id="Function_3dee7b2" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.lag(anyelement)
 RETURNS anyelement
 LANGUAGE internal
 WINDOW IMMUTABLE PARALLEL SAFE STRICT
AS $function$window_lag$function$
CREATE OR REPLACE FUNCTION pg_catalog.lag(anyelement, integer)
 RETURNS anyelement
 LANGUAGE internal
 WINDOW IMMUTABLE PARALLEL SAFE STRICT
AS $function$window_lag_with_offset$function$
CREATE OR REPLACE FUNCTION pg_catalog.lag(anyelement, integer, anyelement)
 RETURNS anyelement
 LANGUAGE internal
 WINDOW IMMUTABLE PARALLEL SAFE STRICT
AS $function$window_lag_with_offset_and_default$function$
]]></string>
			<comment><![CDATA[fetch the preceding row value]]></comment>
		</function>
		<function name="language_handler_in" id="Function_18087a66" isSystem="false" >
			<comment><![CDATA[I/O]]></comment>
		</function>
		<function name="language_handler_out" id="Function_b21103" isSystem="false" >
			<comment><![CDATA[I/O]]></comment>
		</function>
		<function name="last_value" id="Function_1708e1b2" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.last_value(anyelement)
 RETURNS anyelement
 LANGUAGE internal
 WINDOW IMMUTABLE PARALLEL SAFE STRICT
AS $function$window_last_value$function$
]]></string>
			<comment><![CDATA[fetch the last row value]]></comment>
		</function>
		<function name="lastval" id="Function_1f42ad25" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.lastval()
 RETURNS bigint
 LANGUAGE internal
 STRICT
AS $function$lastval$function$
]]></string>
			<comment><![CDATA[current value from last used sequence]]></comment>
		</function>
		<function name="latin1_to_mic" id="Function_24c1444" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.latin1_to_mic(integer, integer, cstring, internal, integer)
 RETURNS void
 LANGUAGE c
 PARALLEL SAFE STRICT
AS '$libdir/latin_and_mic', $function$latin1_to_mic$function$
]]></string>
			<comment><![CDATA[internal conversion function for LATIN1 to MULE_INTERNAL]]></comment>
		</function>
		<function name="latin2_to_mic" id="Function_1c17493d" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.latin2_to_mic(integer, integer, cstring, internal, integer)
 RETURNS void
 LANGUAGE c
 PARALLEL SAFE STRICT
AS '$libdir/latin2_and_win1250', $function$latin2_to_mic$function$
]]></string>
			<comment><![CDATA[internal conversion function for LATIN2 to MULE_INTERNAL]]></comment>
		</function>
		<function name="latin2_to_win1250" id="Function_4faa95e" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.latin2_to_win1250(integer, integer, cstring, internal, integer)
 RETURNS void
 LANGUAGE c
 PARALLEL SAFE STRICT
AS '$libdir/latin2_and_win1250', $function$latin2_to_win1250$function$
]]></string>
			<comment><![CDATA[internal conversion function for LATIN2 to WIN1250]]></comment>
		</function>
		<function name="latin3_to_mic" id="Function_5e1da63" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.latin3_to_mic(integer, integer, cstring, internal, integer)
 RETURNS void
 LANGUAGE c
 PARALLEL SAFE STRICT
AS '$libdir/latin_and_mic', $function$latin3_to_mic$function$
]]></string>
			<comment><![CDATA[internal conversion function for LATIN3 to MULE_INTERNAL]]></comment>
		</function>
		<function name="latin4_to_mic" id="Function_16c89412" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.latin4_to_mic(integer, integer, cstring, internal, integer)
 RETURNS void
 LANGUAGE c
 PARALLEL SAFE STRICT
AS '$libdir/latin_and_mic', $function$latin4_to_mic$function$
]]></string>
			<comment><![CDATA[internal conversion function for LATIN4 to MULE_INTERNAL]]></comment>
		</function>
		<function name="lead" id="Function_39ce1d0" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.lead(anyelement)
 RETURNS anyelement
 LANGUAGE internal
 WINDOW IMMUTABLE PARALLEL SAFE STRICT
AS $function$window_lead$function$
CREATE OR REPLACE FUNCTION pg_catalog.lead(anyelement, integer)
 RETURNS anyelement
 LANGUAGE internal
 WINDOW IMMUTABLE PARALLEL SAFE STRICT
AS $function$window_lead_with_offset$function$
CREATE OR REPLACE FUNCTION pg_catalog.lead(anyelement, integer, anyelement)
 RETURNS anyelement
 LANGUAGE internal
 WINDOW IMMUTABLE PARALLEL SAFE STRICT
AS $function$window_lead_with_offset_and_default$function$
]]></string>
			<comment><![CDATA[fetch the following row value]]></comment>
		</function>
		<function name="lead_001" id="Function_1a600a68" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.lead(anyelement)
 RETURNS anyelement
 LANGUAGE internal
 WINDOW IMMUTABLE PARALLEL SAFE STRICT
AS $function$window_lead$function$
CREATE OR REPLACE FUNCTION pg_catalog.lead(anyelement, integer)
 RETURNS anyelement
 LANGUAGE internal
 WINDOW IMMUTABLE PARALLEL SAFE STRICT
AS $function$window_lead_with_offset$function$
CREATE OR REPLACE FUNCTION pg_catalog.lead(anyelement, integer, anyelement)
 RETURNS anyelement
 LANGUAGE internal
 WINDOW IMMUTABLE PARALLEL SAFE STRICT
AS $function$window_lead_with_offset_and_default$function$
]]></string>
			<comment><![CDATA[fetch the following row value]]></comment>
		</function>
		<function name="lead_002" id="Function_3f39f9f" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.lead(anyelement)
 RETURNS anyelement
 LANGUAGE internal
 WINDOW IMMUTABLE PARALLEL SAFE STRICT
AS $function$window_lead$function$
CREATE OR REPLACE FUNCTION pg_catalog.lead(anyelement, integer)
 RETURNS anyelement
 LANGUAGE internal
 WINDOW IMMUTABLE PARALLEL SAFE STRICT
AS $function$window_lead_with_offset$function$
CREATE OR REPLACE FUNCTION pg_catalog.lead(anyelement, integer, anyelement)
 RETURNS anyelement
 LANGUAGE internal
 WINDOW IMMUTABLE PARALLEL SAFE STRICT
AS $function$window_lead_with_offset_and_default$function$
]]></string>
			<comment><![CDATA[fetch the following row value]]></comment>
		</function>
		<function name="left" id="Function_368fdab6" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog."left"(text, integer)
 RETURNS text
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$text_left$function$
]]></string>
			<comment><![CDATA[extract the first n characters]]></comment>
		</function>
		<function name="length" id="Function_1af9f82c" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.length(text)
 RETURNS integer
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$textlen$function$
CREATE OR REPLACE FUNCTION pg_catalog.length(character)
 RETURNS integer
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$bpcharlen$function$
CREATE OR REPLACE FUNCTION pg_catalog.length(lseg)
 RETURNS double precision
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$lseg_length$function$
CREATE OR REPLACE FUNCTION pg_catalog.length(path)
 RETURNS double precision
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$path_length$function$
CREATE OR REPLACE FUNCTION pg_catalog.length(bytea, name)
 RETURNS integer
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$length_in_encoding$function$
CREATE OR REPLACE FUNCTION pg_catalog.length(bit)
 RETURNS integer
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$bitlength$function$
CREATE OR REPLACE FUNCTION pg_catalog.length(bytea)
 RETURNS integer
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$byteaoctetlen$function$
CREATE OR REPLACE FUNCTION pg_catalog.length(tsvector)
 RETURNS integer
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$tsvector_length$function$
]]></string>
			<comment><![CDATA[length]]></comment>
		</function>
		<function name="length_001" id="Function_31daf1ce" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.length(text)
 RETURNS integer
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$textlen$function$
CREATE OR REPLACE FUNCTION pg_catalog.length(character)
 RETURNS integer
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$bpcharlen$function$
CREATE OR REPLACE FUNCTION pg_catalog.length(lseg)
 RETURNS double precision
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$lseg_length$function$
CREATE OR REPLACE FUNCTION pg_catalog.length(path)
 RETURNS double precision
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$path_length$function$
CREATE OR REPLACE FUNCTION pg_catalog.length(bytea, name)
 RETURNS integer
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$length_in_encoding$function$
CREATE OR REPLACE FUNCTION pg_catalog.length(bit)
 RETURNS integer
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$bitlength$function$
CREATE OR REPLACE FUNCTION pg_catalog.length(bytea)
 RETURNS integer
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$byteaoctetlen$function$
CREATE OR REPLACE FUNCTION pg_catalog.length(tsvector)
 RETURNS integer
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$tsvector_length$function$
]]></string>
			<comment><![CDATA[length]]></comment>
		</function>
		<function name="length_002" id="Function_149704fe" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.length(text)
 RETURNS integer
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$textlen$function$
CREATE OR REPLACE FUNCTION pg_catalog.length(character)
 RETURNS integer
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$bpcharlen$function$
CREATE OR REPLACE FUNCTION pg_catalog.length(lseg)
 RETURNS double precision
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$lseg_length$function$
CREATE OR REPLACE FUNCTION pg_catalog.length(path)
 RETURNS double precision
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$path_length$function$
CREATE OR REPLACE FUNCTION pg_catalog.length(bytea, name)
 RETURNS integer
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$length_in_encoding$function$
CREATE OR REPLACE FUNCTION pg_catalog.length(bit)
 RETURNS integer
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$bitlength$function$
CREATE OR REPLACE FUNCTION pg_catalog.length(bytea)
 RETURNS integer
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$byteaoctetlen$function$
CREATE OR REPLACE FUNCTION pg_catalog.length(tsvector)
 RETURNS integer
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$tsvector_length$function$
]]></string>
			<comment><![CDATA[length]]></comment>
		</function>
		<function name="length_003" id="Function_2e3d2b56" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.length(text)
 RETURNS integer
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$textlen$function$
CREATE OR REPLACE FUNCTION pg_catalog.length(character)
 RETURNS integer
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$bpcharlen$function$
CREATE OR REPLACE FUNCTION pg_catalog.length(lseg)
 RETURNS double precision
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$lseg_length$function$
CREATE OR REPLACE FUNCTION pg_catalog.length(path)
 RETURNS double precision
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$path_length$function$
CREATE OR REPLACE FUNCTION pg_catalog.length(bytea, name)
 RETURNS integer
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$length_in_encoding$function$
CREATE OR REPLACE FUNCTION pg_catalog.length(bit)
 RETURNS integer
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$bitlength$function$
CREATE OR REPLACE FUNCTION pg_catalog.length(bytea)
 RETURNS integer
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$byteaoctetlen$function$
CREATE OR REPLACE FUNCTION pg_catalog.length(tsvector)
 RETURNS integer
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$tsvector_length$function$
]]></string>
			<comment><![CDATA[length]]></comment>
		</function>
		<function name="length_004" id="Function_2c80de74" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.length(text)
 RETURNS integer
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$textlen$function$
CREATE OR REPLACE FUNCTION pg_catalog.length(character)
 RETURNS integer
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$bpcharlen$function$
CREATE OR REPLACE FUNCTION pg_catalog.length(lseg)
 RETURNS double precision
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$lseg_length$function$
CREATE OR REPLACE FUNCTION pg_catalog.length(path)
 RETURNS double precision
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$path_length$function$
CREATE OR REPLACE FUNCTION pg_catalog.length(bytea, name)
 RETURNS integer
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$length_in_encoding$function$
CREATE OR REPLACE FUNCTION pg_catalog.length(bit)
 RETURNS integer
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$bitlength$function$
CREATE OR REPLACE FUNCTION pg_catalog.length(bytea)
 RETURNS integer
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$byteaoctetlen$function$
CREATE OR REPLACE FUNCTION pg_catalog.length(tsvector)
 RETURNS integer
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$tsvector_length$function$
]]></string>
			<comment><![CDATA[length]]></comment>
		</function>
		<function name="length_005" id="Function_24d96132" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.length(text)
 RETURNS integer
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$textlen$function$
CREATE OR REPLACE FUNCTION pg_catalog.length(character)
 RETURNS integer
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$bpcharlen$function$
CREATE OR REPLACE FUNCTION pg_catalog.length(lseg)
 RETURNS double precision
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$lseg_length$function$
CREATE OR REPLACE FUNCTION pg_catalog.length(path)
 RETURNS double precision
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$path_length$function$
CREATE OR REPLACE FUNCTION pg_catalog.length(bytea, name)
 RETURNS integer
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$length_in_encoding$function$
CREATE OR REPLACE FUNCTION pg_catalog.length(bit)
 RETURNS integer
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$bitlength$function$
CREATE OR REPLACE FUNCTION pg_catalog.length(bytea)
 RETURNS integer
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$byteaoctetlen$function$
CREATE OR REPLACE FUNCTION pg_catalog.length(tsvector)
 RETURNS integer
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$tsvector_length$function$
]]></string>
			<comment><![CDATA[length]]></comment>
		</function>
		<function name="length_006" id="Function_1bbc69c9" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.length(text)
 RETURNS integer
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$textlen$function$
CREATE OR REPLACE FUNCTION pg_catalog.length(character)
 RETURNS integer
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$bpcharlen$function$
CREATE OR REPLACE FUNCTION pg_catalog.length(lseg)
 RETURNS double precision
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$lseg_length$function$
CREATE OR REPLACE FUNCTION pg_catalog.length(path)
 RETURNS double precision
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$path_length$function$
CREATE OR REPLACE FUNCTION pg_catalog.length(bytea, name)
 RETURNS integer
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$length_in_encoding$function$
CREATE OR REPLACE FUNCTION pg_catalog.length(bit)
 RETURNS integer
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$bitlength$function$
CREATE OR REPLACE FUNCTION pg_catalog.length(bytea)
 RETURNS integer
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$byteaoctetlen$function$
CREATE OR REPLACE FUNCTION pg_catalog.length(tsvector)
 RETURNS integer
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$tsvector_length$function$
]]></string>
			<comment><![CDATA[length]]></comment>
		</function>
		<function name="length_007" id="Function_288c888a" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.length(text)
 RETURNS integer
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$textlen$function$
CREATE OR REPLACE FUNCTION pg_catalog.length(character)
 RETURNS integer
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$bpcharlen$function$
CREATE OR REPLACE FUNCTION pg_catalog.length(lseg)
 RETURNS double precision
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$lseg_length$function$
CREATE OR REPLACE FUNCTION pg_catalog.length(path)
 RETURNS double precision
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$path_length$function$
CREATE OR REPLACE FUNCTION pg_catalog.length(bytea, name)
 RETURNS integer
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$length_in_encoding$function$
CREATE OR REPLACE FUNCTION pg_catalog.length(bit)
 RETURNS integer
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$bitlength$function$
CREATE OR REPLACE FUNCTION pg_catalog.length(bytea)
 RETURNS integer
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$byteaoctetlen$function$
CREATE OR REPLACE FUNCTION pg_catalog.length(tsvector)
 RETURNS integer
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$tsvector_length$function$
]]></string>
			<comment><![CDATA[length]]></comment>
		</function>
		<function name="like" id="Function_16ab4e5" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog."like"(bytea, bytea)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$bytealike$function$
CREATE OR REPLACE FUNCTION pg_catalog."like"(name, text)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$namelike$function$
CREATE OR REPLACE FUNCTION pg_catalog."like"(text, text)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$textlike$function$
]]></string>
			<comment><![CDATA[matches LIKE expression]]></comment>
		</function>
		<function name="like_001" id="Function_2b0b6fe5" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog."like"(bytea, bytea)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$bytealike$function$
CREATE OR REPLACE FUNCTION pg_catalog."like"(name, text)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$namelike$function$
CREATE OR REPLACE FUNCTION pg_catalog."like"(text, text)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$textlike$function$
]]></string>
			<comment><![CDATA[matches LIKE expression]]></comment>
		</function>
		<function name="like_002" id="Function_3b8b0875" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog."like"(bytea, bytea)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$bytealike$function$
CREATE OR REPLACE FUNCTION pg_catalog."like"(name, text)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$namelike$function$
CREATE OR REPLACE FUNCTION pg_catalog."like"(text, text)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$textlike$function$
]]></string>
			<comment><![CDATA[matches LIKE expression]]></comment>
		</function>
		<function name="like_escape" id="Function_1cbf1734" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.like_escape(bytea, bytea)
 RETURNS bytea
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$like_escape_bytea$function$
CREATE OR REPLACE FUNCTION pg_catalog.like_escape(text, text)
 RETURNS text
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$like_escape$function$
]]></string>
			<comment><![CDATA[convert LIKE pattern to use backslash escapes]]></comment>
		</function>
		<function name="like_escape_001" id="Function_e4771dc" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.like_escape(bytea, bytea)
 RETURNS bytea
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$like_escape_bytea$function$
CREATE OR REPLACE FUNCTION pg_catalog.like_escape(text, text)
 RETURNS text
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$like_escape$function$
]]></string>
			<comment><![CDATA[convert LIKE pattern to use backslash escapes]]></comment>
		</function>
		<function name="likejoinsel" id="Function_2e2585e6" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.likejoinsel(internal, oid, internal, smallint, internal)
 RETURNS double precision
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$likejoinsel$function$
]]></string>
			<comment><![CDATA[join selectivity of LIKE]]></comment>
		</function>
		<function name="likesel" id="Function_6defd53" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.likesel(internal, oid, internal, integer)
 RETURNS double precision
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$likesel$function$
]]></string>
			<comment><![CDATA[restriction selectivity of LIKE]]></comment>
		</function>
		<function name="line" id="Function_1f4131a2" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.line(point, point)
 RETURNS line
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$line_construct_pp$function$
]]></string>
			<comment><![CDATA[construct line from points]]></comment>
		</function>
		<function name="line_distance" id="Function_1e092af5" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.line_distance(line, line)
 RETURNS double precision
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$line_distance$function$
]]></string>
			<comment><![CDATA[implementation of <-> operator]]></comment>
		</function>
		<function name="line_eq" id="Function_16543796" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.line_eq(line, line)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$line_eq$function$
]]></string>
			<comment><![CDATA[implementation of = operator]]></comment>
		</function>
		<function name="line_horizontal" id="Function_31de853b" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.line_horizontal(line)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$line_horizontal$function$
]]></string>
			<comment><![CDATA[implementation of ?- operator]]></comment>
		</function>
		<function name="line_in" id="Function_10ca5cc0" isSystem="false" >
			<comment><![CDATA[I/O]]></comment>
		</function>
		<function name="line_interpt" id="Function_18c0e2ce" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.line_interpt(line, line)
 RETURNS point
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$line_interpt$function$
]]></string>
			<comment><![CDATA[implementation of # operator]]></comment>
		</function>
		<function name="line_intersect" id="Function_2e7ea1db" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.line_intersect(line, line)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$line_intersect$function$
]]></string>
			<comment><![CDATA[implementation of ?# operator]]></comment>
		</function>
		<function name="line_out" id="Function_28d3e389" isSystem="false" >
			<comment><![CDATA[I/O]]></comment>
		</function>
		<function name="line_parallel" id="Function_2d0dff32" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.line_parallel(line, line)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$line_parallel$function$
]]></string>
			<comment><![CDATA[implementation of ?|| operator]]></comment>
		</function>
		<function name="line_perp" id="Function_3b61c21c" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.line_perp(line, line)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$line_perp$function$
]]></string>
			<comment><![CDATA[implementation of ?-| operator]]></comment>
		</function>
		<function name="line_recv" id="Function_2263235e" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.line_recv(internal)
 RETURNS line
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$line_recv$function$
]]></string>
			<comment><![CDATA[I/O]]></comment>
		</function>
		<function name="line_send" id="Function_a53bfa" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.line_send(line)
 RETURNS bytea
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$line_send$function$
]]></string>
			<comment><![CDATA[I/O]]></comment>
		</function>
		<function name="line_vertical" id="Function_16ed134c" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.line_vertical(line)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$line_vertical$function$
]]></string>
			<comment><![CDATA[implementation of ?| operator]]></comment>
		</function>
		<function name="ln" id="Function_33163f84" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.ln(double precision)
 RETURNS double precision
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$dlog1$function$
CREATE OR REPLACE FUNCTION pg_catalog.ln(numeric)
 RETURNS numeric
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$numeric_ln$function$
]]></string>
			<comment><![CDATA[natural logarithm]]></comment>
		</function>
		<function name="ln_001" id="Function_26a319a3" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.ln(double precision)
 RETURNS double precision
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$dlog1$function$
CREATE OR REPLACE FUNCTION pg_catalog.ln(numeric)
 RETURNS numeric
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$numeric_ln$function$
]]></string>
			<comment><![CDATA[natural logarithm]]></comment>
		</function>
		<function name="lo_close" id="Function_2bf5446a" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.lo_close(integer)
 RETURNS integer
 LANGUAGE internal
 STRICT
AS $function$lo_close$function$
]]></string>
			<comment><![CDATA[large object close]]></comment>
		</function>
		<function name="lo_creat" id="Function_1ed07bc" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.lo_creat(integer)
 RETURNS oid
 LANGUAGE internal
 STRICT
AS $function$lo_creat$function$
]]></string>
			<comment><![CDATA[large object create]]></comment>
		</function>
		<function name="lo_create" id="Function_516c7f0" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.lo_create(oid)
 RETURNS oid
 LANGUAGE internal
 STRICT
AS $function$lo_create$function$
]]></string>
			<comment><![CDATA[large object create]]></comment>
		</function>
		<function name="lo_export" id="Function_3269c94c" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.lo_export(oid, text)
 RETURNS integer
 LANGUAGE internal
 STRICT
AS $function$lo_export$function$
]]></string>
			<comment><![CDATA[large object export]]></comment>
		</function>
		<function name="lo_from_bytea" id="Function_1de9c95a" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.lo_from_bytea(oid, bytea)
 RETURNS oid
 LANGUAGE internal
 STRICT
AS $function$lo_from_bytea$function$
]]></string>
			<comment><![CDATA[create new large object with given content]]></comment>
		</function>
		<function name="lo_get" id="Function_19e20fed" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.lo_get(oid)
 RETURNS bytea
 LANGUAGE internal
 STRICT
AS $function$lo_get$function$
CREATE OR REPLACE FUNCTION pg_catalog.lo_get(oid, bigint, integer)
 RETURNS bytea
 LANGUAGE internal
 STRICT
AS $function$lo_get_fragment$function$
]]></string>
			<comment><![CDATA[read entire large object]]></comment>
		</function>
		<function name="lo_get_001" id="Function_347d5f18" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.lo_get(oid)
 RETURNS bytea
 LANGUAGE internal
 STRICT
AS $function$lo_get$function$
CREATE OR REPLACE FUNCTION pg_catalog.lo_get(oid, bigint, integer)
 RETURNS bytea
 LANGUAGE internal
 STRICT
AS $function$lo_get_fragment$function$
]]></string>
			<comment><![CDATA[read entire large object]]></comment>
		</function>
		<function name="lo_import" id="Function_f0d21ff" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.lo_import(text)
 RETURNS oid
 LANGUAGE internal
 STRICT
AS $function$lo_import$function$
CREATE OR REPLACE FUNCTION pg_catalog.lo_import(text, oid)
 RETURNS oid
 LANGUAGE internal
 STRICT
AS $function$lo_import_with_oid$function$
]]></string>
			<comment><![CDATA[large object import]]></comment>
		</function>
		<function name="lo_import_001" id="Function_1b151ed8" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.lo_import(text)
 RETURNS oid
 LANGUAGE internal
 STRICT
AS $function$lo_import$function$
CREATE OR REPLACE FUNCTION pg_catalog.lo_import(text, oid)
 RETURNS oid
 LANGUAGE internal
 STRICT
AS $function$lo_import_with_oid$function$
]]></string>
			<comment><![CDATA[large object import]]></comment>
		</function>
		<function name="lo_lseek" id="Function_2239dd79" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.lo_lseek(integer, integer, integer)
 RETURNS integer
 LANGUAGE internal
 STRICT
AS $function$lo_lseek$function$
]]></string>
			<comment><![CDATA[large object seek]]></comment>
		</function>
		<function name="lo_lseek64" id="Function_35bd0eed" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.lo_lseek64(integer, bigint, integer)
 RETURNS bigint
 LANGUAGE internal
 STRICT
AS $function$lo_lseek64$function$
]]></string>
			<comment><![CDATA[large object seek (64 bit)]]></comment>
		</function>
		<function name="lo_open" id="Function_1ca56d60" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.lo_open(oid, integer)
 RETURNS integer
 LANGUAGE internal
 STRICT
AS $function$lo_open$function$
]]></string>
			<comment><![CDATA[large object open]]></comment>
		</function>
		<function name="lo_put" id="Function_232bfbbe" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.lo_put(oid, bigint, bytea)
 RETURNS void
 LANGUAGE internal
 STRICT
AS $function$lo_put$function$
]]></string>
			<comment><![CDATA[write data at offset]]></comment>
		</function>
		<function name="lo_tell" id="Function_1bf0f21b" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.lo_tell(integer)
 RETURNS integer
 LANGUAGE internal
 STRICT
AS $function$lo_tell$function$
]]></string>
			<comment><![CDATA[large object position]]></comment>
		</function>
		<function name="lo_tell64" id="Function_191675a5" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.lo_tell64(integer)
 RETURNS bigint
 LANGUAGE internal
 STRICT
AS $function$lo_tell64$function$
]]></string>
			<comment><![CDATA[large object position (64 bit)]]></comment>
		</function>
		<function name="lo_truncate" id="Function_1994c27c" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.lo_truncate(integer, integer)
 RETURNS integer
 LANGUAGE internal
 STRICT
AS $function$lo_truncate$function$
]]></string>
			<comment><![CDATA[truncate large object]]></comment>
		</function>
		<function name="lo_truncate64" id="Function_16f196d4" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.lo_truncate64(integer, bigint)
 RETURNS integer
 LANGUAGE internal
 STRICT
AS $function$lo_truncate64$function$
]]></string>
			<comment><![CDATA[truncate large object (64 bit)]]></comment>
		</function>
		<function name="lo_unlink" id="Function_4bd8a2f" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.lo_unlink(oid)
 RETURNS integer
 LANGUAGE internal
 STRICT
AS $function$lo_unlink$function$
]]></string>
			<comment><![CDATA[large object unlink (delete)]]></comment>
		</function>
		<function name="log" id="Function_1b448fb4" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.log(double precision)
 RETURNS double precision
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$dlog10$function$
CREATE OR REPLACE FUNCTION pg_catalog.log(numeric)
 RETURNS numeric
 LANGUAGE sql
 IMMUTABLE PARALLEL SAFE STRICT COST 1
AS $function$select pg_catalog.log(10, $1)$function$
CREATE OR REPLACE FUNCTION pg_catalog.log(numeric, numeric)
 RETURNS numeric
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$numeric_log$function$
]]></string>
			<comment><![CDATA[base 10 logarithm]]></comment>
		</function>
		<function name="log_001" id="Function_a6e1d5d" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.log(double precision)
 RETURNS double precision
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$dlog10$function$
CREATE OR REPLACE FUNCTION pg_catalog.log(numeric)
 RETURNS numeric
 LANGUAGE sql
 IMMUTABLE PARALLEL SAFE STRICT COST 1
AS $function$select pg_catalog.log(10, $1)$function$
CREATE OR REPLACE FUNCTION pg_catalog.log(numeric, numeric)
 RETURNS numeric
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$numeric_log$function$
]]></string>
			<comment><![CDATA[base 10 logarithm]]></comment>
		</function>
		<function name="log_002" id="Function_37e4548b" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.log(double precision)
 RETURNS double precision
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$dlog10$function$
CREATE OR REPLACE FUNCTION pg_catalog.log(numeric)
 RETURNS numeric
 LANGUAGE sql
 IMMUTABLE PARALLEL SAFE STRICT COST 1
AS $function$select pg_catalog.log(10, $1)$function$
CREATE OR REPLACE FUNCTION pg_catalog.log(numeric, numeric)
 RETURNS numeric
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$numeric_log$function$
]]></string>
			<comment><![CDATA[base 10 logarithm]]></comment>
		</function>
		<function name="loread" id="Function_49faf19" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.loread(integer, integer)
 RETURNS bytea
 LANGUAGE internal
 STRICT
AS $function$loread$function$
]]></string>
			<comment><![CDATA[large object read]]></comment>
		</function>
		<function name="lower" id="Function_3824b876" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.lower(text)
 RETURNS text
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$lower$function$
CREATE OR REPLACE FUNCTION pg_catalog.lower(anyrange)
 RETURNS anyelement
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$range_lower$function$
]]></string>
			<comment><![CDATA[lower bound of range]]></comment>
		</function>
		<function name="lower_001" id="Function_e859e50" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.lower(text)
 RETURNS text
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$lower$function$
CREATE OR REPLACE FUNCTION pg_catalog.lower(anyrange)
 RETURNS anyelement
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$range_lower$function$
]]></string>
			<comment><![CDATA[lower bound of range]]></comment>
		</function>
		<function name="lower_inc" id="Function_153b2e61" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.lower_inc(anyrange)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$range_lower_inc$function$
]]></string>
			<comment><![CDATA[is the range's lower bound inclusive?]]></comment>
		</function>
		<function name="lower_inf" id="Function_19bc675c" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.lower_inf(anyrange)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$range_lower_inf$function$
]]></string>
			<comment><![CDATA[is the range's lower bound infinite?]]></comment>
		</function>
		<function name="lowrite" id="Function_1ef8aacd" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.lowrite(integer, bytea)
 RETURNS integer
 LANGUAGE internal
 STRICT
AS $function$lowrite$function$
]]></string>
			<comment><![CDATA[large object write]]></comment>
		</function>
		<function name="lpad" id="Function_1ee7d7ec" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.lpad(text, integer)
 RETURNS text
 LANGUAGE sql
 IMMUTABLE PARALLEL SAFE STRICT COST 1
AS $function$select pg_catalog.lpad($1, $2, ' ')$function$
CREATE OR REPLACE FUNCTION pg_catalog.lpad(text, integer, text)
 RETURNS text
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$lpad$function$
]]></string>
			<comment><![CDATA[left-pad string to length]]></comment>
		</function>
		<function name="lpad_001" id="Function_1310a974" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.lpad(text, integer)
 RETURNS text
 LANGUAGE sql
 IMMUTABLE PARALLEL SAFE STRICT COST 1
AS $function$select pg_catalog.lpad($1, $2, ' ')$function$
CREATE OR REPLACE FUNCTION pg_catalog.lpad(text, integer, text)
 RETURNS text
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$lpad$function$
]]></string>
			<comment><![CDATA[left-pad string to length]]></comment>
		</function>
		<function name="lseg" id="Function_3b7ffbbf" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.lseg(box)
 RETURNS lseg
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$box_diagonal$function$
CREATE OR REPLACE FUNCTION pg_catalog.lseg(point, point)
 RETURNS lseg
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$lseg_construct$function$
]]></string>
			<comment><![CDATA[diagonal of]]></comment>
		</function>
		<function name="lseg_001" id="Function_206bcae1" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.lseg(box)
 RETURNS lseg
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$box_diagonal$function$
CREATE OR REPLACE FUNCTION pg_catalog.lseg(point, point)
 RETURNS lseg
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$lseg_construct$function$
]]></string>
			<comment><![CDATA[diagonal of]]></comment>
		</function>
		<function name="lseg_center" id="Function_116c9ca6" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.lseg_center(lseg)
 RETURNS point
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$lseg_center$function$
]]></string>
			<comment><![CDATA[implementation of @@ operator]]></comment>
		</function>
		<function name="lseg_distance" id="Function_14d79380" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.lseg_distance(lseg, lseg)
 RETURNS double precision
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$lseg_distance$function$
]]></string>
			<comment><![CDATA[implementation of <-> operator]]></comment>
		</function>
		<function name="lseg_eq" id="Function_1c4c9e3f" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.lseg_eq(lseg, lseg)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT LEAKPROOF
AS $function$lseg_eq$function$
]]></string>
			<comment><![CDATA[implementation of = operator]]></comment>
		</function>
		<function name="lseg_ge" id="Function_182c2812" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.lseg_ge(lseg, lseg)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT LEAKPROOF
AS $function$lseg_ge$function$
]]></string>
			<comment><![CDATA[implementation of >= operator]]></comment>
		</function>
		<function name="lseg_gt" id="Function_1dac084d" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.lseg_gt(lseg, lseg)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT LEAKPROOF
AS $function$lseg_gt$function$
]]></string>
			<comment><![CDATA[implementation of > operator]]></comment>
		</function>
		<function name="lseg_horizontal" id="Function_4ab21e" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.lseg_horizontal(lseg)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$lseg_horizontal$function$
]]></string>
			<comment><![CDATA[implementation of ?- operator]]></comment>
		</function>
		<function name="lseg_in" id="Function_2445e80e" isSystem="false" >
			<comment><![CDATA[I/O]]></comment>
		</function>
		<function name="lseg_interpt" id="Function_57eefb3" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.lseg_interpt(lseg, lseg)
 RETURNS point
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$lseg_interpt$function$
]]></string>
			<comment><![CDATA[implementation of # operator]]></comment>
		</function>
		<function name="lseg_intersect" id="Function_bbe2935" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.lseg_intersect(lseg, lseg)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$lseg_intersect$function$
]]></string>
			<comment><![CDATA[implementation of ?# operator]]></comment>
		</function>
		<function name="lseg_le" id="Function_363a178a" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.lseg_le(lseg, lseg)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT LEAKPROOF
AS $function$lseg_le$function$
]]></string>
			<comment><![CDATA[implementation of <= operator]]></comment>
		</function>
		<function name="lseg_length" id="Function_151601e1" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.lseg_length(lseg)
 RETURNS double precision
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$lseg_length$function$
]]></string>
			<comment><![CDATA[implementation of @-@ operator]]></comment>
		</function>
		<function name="lseg_lt" id="Function_dcef79" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.lseg_lt(lseg, lseg)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT LEAKPROOF
AS $function$lseg_lt$function$
]]></string>
			<comment><![CDATA[implementation of < operator]]></comment>
		</function>
		<function name="lseg_ne" id="Function_27df89e6" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.lseg_ne(lseg, lseg)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT LEAKPROOF
AS $function$lseg_ne$function$
]]></string>
			<comment><![CDATA[implementation of <> operator]]></comment>
		</function>
		<function name="lseg_out" id="Function_122256d8" isSystem="false" >
			<comment><![CDATA[I/O]]></comment>
		</function>
		<function name="lseg_parallel" id="Function_2b60831d" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.lseg_parallel(lseg, lseg)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$lseg_parallel$function$
]]></string>
			<comment><![CDATA[implementation of ?|| operator]]></comment>
		</function>
		<function name="lseg_perp" id="Function_3a1cb4ee" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.lseg_perp(lseg, lseg)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$lseg_perp$function$
]]></string>
			<comment><![CDATA[implementation of ?-| operator]]></comment>
		</function>
		<function name="lseg_recv" id="Function_8287da" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.lseg_recv(internal)
 RETURNS lseg
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$lseg_recv$function$
]]></string>
			<comment><![CDATA[I/O]]></comment>
		</function>
		<function name="lseg_send" id="Function_14923fa8" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.lseg_send(lseg)
 RETURNS bytea
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$lseg_send$function$
]]></string>
			<comment><![CDATA[I/O]]></comment>
		</function>
		<function name="lseg_vertical" id="Function_37013ed6" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.lseg_vertical(lseg)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$lseg_vertical$function$
]]></string>
			<comment><![CDATA[implementation of ?| operator]]></comment>
		</function>
		<function name="ltrim" id="Function_20ac1824" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.ltrim(text)
 RETURNS text
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$ltrim1$function$
CREATE OR REPLACE FUNCTION pg_catalog.ltrim(text, text)
 RETURNS text
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$ltrim$function$
]]></string>
			<comment><![CDATA[trim selected characters from left end of string]]></comment>
		</function>
		<function name="ltrim_001" id="Function_2eb01ff6" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.ltrim(text)
 RETURNS text
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$ltrim1$function$
CREATE OR REPLACE FUNCTION pg_catalog.ltrim(text, text)
 RETURNS text
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$ltrim$function$
]]></string>
			<comment><![CDATA[trim selected characters from left end of string]]></comment>
		</function>
		<function name="macaddr_and" id="Function_20f025ec" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.macaddr_and(macaddr, macaddr)
 RETURNS macaddr
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$macaddr_and$function$
]]></string>
			<comment><![CDATA[implementation of & operator]]></comment>
		</function>
		<function name="macaddr_cmp" id="Function_c03d2cf" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.macaddr_cmp(macaddr, macaddr)
 RETURNS integer
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$macaddr_cmp$function$
]]></string>
			<comment><![CDATA[less-equal-greater]]></comment>
		</function>
		<function name="macaddr_eq" id="Function_eb9c8d2" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.macaddr_eq(macaddr, macaddr)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT LEAKPROOF
AS $function$macaddr_eq$function$
]]></string>
			<comment><![CDATA[implementation of = operator]]></comment>
		</function>
		<function name="macaddr_ge" id="Function_1668101a" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.macaddr_ge(macaddr, macaddr)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT LEAKPROOF
AS $function$macaddr_ge$function$
]]></string>
			<comment><![CDATA[implementation of >= operator]]></comment>
		</function>
		<function name="macaddr_gt" id="Function_25e1a216" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.macaddr_gt(macaddr, macaddr)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT LEAKPROOF
AS $function$macaddr_gt$function$
]]></string>
			<comment><![CDATA[implementation of > operator]]></comment>
		</function>
		<function name="macaddr_in" id="Function_2ad95940" isSystem="false" >
			<comment><![CDATA[I/O]]></comment>
		</function>
		<function name="macaddr_le" id="Function_91d37fe" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.macaddr_le(macaddr, macaddr)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT LEAKPROOF
AS $function$macaddr_le$function$
]]></string>
			<comment><![CDATA[implementation of <= operator]]></comment>
		</function>
		<function name="macaddr_lt" id="Function_28264650" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.macaddr_lt(macaddr, macaddr)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT LEAKPROOF
AS $function$macaddr_lt$function$
]]></string>
			<comment><![CDATA[implementation of < operator]]></comment>
		</function>
		<function name="macaddr_ne" id="Function_3a78abf9" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.macaddr_ne(macaddr, macaddr)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT LEAKPROOF
AS $function$macaddr_ne$function$
]]></string>
			<comment><![CDATA[implementation of <> operator]]></comment>
		</function>
		<function name="macaddr_not" id="Function_710f935" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.macaddr_not(macaddr)
 RETURNS macaddr
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$macaddr_not$function$
]]></string>
			<comment><![CDATA[implementation of ~ operator]]></comment>
		</function>
		<function name="macaddr_or" id="Function_26a31a77" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.macaddr_or(macaddr, macaddr)
 RETURNS macaddr
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$macaddr_or$function$
]]></string>
			<comment><![CDATA[implementation of | operator]]></comment>
		</function>
		<function name="macaddr_out" id="Function_3271377a" isSystem="false" >
			<comment><![CDATA[I/O]]></comment>
		</function>
		<function name="macaddr_recv" id="Function_14711c64" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.macaddr_recv(internal)
 RETURNS macaddr
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$macaddr_recv$function$
]]></string>
			<comment><![CDATA[I/O]]></comment>
		</function>
		<function name="macaddr_send" id="Function_1df85f" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.macaddr_send(macaddr)
 RETURNS bytea
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$macaddr_send$function$
]]></string>
			<comment><![CDATA[I/O]]></comment>
		</function>
		<function name="make_date" id="Function_28ba432f" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.make_date(year integer, month integer, day integer)
 RETURNS date
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$make_date$function$
]]></string>
			<comment><![CDATA[construct date]]></comment>
		</function>
		<function name="make_interval" id="Function_27c0a362" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.make_interval(years integer DEFAULT 0, months integer DEFAULT 0, weeks integer DEFAULT 0, days integer DEFAULT 0, hours integer DEFAULT 0, mins integer DEFAULT 0, secs double precision DEFAULT 0.0)
 RETURNS interval
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$make_interval$function$
]]></string>
			<comment><![CDATA[construct interval]]></comment>
		</function>
		<function name="make_time" id="Function_1ebc382e" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.make_time(hour integer, min integer, sec double precision)
 RETURNS time without time zone
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$make_time$function$
]]></string>
			<comment><![CDATA[construct time]]></comment>
		</function>
		<function name="make_timestamp" id="Function_24c07296" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.make_timestamp(year integer, month integer, mday integer, hour integer, min integer, sec double precision)
 RETURNS timestamp without time zone
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$make_timestamp$function$
]]></string>
			<comment><![CDATA[construct timestamp]]></comment>
		</function>
		<function name="make_timestamptz" id="Function_3623334d" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.make_timestamptz(year integer, month integer, mday integer, hour integer, min integer, sec double precision)
 RETURNS timestamp with time zone
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$make_timestamptz$function$
CREATE OR REPLACE FUNCTION pg_catalog.make_timestamptz(year integer, month integer, mday integer, hour integer, min integer, sec double precision, timezone text)
 RETURNS timestamp with time zone
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$make_timestamptz_at_timezone$function$
]]></string>
			<comment><![CDATA[construct timestamp with time zone]]></comment>
		</function>
		<function name="make_timestamptz_001" id="Function_194af089" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.make_timestamptz(year integer, month integer, mday integer, hour integer, min integer, sec double precision)
 RETURNS timestamp with time zone
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$make_timestamptz$function$
CREATE OR REPLACE FUNCTION pg_catalog.make_timestamptz(year integer, month integer, mday integer, hour integer, min integer, sec double precision, timezone text)
 RETURNS timestamp with time zone
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$make_timestamptz_at_timezone$function$
]]></string>
			<comment><![CDATA[construct timestamp with time zone]]></comment>
		</function>
		<function name="makeaclitem" id="Function_1908131" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.makeaclitem(oid, oid, text, boolean)
 RETURNS aclitem
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$makeaclitem$function$
]]></string>
			<comment><![CDATA[make ACL item]]></comment>
		</function>
		<function name="masklen" id="Function_15926c67" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.masklen(inet)
 RETURNS integer
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$network_masklen$function$
]]></string>
			<comment><![CDATA[netmask length]]></comment>
		</function>
		<function name="max" id="Function_1603cbb0" isSystem="false" >
			<comment><![CDATA[maximum value of all anyarray input values]]></comment>
		</function>
		<function name="max_001" id="Function_37a9aa0" isSystem="false" >
			<comment><![CDATA[maximum value of all anyarray input values]]></comment>
		</function>
		<function name="max_002" id="Function_9f0709e" isSystem="false" >
			<comment><![CDATA[maximum value of all anyarray input values]]></comment>
		</function>
		<function name="max_003" id="Function_87726e3" isSystem="false" >
			<comment><![CDATA[maximum value of all anyarray input values]]></comment>
		</function>
		<function name="max_004" id="Function_26b4d28a" isSystem="false" >
			<comment><![CDATA[maximum value of all anyarray input values]]></comment>
		</function>
		<function name="max_005" id="Function_3735065a" isSystem="false" >
			<comment><![CDATA[maximum value of all anyarray input values]]></comment>
		</function>
		<function name="max_006" id="Function_21331a3b" isSystem="false" >
			<comment><![CDATA[maximum value of all anyarray input values]]></comment>
		</function>
		<function name="max_007" id="Function_30c68fc9" isSystem="false" >
			<comment><![CDATA[maximum value of all anyarray input values]]></comment>
		</function>
		<function name="max_008" id="Function_1c024c44" isSystem="false" >
			<comment><![CDATA[maximum value of all anyarray input values]]></comment>
		</function>
		<function name="max_009" id="Function_37c423d4" isSystem="false" >
			<comment><![CDATA[maximum value of all anyarray input values]]></comment>
		</function>
		<function name="max_010" id="Function_1bb76070" isSystem="false" >
			<comment><![CDATA[maximum value of all anyarray input values]]></comment>
		</function>
		<function name="max_011" id="Function_3a23916" isSystem="false" >
			<comment><![CDATA[maximum value of all anyarray input values]]></comment>
		</function>
		<function name="max_012" id="Function_26fb2332" isSystem="false" >
			<comment><![CDATA[maximum value of all anyarray input values]]></comment>
		</function>
		<function name="max_013" id="Function_1756d3a2" isSystem="false" >
			<comment><![CDATA[maximum value of all anyarray input values]]></comment>
		</function>
		<function name="max_014" id="Function_27565afb" isSystem="false" >
			<comment><![CDATA[maximum value of all anyarray input values]]></comment>
		</function>
		<function name="max_015" id="Function_3a368861" isSystem="false" >
			<comment><![CDATA[maximum value of all anyarray input values]]></comment>
		</function>
		<function name="max_016" id="Function_222c447b" isSystem="false" >
			<comment><![CDATA[maximum value of all anyarray input values]]></comment>
		</function>
		<function name="max_017" id="Function_393f77d3" isSystem="false" >
			<comment><![CDATA[maximum value of all anyarray input values]]></comment>
		</function>
		<function name="max_018" id="Function_7e51794" isSystem="false" >
			<comment><![CDATA[maximum value of all anyarray input values]]></comment>
		</function>
		<function name="max_019" id="Function_b01a5f0" isSystem="false" >
			<comment><![CDATA[maximum value of all anyarray input values]]></comment>
		</function>
		<function name="max_020" id="Function_2f87635b" isSystem="false" >
			<comment><![CDATA[maximum value of all anyarray input values]]></comment>
		</function>
		<function name="md5" id="Function_11962efb" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.md5(bytea)
 RETURNS text
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$md5_bytea$function$
CREATE OR REPLACE FUNCTION pg_catalog.md5(text)
 RETURNS text
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$md5_text$function$
]]></string>
			<comment><![CDATA[MD5 hash]]></comment>
		</function>
		<function name="md5_001" id="Function_36d3481e" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.md5(bytea)
 RETURNS text
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$md5_bytea$function$
CREATE OR REPLACE FUNCTION pg_catalog.md5(text)
 RETURNS text
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$md5_text$function$
]]></string>
			<comment><![CDATA[MD5 hash]]></comment>
		</function>
		<function name="mic_to_ascii" id="Function_14d6e60f" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.mic_to_ascii(integer, integer, cstring, internal, integer)
 RETURNS void
 LANGUAGE c
 PARALLEL SAFE STRICT
AS '$libdir/ascii_and_mic', $function$mic_to_ascii$function$
]]></string>
			<comment><![CDATA[internal conversion function for MULE_INTERNAL to SQL_ASCII]]></comment>
		</function>
		<function name="mic_to_big5" id="Function_2ddd5f7" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.mic_to_big5(integer, integer, cstring, internal, integer)
 RETURNS void
 LANGUAGE c
 PARALLEL SAFE STRICT
AS '$libdir/euc_tw_and_big5', $function$mic_to_big5$function$
]]></string>
			<comment><![CDATA[internal conversion function for MULE_INTERNAL to BIG5]]></comment>
		</function>
		<function name="mic_to_euc_cn" id="Function_129380c2" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.mic_to_euc_cn(integer, integer, cstring, internal, integer)
 RETURNS void
 LANGUAGE c
 PARALLEL SAFE STRICT
AS '$libdir/euc_cn_and_mic', $function$mic_to_euc_cn$function$
]]></string>
			<comment><![CDATA[internal conversion function for MULE_INTERNAL to EUC_CN]]></comment>
		</function>
		<function name="mic_to_euc_jp" id="Function_1f697579" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.mic_to_euc_jp(integer, integer, cstring, internal, integer)
 RETURNS void
 LANGUAGE c
 PARALLEL SAFE STRICT
AS '$libdir/euc_jp_and_sjis', $function$mic_to_euc_jp$function$
]]></string>
			<comment><![CDATA[internal conversion function for MULE_INTERNAL to EUC_JP]]></comment>
		</function>
		<function name="mic_to_euc_kr" id="Function_61e87eb" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.mic_to_euc_kr(integer, integer, cstring, internal, integer)
 RETURNS void
 LANGUAGE c
 PARALLEL SAFE STRICT
AS '$libdir/euc_kr_and_mic', $function$mic_to_euc_kr$function$
]]></string>
			<comment><![CDATA[internal conversion function for MULE_INTERNAL to EUC_KR]]></comment>
		</function>
		<function name="mic_to_euc_tw" id="Function_1148e430" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.mic_to_euc_tw(integer, integer, cstring, internal, integer)
 RETURNS void
 LANGUAGE c
 PARALLEL SAFE STRICT
AS '$libdir/euc_tw_and_big5', $function$mic_to_euc_tw$function$
]]></string>
			<comment><![CDATA[internal conversion function for MULE_INTERNAL to EUC_TW]]></comment>
		</function>
		<function name="mic_to_iso" id="Function_11a75134" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.mic_to_iso(integer, integer, cstring, internal, integer)
 RETURNS void
 LANGUAGE c
 PARALLEL SAFE STRICT
AS '$libdir/cyrillic_and_mic', $function$mic_to_iso$function$
]]></string>
			<comment><![CDATA[internal conversion function for MULE_INTERNAL to ISO-8859-5]]></comment>
		</function>
		<function name="mic_to_koi8r" id="Function_8c5d1d7" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.mic_to_koi8r(integer, integer, cstring, internal, integer)
 RETURNS void
 LANGUAGE c
 PARALLEL SAFE STRICT
AS '$libdir/cyrillic_and_mic', $function$mic_to_koi8r$function$
]]></string>
			<comment><![CDATA[internal conversion function for MULE_INTERNAL to KOI8R]]></comment>
		</function>
		<function name="mic_to_latin1" id="Function_1bcb3cab" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.mic_to_latin1(integer, integer, cstring, internal, integer)
 RETURNS void
 LANGUAGE c
 PARALLEL SAFE STRICT
AS '$libdir/latin_and_mic', $function$mic_to_latin1$function$
]]></string>
			<comment><![CDATA[internal conversion function for MULE_INTERNAL to LATIN1]]></comment>
		</function>
		<function name="mic_to_latin2" id="Function_e72782a" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.mic_to_latin2(integer, integer, cstring, internal, integer)
 RETURNS void
 LANGUAGE c
 PARALLEL SAFE STRICT
AS '$libdir/latin2_and_win1250', $function$mic_to_latin2$function$
]]></string>
			<comment><![CDATA[internal conversion function for MULE_INTERNAL to LATIN2]]></comment>
		</function>
		<function name="mic_to_latin3" id="Function_c6b7af2" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.mic_to_latin3(integer, integer, cstring, internal, integer)
 RETURNS void
 LANGUAGE c
 PARALLEL SAFE STRICT
AS '$libdir/latin_and_mic', $function$mic_to_latin3$function$
]]></string>
			<comment><![CDATA[internal conversion function for MULE_INTERNAL to LATIN3]]></comment>
		</function>
		<function name="mic_to_latin4" id="Function_321dc11c" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.mic_to_latin4(integer, integer, cstring, internal, integer)
 RETURNS void
 LANGUAGE c
 PARALLEL SAFE STRICT
AS '$libdir/latin_and_mic', $function$mic_to_latin4$function$
]]></string>
			<comment><![CDATA[internal conversion function for MULE_INTERNAL to LATIN4]]></comment>
		</function>
		<function name="mic_to_sjis" id="Function_1a67acc1" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.mic_to_sjis(integer, integer, cstring, internal, integer)
 RETURNS void
 LANGUAGE c
 PARALLEL SAFE STRICT
AS '$libdir/euc_jp_and_sjis', $function$mic_to_sjis$function$
]]></string>
			<comment><![CDATA[internal conversion function for MULE_INTERNAL to SJIS]]></comment>
		</function>
		<function name="mic_to_win1250" id="Function_2e2eba96" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.mic_to_win1250(integer, integer, cstring, internal, integer)
 RETURNS void
 LANGUAGE c
 PARALLEL SAFE STRICT
AS '$libdir/latin2_and_win1250', $function$mic_to_win1250$function$
]]></string>
			<comment><![CDATA[internal conversion function for MULE_INTERNAL to WIN1250]]></comment>
		</function>
		<function name="mic_to_win1251" id="Function_e60935e" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.mic_to_win1251(integer, integer, cstring, internal, integer)
 RETURNS void
 LANGUAGE c
 PARALLEL SAFE STRICT
AS '$libdir/cyrillic_and_mic', $function$mic_to_win1251$function$
]]></string>
			<comment><![CDATA[internal conversion function for MULE_INTERNAL to WIN1251]]></comment>
		</function>
		<function name="mic_to_win866" id="Function_1ec2c5a2" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.mic_to_win866(integer, integer, cstring, internal, integer)
 RETURNS void
 LANGUAGE c
 PARALLEL SAFE STRICT
AS '$libdir/cyrillic_and_mic', $function$mic_to_win866$function$
]]></string>
			<comment><![CDATA[internal conversion function for MULE_INTERNAL to WIN866]]></comment>
		</function>
		<function name="min" id="Function_3712796" isSystem="false" >
			<comment><![CDATA[minimum value of all anyarray input values]]></comment>
		</function>
		<function name="min_001" id="Function_18e49692" isSystem="false" >
			<comment><![CDATA[minimum value of all anyarray input values]]></comment>
		</function>
		<function name="min_002" id="Function_16eda0bf" isSystem="false" >
			<comment><![CDATA[minimum value of all anyarray input values]]></comment>
		</function>
		<function name="min_003" id="Function_1da9416e" isSystem="false" >
			<comment><![CDATA[minimum value of all anyarray input values]]></comment>
		</function>
		<function name="min_004" id="Function_1e7baf79" isSystem="false" >
			<comment><![CDATA[minimum value of all anyarray input values]]></comment>
		</function>
		<function name="min_005" id="Function_29889f64" isSystem="false" >
			<comment><![CDATA[minimum value of all anyarray input values]]></comment>
		</function>
		<function name="min_006" id="Function_1daca413" isSystem="false" >
			<comment><![CDATA[minimum value of all anyarray input values]]></comment>
		</function>
		<function name="min_007" id="Function_38d34046" isSystem="false" >
			<comment><![CDATA[minimum value of all anyarray input values]]></comment>
		</function>
		<function name="min_008" id="Function_110b946b" isSystem="false" >
			<comment><![CDATA[minimum value of all anyarray input values]]></comment>
		</function>
		<function name="min_009" id="Function_212e4f1" isSystem="false" >
			<comment><![CDATA[minimum value of all anyarray input values]]></comment>
		</function>
		<function name="min_010" id="Function_26eadefe" isSystem="false" >
			<comment><![CDATA[minimum value of all anyarray input values]]></comment>
		</function>
		<function name="min_011" id="Function_b09a7b7" isSystem="false" >
			<comment><![CDATA[minimum value of all anyarray input values]]></comment>
		</function>
		<function name="min_012" id="Function_11e6e200" isSystem="false" >
			<comment><![CDATA[minimum value of all anyarray input values]]></comment>
		</function>
		<function name="min_013" id="Function_33ff8523" isSystem="false" >
			<comment><![CDATA[minimum value of all anyarray input values]]></comment>
		</function>
		<function name="min_014" id="Function_1ef1e807" isSystem="false" >
			<comment><![CDATA[minimum value of all anyarray input values]]></comment>
		</function>
		<function name="min_015" id="Function_1e59a8b" isSystem="false" >
			<comment><![CDATA[minimum value of all anyarray input values]]></comment>
		</function>
		<function name="min_016" id="Function_2a8ded25" isSystem="false" >
			<comment><![CDATA[minimum value of all anyarray input values]]></comment>
		</function>
		<function name="min_017" id="Function_1f429ae" isSystem="false" >
			<comment><![CDATA[minimum value of all anyarray input values]]></comment>
		</function>
		<function name="min_018" id="Function_7fab185" isSystem="false" >
			<comment><![CDATA[minimum value of all anyarray input values]]></comment>
		</function>
		<function name="min_019" id="Function_8635e88" isSystem="false" >
			<comment><![CDATA[minimum value of all anyarray input values]]></comment>
		</function>
		<function name="min_020" id="Function_1a3e6bca" isSystem="false" >
			<comment><![CDATA[minimum value of all anyarray input values]]></comment>
		</function>
		<function name="mktinterval" id="Function_1ea8949c" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.mktinterval(abstime, abstime)
 RETURNS tinterval
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$mktinterval$function$
]]></string>
			<comment><![CDATA[implementation of <#> operator]]></comment>
		</function>
		<function name="mod" id="Function_270a61d9" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.mod(smallint, smallint)
 RETURNS smallint
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$int2mod$function$
CREATE OR REPLACE FUNCTION pg_catalog.mod(integer, integer)
 RETURNS integer
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$int4mod$function$
CREATE OR REPLACE FUNCTION pg_catalog.mod(bigint, bigint)
 RETURNS bigint
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$int8mod$function$
CREATE OR REPLACE FUNCTION pg_catalog.mod(numeric, numeric)
 RETURNS numeric
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$numeric_mod$function$
]]></string>
			<comment><![CDATA[modulus]]></comment>
		</function>
		<function name="mod_001" id="Function_6b8335f" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.mod(smallint, smallint)
 RETURNS smallint
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$int2mod$function$
CREATE OR REPLACE FUNCTION pg_catalog.mod(integer, integer)
 RETURNS integer
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$int4mod$function$
CREATE OR REPLACE FUNCTION pg_catalog.mod(bigint, bigint)
 RETURNS bigint
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$int8mod$function$
CREATE OR REPLACE FUNCTION pg_catalog.mod(numeric, numeric)
 RETURNS numeric
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$numeric_mod$function$
]]></string>
			<comment><![CDATA[modulus]]></comment>
		</function>
		<function name="mod_002" id="Function_373613dc" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.mod(smallint, smallint)
 RETURNS smallint
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$int2mod$function$
CREATE OR REPLACE FUNCTION pg_catalog.mod(integer, integer)
 RETURNS integer
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$int4mod$function$
CREATE OR REPLACE FUNCTION pg_catalog.mod(bigint, bigint)
 RETURNS bigint
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$int8mod$function$
CREATE OR REPLACE FUNCTION pg_catalog.mod(numeric, numeric)
 RETURNS numeric
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$numeric_mod$function$
]]></string>
			<comment><![CDATA[modulus]]></comment>
		</function>
		<function name="mod_003" id="Function_2b19749d" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.mod(smallint, smallint)
 RETURNS smallint
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$int2mod$function$
CREATE OR REPLACE FUNCTION pg_catalog.mod(integer, integer)
 RETURNS integer
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$int4mod$function$
CREATE OR REPLACE FUNCTION pg_catalog.mod(bigint, bigint)
 RETURNS bigint
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$int8mod$function$
CREATE OR REPLACE FUNCTION pg_catalog.mod(numeric, numeric)
 RETURNS numeric
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$numeric_mod$function$
]]></string>
			<comment><![CDATA[modulus]]></comment>
		</function>
		<function name="mode" id="Function_1cecfbd6" isSystem="false" >
			<comment><![CDATA[most common value]]></comment>
		</function>
		<function name="mode_final" id="Function_2e489794" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.mode_final(internal, anyelement)
 RETURNS anyelement
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE
AS $function$mode_final$function$
]]></string>
			<comment><![CDATA[aggregate final function]]></comment>
		</function>
		<function name="money" id="Function_19e801ae" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.money(bigint)
 RETURNS money
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$int8_cash$function$
CREATE OR REPLACE FUNCTION pg_catalog.money(integer)
 RETURNS money
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$int4_cash$function$
CREATE OR REPLACE FUNCTION pg_catalog.money(numeric)
 RETURNS money
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$numeric_cash$function$
]]></string>
			<comment><![CDATA[convert int4 to money]]></comment>
		</function>
		<function name="money_001" id="Function_2f23c9c" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.money(bigint)
 RETURNS money
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$int8_cash$function$
CREATE OR REPLACE FUNCTION pg_catalog.money(integer)
 RETURNS money
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$int4_cash$function$
CREATE OR REPLACE FUNCTION pg_catalog.money(numeric)
 RETURNS money
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$numeric_cash$function$
]]></string>
			<comment><![CDATA[convert int4 to money]]></comment>
		</function>
		<function name="money_002" id="Function_3dca4a6" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.money(bigint)
 RETURNS money
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$int8_cash$function$
CREATE OR REPLACE FUNCTION pg_catalog.money(integer)
 RETURNS money
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$int4_cash$function$
CREATE OR REPLACE FUNCTION pg_catalog.money(numeric)
 RETURNS money
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$numeric_cash$function$
]]></string>
			<comment><![CDATA[convert int4 to money]]></comment>
		</function>
		<function name="mul_d_interval" id="Function_181257b5" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.mul_d_interval(double precision, interval)
 RETURNS interval
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$mul_d_interval$function$
]]></string>
			<comment><![CDATA[implementation of * operator]]></comment>
		</function>
		<function name="mxid_age" id="Function_36f5cc77" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.mxid_age(xid)
 RETURNS integer
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$mxid_age$function$
]]></string>
			<comment><![CDATA[age of a multi-transaction ID, in multi-transactions before current multi-transaction]]></comment>
		</function>
		<function name="name" id="Function_16152c0f" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.name(text)
 RETURNS name
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$text_name$function$
CREATE OR REPLACE FUNCTION pg_catalog.name(character)
 RETURNS name
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$bpchar_name$function$
CREATE OR REPLACE FUNCTION pg_catalog.name(character varying)
 RETURNS name
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$text_name$function$
]]></string>
			<comment><![CDATA[convert varchar to name]]></comment>
		</function>
		<function name="name_001" id="Function_133368f4" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.name(text)
 RETURNS name
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$text_name$function$
CREATE OR REPLACE FUNCTION pg_catalog.name(character)
 RETURNS name
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$bpchar_name$function$
CREATE OR REPLACE FUNCTION pg_catalog.name(character varying)
 RETURNS name
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$text_name$function$
]]></string>
			<comment><![CDATA[convert varchar to name]]></comment>
		</function>
		<function name="name_002" id="Function_235cbe8d" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.name(text)
 RETURNS name
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$text_name$function$
CREATE OR REPLACE FUNCTION pg_catalog.name(character)
 RETURNS name
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$bpchar_name$function$
CREATE OR REPLACE FUNCTION pg_catalog.name(character varying)
 RETURNS name
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$text_name$function$
]]></string>
			<comment><![CDATA[convert varchar to name]]></comment>
		</function>
		<function name="nameeq" id="Function_181d19d9" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.nameeq(name, name)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT LEAKPROOF
AS $function$nameeq$function$
]]></string>
			<comment><![CDATA[implementation of = operator]]></comment>
		</function>
		<function name="namege" id="Function_362cf95c" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.namege(name, name)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT LEAKPROOF
AS $function$namege$function$
]]></string>
			<comment><![CDATA[implementation of >= operator]]></comment>
		</function>
		<function name="namegt" id="Function_1f33d6c6" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.namegt(name, name)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT LEAKPROOF
AS $function$namegt$function$
]]></string>
			<comment><![CDATA[implementation of > operator]]></comment>
		</function>
		<function name="nameiclike" id="Function_31a0aa0f" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.nameiclike(name, text)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$nameiclike$function$
]]></string>
			<comment><![CDATA[implementation of ~~* operator]]></comment>
		</function>
		<function name="nameicnlike" id="Function_1246be08" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.nameicnlike(name, text)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$nameicnlike$function$
]]></string>
			<comment><![CDATA[implementation of !~~* operator]]></comment>
		</function>
		<function name="nameicregexeq" id="Function_86188ff" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.nameicregexeq(name, text)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$nameicregexeq$function$
]]></string>
			<comment><![CDATA[implementation of ~* operator]]></comment>
		</function>
		<function name="nameicregexne" id="Function_32056c86" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.nameicregexne(name, text)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$nameicregexne$function$
]]></string>
			<comment><![CDATA[implementation of !~* operator]]></comment>
		</function>
		<function name="namein" id="Function_1ebeffe2" isSystem="false" >
			<comment><![CDATA[I/O]]></comment>
		</function>
		<function name="namele" id="Function_3a4a07a6" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.namele(name, name)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT LEAKPROOF
AS $function$namele$function$
]]></string>
			<comment><![CDATA[implementation of <= operator]]></comment>
		</function>
		<function name="namelike" id="Function_3b3d13fd" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.namelike(name, text)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$namelike$function$
]]></string>
			<comment><![CDATA[implementation of ~~ operator]]></comment>
		</function>
		<function name="namelt" id="Function_19aa7d48" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.namelt(name, name)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT LEAKPROOF
AS $function$namelt$function$
]]></string>
			<comment><![CDATA[implementation of < operator]]></comment>
		</function>
		<function name="namene" id="Function_2bb855f7" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.namene(name, name)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT LEAKPROOF
AS $function$namene$function$
]]></string>
			<comment><![CDATA[implementation of <> operator]]></comment>
		</function>
		<function name="namenlike" id="Function_132fc37" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.namenlike(name, text)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$namenlike$function$
]]></string>
			<comment><![CDATA[implementation of !~~ operator]]></comment>
		</function>
		<function name="nameout" id="Function_2879f2a3" isSystem="false" >
			<comment><![CDATA[I/O]]></comment>
		</function>
		<function name="namerecv" id="Function_6cd7ec3" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.namerecv(internal)
 RETURNS name
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$namerecv$function$
]]></string>
			<comment><![CDATA[I/O]]></comment>
		</function>
		<function name="nameregexeq" id="Function_de76adb" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.nameregexeq(name, text)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$nameregexeq$function$
]]></string>
			<comment><![CDATA[implementation of ~ operator]]></comment>
		</function>
		<function name="nameregexne" id="Function_209bf2d2" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.nameregexne(name, text)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$nameregexne$function$
]]></string>
			<comment><![CDATA[implementation of !~ operator]]></comment>
		</function>
		<function name="namesend" id="Function_27ec8981" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.namesend(name)
 RETURNS bytea
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$namesend$function$
]]></string>
			<comment><![CDATA[I/O]]></comment>
		</function>
		<function name="neqjoinsel" id="Function_1d06db82" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.neqjoinsel(internal, oid, internal, smallint, internal)
 RETURNS double precision
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$neqjoinsel$function$
]]></string>
			<comment><![CDATA[join selectivity of <> and related operators]]></comment>
		</function>
		<function name="neqsel" id="Function_360fa199" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.neqsel(internal, oid, internal, integer)
 RETURNS double precision
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$neqsel$function$
]]></string>
			<comment><![CDATA[restriction selectivity of <> and related operators]]></comment>
		</function>
		<function name="netmask" id="Function_2425cf58" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.netmask(inet)
 RETURNS inet
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$network_netmask$function$
]]></string>
			<comment><![CDATA[netmask of address]]></comment>
		</function>
		<function name="network" id="Function_19f68463" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.network(inet)
 RETURNS cidr
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$network_network$function$
]]></string>
			<comment><![CDATA[network part of address]]></comment>
		</function>
		<function name="network_cmp" id="Function_2424a759" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.network_cmp(inet, inet)
 RETURNS integer
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$network_cmp$function$
]]></string>
			<comment><![CDATA[less-equal-greater]]></comment>
		</function>
		<function name="network_eq" id="Function_26b0b67e" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.network_eq(inet, inet)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT LEAKPROOF
AS $function$network_eq$function$
]]></string>
			<comment><![CDATA[implementation of = operator]]></comment>
		</function>
		<function name="network_ge" id="Function_24597d78" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.network_ge(inet, inet)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT LEAKPROOF
AS $function$network_ge$function$
]]></string>
			<comment><![CDATA[implementation of >= operator]]></comment>
		</function>
		<function name="network_gt" id="Function_215b28b1" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.network_gt(inet, inet)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT LEAKPROOF
AS $function$network_gt$function$
]]></string>
			<comment><![CDATA[implementation of > operator]]></comment>
		</function>
		<function name="network_larger" id="Function_ba35b1e" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.network_larger(inet, inet)
 RETURNS inet
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$network_larger$function$
]]></string>
			<comment><![CDATA[larger of two]]></comment>
		</function>
		<function name="network_le" id="Function_35913e57" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.network_le(inet, inet)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT LEAKPROOF
AS $function$network_le$function$
]]></string>
			<comment><![CDATA[implementation of <= operator]]></comment>
		</function>
		<function name="network_lt" id="Function_33d6af6e" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.network_lt(inet, inet)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT LEAKPROOF
AS $function$network_lt$function$
]]></string>
			<comment><![CDATA[implementation of < operator]]></comment>
		</function>
		<function name="network_ne" id="Function_35bc17db" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.network_ne(inet, inet)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT LEAKPROOF
AS $function$network_ne$function$
]]></string>
			<comment><![CDATA[implementation of <> operator]]></comment>
		</function>
		<function name="network_overlap" id="Function_23971ac2" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.network_overlap(inet, inet)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$network_overlap$function$
]]></string>
			<comment><![CDATA[implementation of && operator]]></comment>
		</function>
		<function name="network_smaller" id="Function_26c3973a" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.network_smaller(inet, inet)
 RETURNS inet
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$network_smaller$function$
]]></string>
			<comment><![CDATA[smaller of two]]></comment>
		</function>
		<function name="network_sub" id="Function_232f5fcf" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.network_sub(inet, inet)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$network_sub$function$
]]></string>
			<comment><![CDATA[implementation of << operator]]></comment>
		</function>
		<function name="network_subeq" id="Function_2a9f2073" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.network_subeq(inet, inet)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$network_subeq$function$
]]></string>
			<comment><![CDATA[implementation of <<= operator]]></comment>
		</function>
		<function name="network_sup" id="Function_38c68948" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.network_sup(inet, inet)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$network_sup$function$
]]></string>
			<comment><![CDATA[implementation of >> operator]]></comment>
		</function>
		<function name="network_supeq" id="Function_39c0aab5" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.network_supeq(inet, inet)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$network_supeq$function$
]]></string>
			<comment><![CDATA[implementation of >>= operator]]></comment>
		</function>
		<function name="networkjoinsel" id="Function_36452bc3" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.networkjoinsel(internal, oid, internal, smallint, internal)
 RETURNS double precision
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$networkjoinsel$function$
]]></string>
			<comment><![CDATA[join selectivity for network operators]]></comment>
		</function>
		<function name="networksel" id="Function_3488e7dd" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.networksel(internal, oid, internal, integer)
 RETURNS double precision
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$networksel$function$
]]></string>
			<comment><![CDATA[restriction selectivity for network operators]]></comment>
		</function>
		<function name="nextval" id="Function_1315e804" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.nextval(regclass)
 RETURNS bigint
 LANGUAGE internal
 STRICT
AS $function$nextval_oid$function$
]]></string>
			<comment><![CDATA[sequence next value]]></comment>
		</function>
		<function name="nlikejoinsel" id="Function_117fdea5" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.nlikejoinsel(internal, oid, internal, smallint, internal)
 RETURNS double precision
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$nlikejoinsel$function$
]]></string>
			<comment><![CDATA[join selectivity of NOT LIKE]]></comment>
		</function>
		<function name="nlikesel" id="Function_326d45ab" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.nlikesel(internal, oid, internal, integer)
 RETURNS double precision
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$nlikesel$function$
]]></string>
			<comment><![CDATA[restriction selectivity of NOT LIKE]]></comment>
		</function>
		<function name="notlike" id="Function_3ef0735" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.notlike(bytea, bytea)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$byteanlike$function$
CREATE OR REPLACE FUNCTION pg_catalog.notlike(name, text)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$namenlike$function$
CREATE OR REPLACE FUNCTION pg_catalog.notlike(text, text)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$textnlike$function$
]]></string>
			<comment><![CDATA[does not match LIKE expression]]></comment>
		</function>
		<function name="notlike_001" id="Function_2a9b563e" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.notlike(bytea, bytea)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$byteanlike$function$
CREATE OR REPLACE FUNCTION pg_catalog.notlike(name, text)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$namenlike$function$
CREATE OR REPLACE FUNCTION pg_catalog.notlike(text, text)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$textnlike$function$
]]></string>
			<comment><![CDATA[does not match LIKE expression]]></comment>
		</function>
		<function name="notlike_002" id="Function_27c89960" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.notlike(bytea, bytea)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$byteanlike$function$
CREATE OR REPLACE FUNCTION pg_catalog.notlike(name, text)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$namenlike$function$
CREATE OR REPLACE FUNCTION pg_catalog.notlike(text, text)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$textnlike$function$
]]></string>
			<comment><![CDATA[does not match LIKE expression]]></comment>
		</function>
		<function name="now" id="Function_da4262e" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.now()
 RETURNS timestamp with time zone
 LANGUAGE internal
 STABLE PARALLEL RESTRICTED STRICT
AS $function$now$function$
]]></string>
			<comment><![CDATA[current transaction time]]></comment>
		</function>
		<function name="npoints" id="Function_10faf7f9" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.npoints(path)
 RETURNS integer
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$path_npoints$function$
CREATE OR REPLACE FUNCTION pg_catalog.npoints(polygon)
 RETURNS integer
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$poly_npoints$function$
]]></string>
			<comment><![CDATA[number of points]]></comment>
		</function>
		<function name="npoints_001" id="Function_27f4789c" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.npoints(path)
 RETURNS integer
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$path_npoints$function$
CREATE OR REPLACE FUNCTION pg_catalog.npoints(polygon)
 RETURNS integer
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$poly_npoints$function$
]]></string>
			<comment><![CDATA[number of points]]></comment>
		</function>
		<function name="nth_value" id="Function_1be4521c" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.nth_value(anyelement, integer)
 RETURNS anyelement
 LANGUAGE internal
 WINDOW IMMUTABLE PARALLEL SAFE STRICT
AS $function$window_nth_value$function$
]]></string>
			<comment><![CDATA[fetch the Nth row value]]></comment>
		</function>
		<function name="ntile" id="Function_3b18b4ea" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.ntile(integer)
 RETURNS integer
 LANGUAGE internal
 WINDOW IMMUTABLE PARALLEL SAFE STRICT
AS $function$window_ntile$function$
]]></string>
			<comment><![CDATA[split rows into N groups]]></comment>
		</function>
		<function name="num_nonnulls" id="Function_3315c02f" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.num_nonnulls(VARIADIC "any")
 RETURNS integer
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE
AS $function$pg_num_nonnulls$function$
]]></string>
			<comment><![CDATA[count the number of non-NULL arguments]]></comment>
		</function>
		<function name="num_nulls" id="Function_61f5522" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.num_nulls(VARIADIC "any")
 RETURNS integer
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE
AS $function$pg_num_nulls$function$
]]></string>
			<comment><![CDATA[count the number of NULL arguments]]></comment>
		</function>
		<function name="numeric" id="Function_381eb396" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog."numeric"(money)
 RETURNS numeric
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$cash_numeric$function$
CREATE OR REPLACE FUNCTION pg_catalog."numeric"(numeric, integer)
 RETURNS numeric
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$numeric$function$
CREATE OR REPLACE FUNCTION pg_catalog."numeric"(integer)
 RETURNS numeric
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$int4_numeric$function$
CREATE OR REPLACE FUNCTION pg_catalog."numeric"(real)
 RETURNS numeric
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$float4_numeric$function$
CREATE OR REPLACE FUNCTION pg_catalog."numeric"(double precision)
 RETURNS numeric
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$float8_numeric$function$
CREATE OR REPLACE FUNCTION pg_catalog."numeric"(bigint)
 RETURNS numeric
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$int8_numeric$function$
CREATE OR REPLACE FUNCTION pg_catalog."numeric"(smallint)
 RETURNS numeric
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$int2_numeric$function$
]]></string>
			<comment><![CDATA[adjust numeric to typmod precision/scale]]></comment>
		</function>
		<function name="numeric_001" id="Function_2441aff" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog."numeric"(money)
 RETURNS numeric
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$cash_numeric$function$
CREATE OR REPLACE FUNCTION pg_catalog."numeric"(numeric, integer)
 RETURNS numeric
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$numeric$function$
CREATE OR REPLACE FUNCTION pg_catalog."numeric"(integer)
 RETURNS numeric
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$int4_numeric$function$
CREATE OR REPLACE FUNCTION pg_catalog."numeric"(real)
 RETURNS numeric
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$float4_numeric$function$
CREATE OR REPLACE FUNCTION pg_catalog."numeric"(double precision)
 RETURNS numeric
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$float8_numeric$function$
CREATE OR REPLACE FUNCTION pg_catalog."numeric"(bigint)
 RETURNS numeric
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$int8_numeric$function$
CREATE OR REPLACE FUNCTION pg_catalog."numeric"(smallint)
 RETURNS numeric
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$int2_numeric$function$
]]></string>
			<comment><![CDATA[adjust numeric to typmod precision/scale]]></comment>
		</function>
		<function name="numeric_002" id="Function_1295d5f7" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog."numeric"(money)
 RETURNS numeric
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$cash_numeric$function$
CREATE OR REPLACE FUNCTION pg_catalog."numeric"(numeric, integer)
 RETURNS numeric
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$numeric$function$
CREATE OR REPLACE FUNCTION pg_catalog."numeric"(integer)
 RETURNS numeric
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$int4_numeric$function$
CREATE OR REPLACE FUNCTION pg_catalog."numeric"(real)
 RETURNS numeric
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$float4_numeric$function$
CREATE OR REPLACE FUNCTION pg_catalog."numeric"(double precision)
 RETURNS numeric
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$float8_numeric$function$
CREATE OR REPLACE FUNCTION pg_catalog."numeric"(bigint)
 RETURNS numeric
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$int8_numeric$function$
CREATE OR REPLACE FUNCTION pg_catalog."numeric"(smallint)
 RETURNS numeric
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$int2_numeric$function$
]]></string>
			<comment><![CDATA[adjust numeric to typmod precision/scale]]></comment>
		</function>
		<function name="numeric_003" id="Function_114311d6" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog."numeric"(money)
 RETURNS numeric
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$cash_numeric$function$
CREATE OR REPLACE FUNCTION pg_catalog."numeric"(numeric, integer)
 RETURNS numeric
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$numeric$function$
CREATE OR REPLACE FUNCTION pg_catalog."numeric"(integer)
 RETURNS numeric
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$int4_numeric$function$
CREATE OR REPLACE FUNCTION pg_catalog."numeric"(real)
 RETURNS numeric
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$float4_numeric$function$
CREATE OR REPLACE FUNCTION pg_catalog."numeric"(double precision)
 RETURNS numeric
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$float8_numeric$function$
CREATE OR REPLACE FUNCTION pg_catalog."numeric"(bigint)
 RETURNS numeric
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$int8_numeric$function$
CREATE OR REPLACE FUNCTION pg_catalog."numeric"(smallint)
 RETURNS numeric
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$int2_numeric$function$
]]></string>
			<comment><![CDATA[adjust numeric to typmod precision/scale]]></comment>
		</function>
		<function name="numeric_004" id="Function_334b1d98" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog."numeric"(money)
 RETURNS numeric
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$cash_numeric$function$
CREATE OR REPLACE FUNCTION pg_catalog."numeric"(numeric, integer)
 RETURNS numeric
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$numeric$function$
CREATE OR REPLACE FUNCTION pg_catalog."numeric"(integer)
 RETURNS numeric
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$int4_numeric$function$
CREATE OR REPLACE FUNCTION pg_catalog."numeric"(real)
 RETURNS numeric
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$float4_numeric$function$
CREATE OR REPLACE FUNCTION pg_catalog."numeric"(double precision)
 RETURNS numeric
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$float8_numeric$function$
CREATE OR REPLACE FUNCTION pg_catalog."numeric"(bigint)
 RETURNS numeric
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$int8_numeric$function$
CREATE OR REPLACE FUNCTION pg_catalog."numeric"(smallint)
 RETURNS numeric
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$int2_numeric$function$
]]></string>
			<comment><![CDATA[adjust numeric to typmod precision/scale]]></comment>
		</function>
		<function name="numeric_005" id="Function_1772e413" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog."numeric"(money)
 RETURNS numeric
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$cash_numeric$function$
CREATE OR REPLACE FUNCTION pg_catalog."numeric"(numeric, integer)
 RETURNS numeric
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$numeric$function$
CREATE OR REPLACE FUNCTION pg_catalog."numeric"(integer)
 RETURNS numeric
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$int4_numeric$function$
CREATE OR REPLACE FUNCTION pg_catalog."numeric"(real)
 RETURNS numeric
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$float4_numeric$function$
CREATE OR REPLACE FUNCTION pg_catalog."numeric"(double precision)
 RETURNS numeric
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$float8_numeric$function$
CREATE OR REPLACE FUNCTION pg_catalog."numeric"(bigint)
 RETURNS numeric
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$int8_numeric$function$
CREATE OR REPLACE FUNCTION pg_catalog."numeric"(smallint)
 RETURNS numeric
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$int2_numeric$function$
]]></string>
			<comment><![CDATA[adjust numeric to typmod precision/scale]]></comment>
		</function>
		<function name="numeric_006" id="Function_1219a6a1" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog."numeric"(money)
 RETURNS numeric
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$cash_numeric$function$
CREATE OR REPLACE FUNCTION pg_catalog."numeric"(numeric, integer)
 RETURNS numeric
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$numeric$function$
CREATE OR REPLACE FUNCTION pg_catalog."numeric"(integer)
 RETURNS numeric
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$int4_numeric$function$
CREATE OR REPLACE FUNCTION pg_catalog."numeric"(real)
 RETURNS numeric
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$float4_numeric$function$
CREATE OR REPLACE FUNCTION pg_catalog."numeric"(double precision)
 RETURNS numeric
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$float8_numeric$function$
CREATE OR REPLACE FUNCTION pg_catalog."numeric"(bigint)
 RETURNS numeric
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$int8_numeric$function$
CREATE OR REPLACE FUNCTION pg_catalog."numeric"(smallint)
 RETURNS numeric
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$int2_numeric$function$
]]></string>
			<comment><![CDATA[adjust numeric to typmod precision/scale]]></comment>
		</function>
		<function name="numeric_abs" id="Function_1abc9aa2" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.numeric_abs(numeric)
 RETURNS numeric
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$numeric_abs$function$
]]></string>
			<comment><![CDATA[implementation of @ operator]]></comment>
		</function>
		<function name="numeric_accum" id="Function_1a5d8b8c" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.numeric_accum(internal, numeric)
 RETURNS internal
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE
AS $function$numeric_accum$function$
]]></string>
			<comment><![CDATA[aggregate transition function]]></comment>
		</function>
		<function name="numeric_accum_inv" id="Function_2e4fe027" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.numeric_accum_inv(internal, numeric)
 RETURNS internal
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE
AS $function$numeric_accum_inv$function$
]]></string>
			<comment><![CDATA[aggregate transition function]]></comment>
		</function>
		<function name="numeric_add" id="Function_107da8ce" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.numeric_add(numeric, numeric)
 RETURNS numeric
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$numeric_add$function$
]]></string>
			<comment><![CDATA[implementation of + operator]]></comment>
		</function>
		<function name="numeric_avg" id="Function_25661462" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.numeric_avg(internal)
 RETURNS numeric
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE
AS $function$numeric_avg$function$
]]></string>
			<comment><![CDATA[aggregate final function]]></comment>
		</function>
		<function name="numeric_avg_accum" id="Function_34a9a268" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.numeric_avg_accum(internal, numeric)
 RETURNS internal
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE
AS $function$numeric_avg_accum$function$
]]></string>
			<comment><![CDATA[aggregate transition function]]></comment>
		</function>
		<function name="numeric_avg_combine" id="Function_32acfe62" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.numeric_avg_combine(internal, internal)
 RETURNS internal
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE
AS $function$numeric_avg_combine$function$
]]></string>
			<comment><![CDATA[aggregate combine function]]></comment>
		</function>
		<function name="numeric_avg_deserialize" id="Function_1cccacc5" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.numeric_avg_deserialize(bytea, internal)
 RETURNS internal
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$numeric_avg_deserialize$function$
]]></string>
			<comment><![CDATA[aggregate deserial function]]></comment>
		</function>
		<function name="numeric_avg_serialize" id="Function_10fd5a21" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.numeric_avg_serialize(internal)
 RETURNS bytea
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$numeric_avg_serialize$function$
]]></string>
			<comment><![CDATA[aggregate serial function]]></comment>
		</function>
		<function name="numeric_cmp" id="Function_341a931f" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.numeric_cmp(numeric, numeric)
 RETURNS integer
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$numeric_cmp$function$
]]></string>
			<comment><![CDATA[less-equal-greater]]></comment>
		</function>
		<function name="numeric_combine" id="Function_332f04ce" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.numeric_combine(internal, internal)
 RETURNS internal
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE
AS $function$numeric_combine$function$
]]></string>
			<comment><![CDATA[aggregate combine function]]></comment>
		</function>
		<function name="numeric_deserialize" id="Function_202e2f5f" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.numeric_deserialize(bytea, internal)
 RETURNS internal
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$numeric_deserialize$function$
]]></string>
			<comment><![CDATA[aggregate deserial function]]></comment>
		</function>
		<function name="numeric_div" id="Function_3a94d749" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.numeric_div(numeric, numeric)
 RETURNS numeric
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$numeric_div$function$
]]></string>
			<comment><![CDATA[implementation of / operator]]></comment>
		</function>
		<function name="numeric_div_trunc" id="Function_22ee1014" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.numeric_div_trunc(numeric, numeric)
 RETURNS numeric
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$numeric_div_trunc$function$
]]></string>
			<comment><![CDATA[trunc(x/y)]]></comment>
		</function>
		<function name="numeric_eq" id="Function_18f1b77c" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.numeric_eq(numeric, numeric)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$numeric_eq$function$
]]></string>
			<comment><![CDATA[implementation of = operator]]></comment>
		</function>
		<function name="numeric_exp" id="Function_1eb4334a" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.numeric_exp(numeric)
 RETURNS numeric
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$numeric_exp$function$
]]></string>
			<comment><![CDATA[natural exponential (e^x)]]></comment>
		</function>
		<function name="numeric_fac" id="Function_2e328ba6" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.numeric_fac(bigint)
 RETURNS numeric
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$numeric_fac$function$
]]></string>
			<comment><![CDATA[implementation of ! operator]]></comment>
		</function>
		<function name="numeric_ge" id="Function_247beb3d" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.numeric_ge(numeric, numeric)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$numeric_ge$function$
]]></string>
			<comment><![CDATA[implementation of >= operator]]></comment>
		</function>
		<function name="numeric_gt" id="Function_234f99e3" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.numeric_gt(numeric, numeric)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$numeric_gt$function$
]]></string>
			<comment><![CDATA[implementation of > operator]]></comment>
		</function>
		<function name="numeric_in" id="Function_2d5fddff" isSystem="false" >
			<comment><![CDATA[I/O]]></comment>
		</function>
		<function name="numeric_inc" id="Function_1efa7663" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.numeric_inc(numeric)
 RETURNS numeric
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$numeric_inc$function$
]]></string>
			<comment><![CDATA[increment by one]]></comment>
		</function>
		<function name="numeric_larger" id="Function_3261964a" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.numeric_larger(numeric, numeric)
 RETURNS numeric
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$numeric_larger$function$
]]></string>
			<comment><![CDATA[larger of two]]></comment>
		</function>
		<function name="numeric_le" id="Function_1abaec25" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.numeric_le(numeric, numeric)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$numeric_le$function$
]]></string>
			<comment><![CDATA[implementation of <= operator]]></comment>
		</function>
		<function name="numeric_ln" id="Function_1cff056b" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.numeric_ln(numeric)
 RETURNS numeric
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$numeric_ln$function$
]]></string>
			<comment><![CDATA[natural logarithm]]></comment>
		</function>
		<function name="numeric_log" id="Function_22c336e0" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.numeric_log(numeric, numeric)
 RETURNS numeric
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$numeric_log$function$
]]></string>
			<comment><![CDATA[logarithm base m of n]]></comment>
		</function>
		<function name="numeric_lt" id="Function_2eaa43f4" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.numeric_lt(numeric, numeric)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$numeric_lt$function$
]]></string>
			<comment><![CDATA[implementation of < operator]]></comment>
		</function>
		<function name="numeric_mod" id="Function_145a14d3" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.numeric_mod(numeric, numeric)
 RETURNS numeric
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$numeric_mod$function$
]]></string>
			<comment><![CDATA[implementation of % operator]]></comment>
		</function>
		<function name="numeric_mul" id="Function_33797703" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.numeric_mul(numeric, numeric)
 RETURNS numeric
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$numeric_mul$function$
]]></string>
			<comment><![CDATA[implementation of * operator]]></comment>
		</function>
		<function name="numeric_ne" id="Function_2769370f" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.numeric_ne(numeric, numeric)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$numeric_ne$function$
]]></string>
			<comment><![CDATA[implementation of <> operator]]></comment>
		</function>
		<function name="numeric_out" id="Function_2058033e" isSystem="false" >
			<comment><![CDATA[I/O]]></comment>
		</function>
		<function name="numeric_poly_avg" id="Function_2dac35c0" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.numeric_poly_avg(internal)
 RETURNS numeric
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE
AS $function$numeric_poly_avg$function$
]]></string>
			<comment><![CDATA[aggregate final function]]></comment>
		</function>
		<function name="numeric_poly_combine" id="Function_524346d" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.numeric_poly_combine(internal, internal)
 RETURNS internal
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE
AS $function$numeric_poly_combine$function$
]]></string>
			<comment><![CDATA[aggregate combine function]]></comment>
		</function>
		<function name="numeric_poly_deserialize" id="Function_29098f92" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.numeric_poly_deserialize(bytea, internal)
 RETURNS internal
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$numeric_poly_deserialize$function$
]]></string>
			<comment><![CDATA[aggregate deserial function]]></comment>
		</function>
		<function name="numeric_poly_serialize" id="Function_7634c23" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.numeric_poly_serialize(internal)
 RETURNS bytea
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$numeric_poly_serialize$function$
]]></string>
			<comment><![CDATA[aggregate serial function]]></comment>
		</function>
		<function name="numeric_poly_stddev_pop" id="Function_3473302b" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.numeric_poly_stddev_pop(internal)
 RETURNS numeric
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE
AS $function$numeric_poly_stddev_pop$function$
]]></string>
			<comment><![CDATA[aggregate final function]]></comment>
		</function>
		<function name="numeric_poly_stddev_samp" id="Function_1f0d185" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.numeric_poly_stddev_samp(internal)
 RETURNS numeric
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE
AS $function$numeric_poly_stddev_samp$function$
]]></string>
			<comment><![CDATA[aggregate final function]]></comment>
		</function>
		<function name="numeric_poly_sum" id="Function_399be6a" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.numeric_poly_sum(internal)
 RETURNS numeric
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE
AS $function$numeric_poly_sum$function$
]]></string>
			<comment><![CDATA[aggregate final function]]></comment>
		</function>
		<function name="numeric_poly_var_pop" id="Function_29cde628" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.numeric_poly_var_pop(internal)
 RETURNS numeric
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE
AS $function$numeric_poly_var_pop$function$
]]></string>
			<comment><![CDATA[aggregate final function]]></comment>
		</function>
		<function name="numeric_poly_var_samp" id="Function_26c47b3" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.numeric_poly_var_samp(internal)
 RETURNS numeric
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE
AS $function$numeric_poly_var_samp$function$
]]></string>
			<comment><![CDATA[aggregate final function]]></comment>
		</function>
		<function name="numeric_power" id="Function_1a9b1cde" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.numeric_power(numeric, numeric)
 RETURNS numeric
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$numeric_power$function$
]]></string>
			<comment><![CDATA[implementation of ^ operator]]></comment>
		</function>
		<function name="numeric_recv" id="Function_260e4c60" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.numeric_recv(internal, oid, integer)
 RETURNS numeric
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$numeric_recv$function$
]]></string>
			<comment><![CDATA[I/O]]></comment>
		</function>
		<function name="numeric_send" id="Function_3aa61181" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.numeric_send(numeric)
 RETURNS bytea
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$numeric_send$function$
]]></string>
			<comment><![CDATA[I/O]]></comment>
		</function>
		<function name="numeric_serialize" id="Function_394151c2" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.numeric_serialize(internal)
 RETURNS bytea
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$numeric_serialize$function$
]]></string>
			<comment><![CDATA[aggregate serial function]]></comment>
		</function>
		<function name="numeric_smaller" id="Function_2f78a462" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.numeric_smaller(numeric, numeric)
 RETURNS numeric
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$numeric_smaller$function$
]]></string>
			<comment><![CDATA[smaller of two]]></comment>
		</function>
		<function name="numeric_sortsupport" id="Function_fac3097" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.numeric_sortsupport(internal)
 RETURNS void
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$numeric_sortsupport$function$
]]></string>
			<comment><![CDATA[sort support]]></comment>
		</function>
		<function name="numeric_sqrt" id="Function_373a90e2" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.numeric_sqrt(numeric)
 RETURNS numeric
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$numeric_sqrt$function$
]]></string>
			<comment><![CDATA[square root]]></comment>
		</function>
		<function name="numeric_stddev_pop" id="Function_1326d1f6" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.numeric_stddev_pop(internal)
 RETURNS numeric
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE
AS $function$numeric_stddev_pop$function$
]]></string>
			<comment><![CDATA[aggregate final function]]></comment>
		</function>
		<function name="numeric_stddev_samp" id="Function_d50af12" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.numeric_stddev_samp(internal)
 RETURNS numeric
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE
AS $function$numeric_stddev_samp$function$
]]></string>
			<comment><![CDATA[aggregate final function]]></comment>
		</function>
		<function name="numeric_sub" id="Function_2c66a6d2" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.numeric_sub(numeric, numeric)
 RETURNS numeric
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$numeric_sub$function$
]]></string>
			<comment><![CDATA[implementation of - operator]]></comment>
		</function>
		<function name="numeric_sum" id="Function_138925c4" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.numeric_sum(internal)
 RETURNS numeric
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE
AS $function$numeric_sum$function$
]]></string>
			<comment><![CDATA[aggregate final function]]></comment>
		</function>
		<function name="numeric_transform" id="Function_3887f3dc" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.numeric_transform(internal)
 RETURNS internal
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$numeric_transform$function$
]]></string>
			<comment><![CDATA[transform a numeric length coercion]]></comment>
		</function>
		<function name="numeric_uminus" id="Function_e01032e" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.numeric_uminus(numeric)
 RETURNS numeric
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$numeric_uminus$function$
]]></string>
			<comment><![CDATA[implementation of - operator]]></comment>
		</function>
		<function name="numeric_uplus" id="Function_216b435f" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.numeric_uplus(numeric)
 RETURNS numeric
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$numeric_uplus$function$
]]></string>
			<comment><![CDATA[implementation of + operator]]></comment>
		</function>
		<function name="numeric_var_pop" id="Function_5ef8f85" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.numeric_var_pop(internal)
 RETURNS numeric
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE
AS $function$numeric_var_pop$function$
]]></string>
			<comment><![CDATA[aggregate final function]]></comment>
		</function>
		<function name="numeric_var_samp" id="Function_3543b0c6" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.numeric_var_samp(internal)
 RETURNS numeric
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE
AS $function$numeric_var_samp$function$
]]></string>
			<comment><![CDATA[aggregate final function]]></comment>
		</function>
		<function name="numerictypmodin" id="Function_388ad5a" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.numerictypmodin(cstring[])
 RETURNS integer
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$numerictypmodin$function$
]]></string>
			<comment><![CDATA[I/O typmod]]></comment>
		</function>
		<function name="numerictypmodout" id="Function_2af686c2" isSystem="false" >
			<comment><![CDATA[I/O typmod]]></comment>
		</function>
		<function name="numnode" id="Function_e96c168" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.numnode(tsquery)
 RETURNS integer
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$tsquery_numnode$function$
]]></string>
			<comment><![CDATA[number of nodes]]></comment>
		</function>
		<function name="numrange" id="Function_30b1319a" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.numrange(numeric, numeric)
 RETURNS numrange
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE
AS $function$range_constructor2$function$
CREATE OR REPLACE FUNCTION pg_catalog.numrange(numeric, numeric, text)
 RETURNS numrange
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE
AS $function$range_constructor3$function$
]]></string>
			<comment><![CDATA[numrange constructor]]></comment>
		</function>
		<function name="numrange_001" id="Function_14a3555" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.numrange(numeric, numeric)
 RETURNS numrange
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE
AS $function$range_constructor2$function$
CREATE OR REPLACE FUNCTION pg_catalog.numrange(numeric, numeric, text)
 RETURNS numrange
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE
AS $function$range_constructor3$function$
]]></string>
			<comment><![CDATA[numrange constructor]]></comment>
		</function>
		<function name="numrange_subdiff" id="Function_2000dbe0" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.numrange_subdiff(numeric, numeric)
 RETURNS double precision
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$numrange_subdiff$function$
]]></string>
			<comment><![CDATA[float8 difference of two numeric values]]></comment>
		</function>
		<function name="obj_description" id="Function_389dc9f2" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.obj_description(oid)
 RETURNS text
 LANGUAGE sql
 STABLE PARALLEL SAFE STRICT
AS $function$select description from pg_catalog.pg_description where objoid = $1 and objsubid = 0$function$
CREATE OR REPLACE FUNCTION pg_catalog.obj_description(oid, name)
 RETURNS text
 LANGUAGE sql
 STABLE PARALLEL SAFE STRICT
AS $function$select description from pg_catalog.pg_description where objoid = $1 and classoid = (select oid from pg_catalog.pg_class where relname = $2 and relnamespace = 11) and objsubid = 0$function$
]]></string>
			<comment><![CDATA[get description for object id and catalog name]]></comment>
		</function>
		<function name="obj_description_001" id="Function_31382fb8" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.obj_description(oid)
 RETURNS text
 LANGUAGE sql
 STABLE PARALLEL SAFE STRICT
AS $function$select description from pg_catalog.pg_description where objoid = $1 and objsubid = 0$function$
CREATE OR REPLACE FUNCTION pg_catalog.obj_description(oid, name)
 RETURNS text
 LANGUAGE sql
 STABLE PARALLEL SAFE STRICT
AS $function$select description from pg_catalog.pg_description where objoid = $1 and classoid = (select oid from pg_catalog.pg_class where relname = $2 and relnamespace = 11) and objsubid = 0$function$
]]></string>
			<comment><![CDATA[get description for object id and catalog name]]></comment>
		</function>
		<function name="octet_length" id="Function_1a1e367a" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.octet_length(bytea)
 RETURNS integer
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$byteaoctetlen$function$
CREATE OR REPLACE FUNCTION pg_catalog.octet_length(text)
 RETURNS integer
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$textoctetlen$function$
CREATE OR REPLACE FUNCTION pg_catalog.octet_length(character)
 RETURNS integer
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$bpcharoctetlen$function$
CREATE OR REPLACE FUNCTION pg_catalog.octet_length(bit)
 RETURNS integer
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$bitoctetlength$function$
]]></string>
			<comment><![CDATA[octet length]]></comment>
		</function>
		<function name="octet_length_001" id="Function_1b824d4e" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.octet_length(bytea)
 RETURNS integer
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$byteaoctetlen$function$
CREATE OR REPLACE FUNCTION pg_catalog.octet_length(text)
 RETURNS integer
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$textoctetlen$function$
CREATE OR REPLACE FUNCTION pg_catalog.octet_length(character)
 RETURNS integer
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$bpcharoctetlen$function$
CREATE OR REPLACE FUNCTION pg_catalog.octet_length(bit)
 RETURNS integer
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$bitoctetlength$function$
]]></string>
			<comment><![CDATA[octet length]]></comment>
		</function>
		<function name="octet_length_002" id="Function_f6a3054" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.octet_length(bytea)
 RETURNS integer
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$byteaoctetlen$function$
CREATE OR REPLACE FUNCTION pg_catalog.octet_length(text)
 RETURNS integer
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$textoctetlen$function$
CREATE OR REPLACE FUNCTION pg_catalog.octet_length(character)
 RETURNS integer
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$bpcharoctetlen$function$
CREATE OR REPLACE FUNCTION pg_catalog.octet_length(bit)
 RETURNS integer
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$bitoctetlength$function$
]]></string>
			<comment><![CDATA[octet length]]></comment>
		</function>
		<function name="octet_length_003" id="Function_36e67080" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.octet_length(bytea)
 RETURNS integer
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$byteaoctetlen$function$
CREATE OR REPLACE FUNCTION pg_catalog.octet_length(text)
 RETURNS integer
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$textoctetlen$function$
CREATE OR REPLACE FUNCTION pg_catalog.octet_length(character)
 RETURNS integer
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$bpcharoctetlen$function$
CREATE OR REPLACE FUNCTION pg_catalog.octet_length(bit)
 RETURNS integer
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$bitoctetlength$function$
]]></string>
			<comment><![CDATA[octet length]]></comment>
		</function>
		<function name="oid" id="Function_15ddd94d" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.oid(bigint)
 RETURNS oid
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$i8tooid$function$
]]></string>
			<comment><![CDATA[convert int8 to oid]]></comment>
		</function>
		<function name="oideq" id="Function_2fddb953" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.oideq(oid, oid)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT LEAKPROOF
AS $function$oideq$function$
]]></string>
			<comment><![CDATA[implementation of = operator]]></comment>
		</function>
		<function name="oidge" id="Function_8244991" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.oidge(oid, oid)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT LEAKPROOF
AS $function$oidge$function$
]]></string>
			<comment><![CDATA[implementation of >= operator]]></comment>
		</function>
		<function name="oidgt" id="Function_226050d0" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.oidgt(oid, oid)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT LEAKPROOF
AS $function$oidgt$function$
]]></string>
			<comment><![CDATA[implementation of > operator]]></comment>
		</function>
		<function name="oidin" id="Function_30d5be59" isSystem="false" >
			<comment><![CDATA[I/O]]></comment>
		</function>
		<function name="oidlarger" id="Function_2ff4480" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.oidlarger(oid, oid)
 RETURNS oid
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$oidlarger$function$
]]></string>
			<comment><![CDATA[larger of two]]></comment>
		</function>
		<function name="oidle" id="Function_15580609" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.oidle(oid, oid)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT LEAKPROOF
AS $function$oidle$function$
]]></string>
			<comment><![CDATA[implementation of <= operator]]></comment>
		</function>
		<function name="oidlt" id="Function_1601aafb" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.oidlt(oid, oid)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT LEAKPROOF
AS $function$oidlt$function$
]]></string>
			<comment><![CDATA[implementation of < operator]]></comment>
		</function>
		<function name="oidne" id="Function_275dcd18" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.oidne(oid, oid)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT LEAKPROOF
AS $function$oidne$function$
]]></string>
			<comment><![CDATA[implementation of <> operator]]></comment>
		</function>
		<function name="oidout" id="Function_196bfd42" isSystem="false" >
			<comment><![CDATA[I/O]]></comment>
		</function>
		<function name="oidrecv" id="Function_385a8305" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.oidrecv(internal)
 RETURNS oid
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$oidrecv$function$
]]></string>
			<comment><![CDATA[I/O]]></comment>
		</function>
		<function name="oidsend" id="Function_2157d52a" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.oidsend(oid)
 RETURNS bytea
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$oidsend$function$
]]></string>
			<comment><![CDATA[I/O]]></comment>
		</function>
		<function name="oidsmaller" id="Function_182cfc13" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.oidsmaller(oid, oid)
 RETURNS oid
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$oidsmaller$function$
]]></string>
			<comment><![CDATA[smaller of two]]></comment>
		</function>
		<function name="oidvectoreq" id="Function_2c9a1c33" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.oidvectoreq(oidvector, oidvector)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$oidvectoreq$function$
]]></string>
			<comment><![CDATA[implementation of = operator]]></comment>
		</function>
		<function name="oidvectorge" id="Function_3ae83a1b" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.oidvectorge(oidvector, oidvector)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$oidvectorge$function$
]]></string>
			<comment><![CDATA[implementation of >= operator]]></comment>
		</function>
		<function name="oidvectorgt" id="Function_2f9abf01" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.oidvectorgt(oidvector, oidvector)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$oidvectorgt$function$
]]></string>
			<comment><![CDATA[implementation of > operator]]></comment>
		</function>
		<function name="oidvectorin" id="Function_8e11fbe" isSystem="false" >
			<comment><![CDATA[I/O]]></comment>
		</function>
		<function name="oidvectorle" id="Function_20cb10a4" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.oidvectorle(oidvector, oidvector)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$oidvectorle$function$
]]></string>
			<comment><![CDATA[implementation of <= operator]]></comment>
		</function>
		<function name="oidvectorlt" id="Function_2d24b9f2" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.oidvectorlt(oidvector, oidvector)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$oidvectorlt$function$
]]></string>
			<comment><![CDATA[implementation of < operator]]></comment>
		</function>
		<function name="oidvectorne" id="Function_1de9b7c4" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.oidvectorne(oidvector, oidvector)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$oidvectorne$function$
]]></string>
			<comment><![CDATA[implementation of <> operator]]></comment>
		</function>
		<function name="oidvectorout" id="Function_388eb725" isSystem="false" >
			<comment><![CDATA[I/O]]></comment>
		</function>
		<function name="oidvectorrecv" id="Function_15f4e293" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.oidvectorrecv(internal)
 RETURNS oidvector
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$oidvectorrecv$function$
]]></string>
			<comment><![CDATA[I/O]]></comment>
		</function>
		<function name="oidvectorsend" id="Function_240001f5" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.oidvectorsend(oidvector)
 RETURNS bytea
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$oidvectorsend$function$
]]></string>
			<comment><![CDATA[I/O]]></comment>
		</function>
		<function name="oidvectortypes" id="Function_3afa3067" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.oidvectortypes(oidvector)
 RETURNS text
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$oidvectortypes$function$
]]></string>
			<comment><![CDATA[print type names of oidvector field]]></comment>
		</function>
		<function name="on_pb" id="Function_12a0d594" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.on_pb(point, box)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$on_pb$function$
]]></string>
			<comment><![CDATA[implementation of <@ operator]]></comment>
		</function>
		<function name="on_pl" id="Function_29eb3e3f" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.on_pl(point, line)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$on_pl$function$
]]></string>
			<comment><![CDATA[implementation of <@ operator]]></comment>
		</function>
		<function name="on_ppath" id="Function_7e91f61" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.on_ppath(point, path)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$on_ppath$function$
]]></string>
			<comment><![CDATA[implementation of <@ operator]]></comment>
		</function>
		<function name="on_ps" id="Function_2d855bf5" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.on_ps(point, lseg)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$on_ps$function$
]]></string>
			<comment><![CDATA[implementation of <@ operator]]></comment>
		</function>
		<function name="on_sb" id="Function_b5ddb46" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.on_sb(lseg, box)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$on_sb$function$
]]></string>
			<comment><![CDATA[implementation of <@ operator]]></comment>
		</function>
		<function name="on_sl" id="Function_25c1b6f4" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.on_sl(lseg, line)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$on_sl$function$
]]></string>
			<comment><![CDATA[implementation of <@ operator]]></comment>
		</function>
		<function name="opaque_in" id="Function_ae976b5" isSystem="false" >
			<comment><![CDATA[I/O]]></comment>
		</function>
		<function name="opaque_out" id="Function_f36bba" isSystem="false" >
			<comment><![CDATA[I/O]]></comment>
		</function>
		<function name="ordered_set_transition" id="Function_87c12eb" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.ordered_set_transition(internal, "any")
 RETURNS internal
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE
AS $function$ordered_set_transition$function$
]]></string>
			<comment><![CDATA[aggregate transition function]]></comment>
		</function>
		<function name="ordered_set_transition_multi" id="Function_1217e01c" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.ordered_set_transition_multi(internal, VARIADIC "any")
 RETURNS internal
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE
AS $function$ordered_set_transition_multi$function$
]]></string>
			<comment><![CDATA[aggregate transition function]]></comment>
		</function>
		<function name="overlaps" id="Function_39cca890" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog."overlaps"(time with time zone, time with time zone, time with time zone, time with time zone)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE
AS $function$overlaps_timetz$function$
CREATE OR REPLACE FUNCTION pg_catalog."overlaps"(timestamp with time zone, timestamp with time zone, timestamp with time zone, timestamp with time zone)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE
AS $function$overlaps_timestamp$function$
CREATE OR REPLACE FUNCTION pg_catalog."overlaps"(timestamp with time zone, interval, timestamp with time zone, interval)
 RETURNS boolean
 LANGUAGE sql
 STABLE PARALLEL SAFE COST 1
AS $function$select ($1, ($1 + $2)) overlaps ($3, ($3 + $4))$function$
CREATE OR REPLACE FUNCTION pg_catalog."overlaps"(timestamp with time zone, timestamp with time zone, timestamp with time zone, interval)
 RETURNS boolean
 LANGUAGE sql
 STABLE PARALLEL SAFE COST 1
AS $function$select ($1, $2) overlaps ($3, ($3 + $4))$function$
CREATE OR REPLACE FUNCTION pg_catalog."overlaps"(timestamp with time zone, interval, timestamp with time zone, timestamp with time zone)
 RETURNS boolean
 LANGUAGE sql
 STABLE PARALLEL SAFE COST 1
AS $function$select ($1, ($1 + $2)) overlaps ($3, $4)$function$
CREATE OR REPLACE FUNCTION pg_catalog."overlaps"(time without time zone, time without time zone, time without time zone, time without time zone)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE
AS $function$overlaps_time$function$
CREATE OR REPLACE FUNCTION pg_catalog."overlaps"(time without time zone, interval, time without time zone, interval)
 RETURNS boolean
 LANGUAGE sql
 IMMUTABLE PARALLEL SAFE COST 1
AS $function$select ($1, ($1 + $2)) overlaps ($3, ($3 + $4))$function$
CREATE OR REPLACE FUNCTION pg_catalog."overlaps"(time without time zone, time without time zone, time without time zone, interval)
 RETURNS boolean
 LANGUAGE sql
 IMMUTABLE PARALLEL SAFE COST 1
AS $function$select ($1, $2) overlaps ($3, ($3 + $4))$function$
CREATE OR REPLACE FUNCTION pg_catalog."overlaps"(time without time zone, interval, time without time zone, time without time zone)
 RETURNS boolean
 LANGUAGE sql
 IMMUTABLE PARALLEL SAFE COST 1
AS $function$select ($1, ($1 + $2)) overlaps ($3, $4)$function$
CREATE OR REPLACE FUNCTION pg_catalog."overlaps"(timestamp without time zone, timestamp without time zone, timestamp without time zone, timestamp without time zone)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE
AS $function$overlaps_timestamp$function$
CREATE OR REPLACE FUNCTION pg_catalog."overlaps"(timestamp without time zone, interval, timestamp without time zone, interval)
 RETURNS boolean
 LANGUAGE sql
 IMMUTABLE PARALLEL SAFE COST 1
AS $function$select ($1, ($1 + $2)) overlaps ($3, ($3 + $4))$function$
CREATE OR REPLACE FUNCTION pg_catalog."overlaps"(timestamp without time zone, timestamp without time zone, timestamp without time zone, interval)
 RETURNS boolean
 LANGUAGE sql
 IMMUTABLE PARALLEL SAFE COST 1
AS $function$select ($1, $2) overlaps ($3, ($3 + $4))$function$
CREATE OR REPLACE FUNCTION pg_catalog."overlaps"(timestamp without time zone, interval, timestamp without time zone, timestamp without time zone)
 RETURNS boolean
 LANGUAGE sql
 IMMUTABLE PARALLEL SAFE COST 1
AS $function$select ($1, ($1 + $2)) overlaps ($3, $4)$function$
]]></string>
			<comment><![CDATA[intervals overlap?]]></comment>
		</function>
		<function name="overlaps_001" id="Function_ac40ada" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog."overlaps"(time with time zone, time with time zone, time with time zone, time with time zone)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE
AS $function$overlaps_timetz$function$
CREATE OR REPLACE FUNCTION pg_catalog."overlaps"(timestamp with time zone, timestamp with time zone, timestamp with time zone, timestamp with time zone)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE
AS $function$overlaps_timestamp$function$
CREATE OR REPLACE FUNCTION pg_catalog."overlaps"(timestamp with time zone, interval, timestamp with time zone, interval)
 RETURNS boolean
 LANGUAGE sql
 STABLE PARALLEL SAFE COST 1
AS $function$select ($1, ($1 + $2)) overlaps ($3, ($3 + $4))$function$
CREATE OR REPLACE FUNCTION pg_catalog."overlaps"(timestamp with time zone, timestamp with time zone, timestamp with time zone, interval)
 RETURNS boolean
 LANGUAGE sql
 STABLE PARALLEL SAFE COST 1
AS $function$select ($1, $2) overlaps ($3, ($3 + $4))$function$
CREATE OR REPLACE FUNCTION pg_catalog."overlaps"(timestamp with time zone, interval, timestamp with time zone, timestamp with time zone)
 RETURNS boolean
 LANGUAGE sql
 STABLE PARALLEL SAFE COST 1
AS $function$select ($1, ($1 + $2)) overlaps ($3, $4)$function$
CREATE OR REPLACE FUNCTION pg_catalog."overlaps"(time without time zone, time without time zone, time without time zone, time without time zone)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE
AS $function$overlaps_time$function$
CREATE OR REPLACE FUNCTION pg_catalog."overlaps"(time without time zone, interval, time without time zone, interval)
 RETURNS boolean
 LANGUAGE sql
 IMMUTABLE PARALLEL SAFE COST 1
AS $function$select ($1, ($1 + $2)) overlaps ($3, ($3 + $4))$function$
CREATE OR REPLACE FUNCTION pg_catalog."overlaps"(time without time zone, time without time zone, time without time zone, interval)
 RETURNS boolean
 LANGUAGE sql
 IMMUTABLE PARALLEL SAFE COST 1
AS $function$select ($1, $2) overlaps ($3, ($3 + $4))$function$
CREATE OR REPLACE FUNCTION pg_catalog."overlaps"(time without time zone, interval, time without time zone, time without time zone)
 RETURNS boolean
 LANGUAGE sql
 IMMUTABLE PARALLEL SAFE COST 1
AS $function$select ($1, ($1 + $2)) overlaps ($3, $4)$function$
CREATE OR REPLACE FUNCTION pg_catalog."overlaps"(timestamp without time zone, timestamp without time zone, timestamp without time zone, timestamp without time zone)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE
AS $function$overlaps_timestamp$function$
CREATE OR REPLACE FUNCTION pg_catalog."overlaps"(timestamp without time zone, interval, timestamp without time zone, interval)
 RETURNS boolean
 LANGUAGE sql
 IMMUTABLE PARALLEL SAFE COST 1
AS $function$select ($1, ($1 + $2)) overlaps ($3, ($3 + $4))$function$
CREATE OR REPLACE FUNCTION pg_catalog."overlaps"(timestamp without time zone, timestamp without time zone, timestamp without time zone, interval)
 RETURNS boolean
 LANGUAGE sql
 IMMUTABLE PARALLEL SAFE COST 1
AS $function$select ($1, $2) overlaps ($3, ($3 + $4))$function$
CREATE OR REPLACE FUNCTION pg_catalog."overlaps"(timestamp without time zone, interval, timestamp without time zone, timestamp without time zone)
 RETURNS boolean
 LANGUAGE sql
 IMMUTABLE PARALLEL SAFE COST 1
AS $function$select ($1, ($1 + $2)) overlaps ($3, $4)$function$
]]></string>
			<comment><![CDATA[intervals overlap?]]></comment>
		</function>
		<function name="overlaps_002" id="Function_16d6bbab" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog."overlaps"(time with time zone, time with time zone, time with time zone, time with time zone)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE
AS $function$overlaps_timetz$function$
CREATE OR REPLACE FUNCTION pg_catalog."overlaps"(timestamp with time zone, timestamp with time zone, timestamp with time zone, timestamp with time zone)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE
AS $function$overlaps_timestamp$function$
CREATE OR REPLACE FUNCTION pg_catalog."overlaps"(timestamp with time zone, interval, timestamp with time zone, interval)
 RETURNS boolean
 LANGUAGE sql
 STABLE PARALLEL SAFE COST 1
AS $function$select ($1, ($1 + $2)) overlaps ($3, ($3 + $4))$function$
CREATE OR REPLACE FUNCTION pg_catalog."overlaps"(timestamp with time zone, timestamp with time zone, timestamp with time zone, interval)
 RETURNS boolean
 LANGUAGE sql
 STABLE PARALLEL SAFE COST 1
AS $function$select ($1, $2) overlaps ($3, ($3 + $4))$function$
CREATE OR REPLACE FUNCTION pg_catalog."overlaps"(timestamp with time zone, interval, timestamp with time zone, timestamp with time zone)
 RETURNS boolean
 LANGUAGE sql
 STABLE PARALLEL SAFE COST 1
AS $function$select ($1, ($1 + $2)) overlaps ($3, $4)$function$
CREATE OR REPLACE FUNCTION pg_catalog."overlaps"(time without time zone, time without time zone, time without time zone, time without time zone)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE
AS $function$overlaps_time$function$
CREATE OR REPLACE FUNCTION pg_catalog."overlaps"(time without time zone, interval, time without time zone, interval)
 RETURNS boolean
 LANGUAGE sql
 IMMUTABLE PARALLEL SAFE COST 1
AS $function$select ($1, ($1 + $2)) overlaps ($3, ($3 + $4))$function$
CREATE OR REPLACE FUNCTION pg_catalog."overlaps"(time without time zone, time without time zone, time without time zone, interval)
 RETURNS boolean
 LANGUAGE sql
 IMMUTABLE PARALLEL SAFE COST 1
AS $function$select ($1, $2) overlaps ($3, ($3 + $4))$function$
CREATE OR REPLACE FUNCTION pg_catalog."overlaps"(time without time zone, interval, time without time zone, time without time zone)
 RETURNS boolean
 LANGUAGE sql
 IMMUTABLE PARALLEL SAFE COST 1
AS $function$select ($1, ($1 + $2)) overlaps ($3, $4)$function$
CREATE OR REPLACE FUNCTION pg_catalog."overlaps"(timestamp without time zone, timestamp without time zone, timestamp without time zone, timestamp without time zone)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE
AS $function$overlaps_timestamp$function$
CREATE OR REPLACE FUNCTION pg_catalog."overlaps"(timestamp without time zone, interval, timestamp without time zone, interval)
 RETURNS boolean
 LANGUAGE sql
 IMMUTABLE PARALLEL SAFE COST 1
AS $function$select ($1, ($1 + $2)) overlaps ($3, ($3 + $4))$function$
CREATE OR REPLACE FUNCTION pg_catalog."overlaps"(timestamp without time zone, timestamp without time zone, timestamp without time zone, interval)
 RETURNS boolean
 LANGUAGE sql
 IMMUTABLE PARALLEL SAFE COST 1
AS $function$select ($1, $2) overlaps ($3, ($3 + $4))$function$
CREATE OR REPLACE FUNCTION pg_catalog."overlaps"(timestamp without time zone, interval, timestamp without time zone, timestamp without time zone)
 RETURNS boolean
 LANGUAGE sql
 IMMUTABLE PARALLEL SAFE COST 1
AS $function$select ($1, ($1 + $2)) overlaps ($3, $4)$function$
]]></string>
			<comment><![CDATA[intervals overlap?]]></comment>
		</function>
		<function name="overlaps_003" id="Function_2f8f54b8" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog."overlaps"(time with time zone, time with time zone, time with time zone, time with time zone)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE
AS $function$overlaps_timetz$function$
CREATE OR REPLACE FUNCTION pg_catalog."overlaps"(timestamp with time zone, timestamp with time zone, timestamp with time zone, timestamp with time zone)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE
AS $function$overlaps_timestamp$function$
CREATE OR REPLACE FUNCTION pg_catalog."overlaps"(timestamp with time zone, interval, timestamp with time zone, interval)
 RETURNS boolean
 LANGUAGE sql
 STABLE PARALLEL SAFE COST 1
AS $function$select ($1, ($1 + $2)) overlaps ($3, ($3 + $4))$function$
CREATE OR REPLACE FUNCTION pg_catalog."overlaps"(timestamp with time zone, timestamp with time zone, timestamp with time zone, interval)
 RETURNS boolean
 LANGUAGE sql
 STABLE PARALLEL SAFE COST 1
AS $function$select ($1, $2) overlaps ($3, ($3 + $4))$function$
CREATE OR REPLACE FUNCTION pg_catalog."overlaps"(timestamp with time zone, interval, timestamp with time zone, timestamp with time zone)
 RETURNS boolean
 LANGUAGE sql
 STABLE PARALLEL SAFE COST 1
AS $function$select ($1, ($1 + $2)) overlaps ($3, $4)$function$
CREATE OR REPLACE FUNCTION pg_catalog."overlaps"(time without time zone, time without time zone, time without time zone, time without time zone)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE
AS $function$overlaps_time$function$
CREATE OR REPLACE FUNCTION pg_catalog."overlaps"(time without time zone, interval, time without time zone, interval)
 RETURNS boolean
 LANGUAGE sql
 IMMUTABLE PARALLEL SAFE COST 1
AS $function$select ($1, ($1 + $2)) overlaps ($3, ($3 + $4))$function$
CREATE OR REPLACE FUNCTION pg_catalog."overlaps"(time without time zone, time without time zone, time without time zone, interval)
 RETURNS boolean
 LANGUAGE sql
 IMMUTABLE PARALLEL SAFE COST 1
AS $function$select ($1, $2) overlaps ($3, ($3 + $4))$function$
CREATE OR REPLACE FUNCTION pg_catalog."overlaps"(time without time zone, interval, time without time zone, time without time zone)
 RETURNS boolean
 LANGUAGE sql
 IMMUTABLE PARALLEL SAFE COST 1
AS $function$select ($1, ($1 + $2)) overlaps ($3, $4)$function$
CREATE OR REPLACE FUNCTION pg_catalog."overlaps"(timestamp without time zone, timestamp without time zone, timestamp without time zone, timestamp without time zone)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE
AS $function$overlaps_timestamp$function$
CREATE OR REPLACE FUNCTION pg_catalog."overlaps"(timestamp without time zone, interval, timestamp without time zone, interval)
 RETURNS boolean
 LANGUAGE sql
 IMMUTABLE PARALLEL SAFE COST 1
AS $function$select ($1, ($1 + $2)) overlaps ($3, ($3 + $4))$function$
CREATE OR REPLACE FUNCTION pg_catalog."overlaps"(timestamp without time zone, timestamp without time zone, timestamp without time zone, interval)
 RETURNS boolean
 LANGUAGE sql
 IMMUTABLE PARALLEL SAFE COST 1
AS $function$select ($1, $2) overlaps ($3, ($3 + $4))$function$
CREATE OR REPLACE FUNCTION pg_catalog."overlaps"(timestamp without time zone, interval, timestamp without time zone, timestamp without time zone)
 RETURNS boolean
 LANGUAGE sql
 IMMUTABLE PARALLEL SAFE COST 1
AS $function$select ($1, ($1 + $2)) overlaps ($3, $4)$function$
]]></string>
			<comment><![CDATA[intervals overlap?]]></comment>
		</function>
		<function name="overlaps_004" id="Function_8fd51af" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog."overlaps"(time with time zone, time with time zone, time with time zone, time with time zone)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE
AS $function$overlaps_timetz$function$
CREATE OR REPLACE FUNCTION pg_catalog."overlaps"(timestamp with time zone, timestamp with time zone, timestamp with time zone, timestamp with time zone)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE
AS $function$overlaps_timestamp$function$
CREATE OR REPLACE FUNCTION pg_catalog."overlaps"(timestamp with time zone, interval, timestamp with time zone, interval)
 RETURNS boolean
 LANGUAGE sql
 STABLE PARALLEL SAFE COST 1
AS $function$select ($1, ($1 + $2)) overlaps ($3, ($3 + $4))$function$
CREATE OR REPLACE FUNCTION pg_catalog."overlaps"(timestamp with time zone, timestamp with time zone, timestamp with time zone, interval)
 RETURNS boolean
 LANGUAGE sql
 STABLE PARALLEL SAFE COST 1
AS $function$select ($1, $2) overlaps ($3, ($3 + $4))$function$
CREATE OR REPLACE FUNCTION pg_catalog."overlaps"(timestamp with time zone, interval, timestamp with time zone, timestamp with time zone)
 RETURNS boolean
 LANGUAGE sql
 STABLE PARALLEL SAFE COST 1
AS $function$select ($1, ($1 + $2)) overlaps ($3, $4)$function$
CREATE OR REPLACE FUNCTION pg_catalog."overlaps"(time without time zone, time without time zone, time without time zone, time without time zone)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE
AS $function$overlaps_time$function$
CREATE OR REPLACE FUNCTION pg_catalog."overlaps"(time without time zone, interval, time without time zone, interval)
 RETURNS boolean
 LANGUAGE sql
 IMMUTABLE PARALLEL SAFE COST 1
AS $function$select ($1, ($1 + $2)) overlaps ($3, ($3 + $4))$function$
CREATE OR REPLACE FUNCTION pg_catalog."overlaps"(time without time zone, time without time zone, time without time zone, interval)
 RETURNS boolean
 LANGUAGE sql
 IMMUTABLE PARALLEL SAFE COST 1
AS $function$select ($1, $2) overlaps ($3, ($3 + $4))$function$
CREATE OR REPLACE FUNCTION pg_catalog."overlaps"(time without time zone, interval, time without time zone, time without time zone)
 RETURNS boolean
 LANGUAGE sql
 IMMUTABLE PARALLEL SAFE COST 1
AS $function$select ($1, ($1 + $2)) overlaps ($3, $4)$function$
CREATE OR REPLACE FUNCTION pg_catalog."overlaps"(timestamp without time zone, timestamp without time zone, timestamp without time zone, timestamp without time zone)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE
AS $function$overlaps_timestamp$function$
CREATE OR REPLACE FUNCTION pg_catalog."overlaps"(timestamp without time zone, interval, timestamp without time zone, interval)
 RETURNS boolean
 LANGUAGE sql
 IMMUTABLE PARALLEL SAFE COST 1
AS $function$select ($1, ($1 + $2)) overlaps ($3, ($3 + $4))$function$
CREATE OR REPLACE FUNCTION pg_catalog."overlaps"(timestamp without time zone, timestamp without time zone, timestamp without time zone, interval)
 RETURNS boolean
 LANGUAGE sql
 IMMUTABLE PARALLEL SAFE COST 1
AS $function$select ($1, $2) overlaps ($3, ($3 + $4))$function$
CREATE OR REPLACE FUNCTION pg_catalog."overlaps"(timestamp without time zone, interval, timestamp without time zone, timestamp without time zone)
 RETURNS boolean
 LANGUAGE sql
 IMMUTABLE PARALLEL SAFE COST 1
AS $function$select ($1, ($1 + $2)) overlaps ($3, $4)$function$
]]></string>
			<comment><![CDATA[intervals overlap?]]></comment>
		</function>
		<function name="overlaps_005" id="Function_32b7926c" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog."overlaps"(time with time zone, time with time zone, time with time zone, time with time zone)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE
AS $function$overlaps_timetz$function$
CREATE OR REPLACE FUNCTION pg_catalog."overlaps"(timestamp with time zone, timestamp with time zone, timestamp with time zone, timestamp with time zone)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE
AS $function$overlaps_timestamp$function$
CREATE OR REPLACE FUNCTION pg_catalog."overlaps"(timestamp with time zone, interval, timestamp with time zone, interval)
 RETURNS boolean
 LANGUAGE sql
 STABLE PARALLEL SAFE COST 1
AS $function$select ($1, ($1 + $2)) overlaps ($3, ($3 + $4))$function$
CREATE OR REPLACE FUNCTION pg_catalog."overlaps"(timestamp with time zone, timestamp with time zone, timestamp with time zone, interval)
 RETURNS boolean
 LANGUAGE sql
 STABLE PARALLEL SAFE COST 1
AS $function$select ($1, $2) overlaps ($3, ($3 + $4))$function$
CREATE OR REPLACE FUNCTION pg_catalog."overlaps"(timestamp with time zone, interval, timestamp with time zone, timestamp with time zone)
 RETURNS boolean
 LANGUAGE sql
 STABLE PARALLEL SAFE COST 1
AS $function$select ($1, ($1 + $2)) overlaps ($3, $4)$function$
CREATE OR REPLACE FUNCTION pg_catalog."overlaps"(time without time zone, time without time zone, time without time zone, time without time zone)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE
AS $function$overlaps_time$function$
CREATE OR REPLACE FUNCTION pg_catalog."overlaps"(time without time zone, interval, time without time zone, interval)
 RETURNS boolean
 LANGUAGE sql
 IMMUTABLE PARALLEL SAFE COST 1
AS $function$select ($1, ($1 + $2)) overlaps ($3, ($3 + $4))$function$
CREATE OR REPLACE FUNCTION pg_catalog."overlaps"(time without time zone, time without time zone, time without time zone, interval)
 RETURNS boolean
 LANGUAGE sql
 IMMUTABLE PARALLEL SAFE COST 1
AS $function$select ($1, $2) overlaps ($3, ($3 + $4))$function$
CREATE OR REPLACE FUNCTION pg_catalog."overlaps"(time without time zone, interval, time without time zone, time without time zone)
 RETURNS boolean
 LANGUAGE sql
 IMMUTABLE PARALLEL SAFE COST 1
AS $function$select ($1, ($1 + $2)) overlaps ($3, $4)$function$
CREATE OR REPLACE FUNCTION pg_catalog."overlaps"(timestamp without time zone, timestamp without time zone, timestamp without time zone, timestamp without time zone)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE
AS $function$overlaps_timestamp$function$
CREATE OR REPLACE FUNCTION pg_catalog."overlaps"(timestamp without time zone, interval, timestamp without time zone, interval)
 RETURNS boolean
 LANGUAGE sql
 IMMUTABLE PARALLEL SAFE COST 1
AS $function$select ($1, ($1 + $2)) overlaps ($3, ($3 + $4))$function$
CREATE OR REPLACE FUNCTION pg_catalog."overlaps"(timestamp without time zone, timestamp without time zone, timestamp without time zone, interval)
 RETURNS boolean
 LANGUAGE sql
 IMMUTABLE PARALLEL SAFE COST 1
AS $function$select ($1, $2) overlaps ($3, ($3 + $4))$function$
CREATE OR REPLACE FUNCTION pg_catalog."overlaps"(timestamp without time zone, interval, timestamp without time zone, timestamp without time zone)
 RETURNS boolean
 LANGUAGE sql
 IMMUTABLE PARALLEL SAFE COST 1
AS $function$select ($1, ($1 + $2)) overlaps ($3, $4)$function$
]]></string>
			<comment><![CDATA[intervals overlap?]]></comment>
		</function>
		<function name="overlaps_006" id="Function_f02bcdd" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog."overlaps"(time with time zone, time with time zone, time with time zone, time with time zone)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE
AS $function$overlaps_timetz$function$
CREATE OR REPLACE FUNCTION pg_catalog."overlaps"(timestamp with time zone, timestamp with time zone, timestamp with time zone, timestamp with time zone)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE
AS $function$overlaps_timestamp$function$
CREATE OR REPLACE FUNCTION pg_catalog."overlaps"(timestamp with time zone, interval, timestamp with time zone, interval)
 RETURNS boolean
 LANGUAGE sql
 STABLE PARALLEL SAFE COST 1
AS $function$select ($1, ($1 + $2)) overlaps ($3, ($3 + $4))$function$
CREATE OR REPLACE FUNCTION pg_catalog."overlaps"(timestamp with time zone, timestamp with time zone, timestamp with time zone, interval)
 RETURNS boolean
 LANGUAGE sql
 STABLE PARALLEL SAFE COST 1
AS $function$select ($1, $2) overlaps ($3, ($3 + $4))$function$
CREATE OR REPLACE FUNCTION pg_catalog."overlaps"(timestamp with time zone, interval, timestamp with time zone, timestamp with time zone)
 RETURNS boolean
 LANGUAGE sql
 STABLE PARALLEL SAFE COST 1
AS $function$select ($1, ($1 + $2)) overlaps ($3, $4)$function$
CREATE OR REPLACE FUNCTION pg_catalog."overlaps"(time without time zone, time without time zone, time without time zone, time without time zone)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE
AS $function$overlaps_time$function$
CREATE OR REPLACE FUNCTION pg_catalog."overlaps"(time without time zone, interval, time without time zone, interval)
 RETURNS boolean
 LANGUAGE sql
 IMMUTABLE PARALLEL SAFE COST 1
AS $function$select ($1, ($1 + $2)) overlaps ($3, ($3 + $4))$function$
CREATE OR REPLACE FUNCTION pg_catalog."overlaps"(time without time zone, time without time zone, time without time zone, interval)
 RETURNS boolean
 LANGUAGE sql
 IMMUTABLE PARALLEL SAFE COST 1
AS $function$select ($1, $2) overlaps ($3, ($3 + $4))$function$
CREATE OR REPLACE FUNCTION pg_catalog."overlaps"(time without time zone, interval, time without time zone, time without time zone)
 RETURNS boolean
 LANGUAGE sql
 IMMUTABLE PARALLEL SAFE COST 1
AS $function$select ($1, ($1 + $2)) overlaps ($3, $4)$function$
CREATE OR REPLACE FUNCTION pg_catalog."overlaps"(timestamp without time zone, timestamp without time zone, timestamp without time zone, timestamp without time zone)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE
AS $function$overlaps_timestamp$function$
CREATE OR REPLACE FUNCTION pg_catalog."overlaps"(timestamp without time zone, interval, timestamp without time zone, interval)
 RETURNS boolean
 LANGUAGE sql
 IMMUTABLE PARALLEL SAFE COST 1
AS $function$select ($1, ($1 + $2)) overlaps ($3, ($3 + $4))$function$
CREATE OR REPLACE FUNCTION pg_catalog."overlaps"(timestamp without time zone, timestamp without time zone, timestamp without time zone, interval)
 RETURNS boolean
 LANGUAGE sql
 IMMUTABLE PARALLEL SAFE COST 1
AS $function$select ($1, $2) overlaps ($3, ($3 + $4))$function$
CREATE OR REPLACE FUNCTION pg_catalog."overlaps"(timestamp without time zone, interval, timestamp without time zone, timestamp without time zone)
 RETURNS boolean
 LANGUAGE sql
 IMMUTABLE PARALLEL SAFE COST 1
AS $function$select ($1, ($1 + $2)) overlaps ($3, $4)$function$
]]></string>
			<comment><![CDATA[intervals overlap?]]></comment>
		</function>
		<function name="overlaps_007" id="Function_336ce9b4" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog."overlaps"(time with time zone, time with time zone, time with time zone, time with time zone)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE
AS $function$overlaps_timetz$function$
CREATE OR REPLACE FUNCTION pg_catalog."overlaps"(timestamp with time zone, timestamp with time zone, timestamp with time zone, timestamp with time zone)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE
AS $function$overlaps_timestamp$function$
CREATE OR REPLACE FUNCTION pg_catalog."overlaps"(timestamp with time zone, interval, timestamp with time zone, interval)
 RETURNS boolean
 LANGUAGE sql
 STABLE PARALLEL SAFE COST 1
AS $function$select ($1, ($1 + $2)) overlaps ($3, ($3 + $4))$function$
CREATE OR REPLACE FUNCTION pg_catalog."overlaps"(timestamp with time zone, timestamp with time zone, timestamp with time zone, interval)
 RETURNS boolean
 LANGUAGE sql
 STABLE PARALLEL SAFE COST 1
AS $function$select ($1, $2) overlaps ($3, ($3 + $4))$function$
CREATE OR REPLACE FUNCTION pg_catalog."overlaps"(timestamp with time zone, interval, timestamp with time zone, timestamp with time zone)
 RETURNS boolean
 LANGUAGE sql
 STABLE PARALLEL SAFE COST 1
AS $function$select ($1, ($1 + $2)) overlaps ($3, $4)$function$
CREATE OR REPLACE FUNCTION pg_catalog."overlaps"(time without time zone, time without time zone, time without time zone, time without time zone)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE
AS $function$overlaps_time$function$
CREATE OR REPLACE FUNCTION pg_catalog."overlaps"(time without time zone, interval, time without time zone, interval)
 RETURNS boolean
 LANGUAGE sql
 IMMUTABLE PARALLEL SAFE COST 1
AS $function$select ($1, ($1 + $2)) overlaps ($3, ($3 + $4))$function$
CREATE OR REPLACE FUNCTION pg_catalog."overlaps"(time without time zone, time without time zone, time without time zone, interval)
 RETURNS boolean
 LANGUAGE sql
 IMMUTABLE PARALLEL SAFE COST 1
AS $function$select ($1, $2) overlaps ($3, ($3 + $4))$function$
CREATE OR REPLACE FUNCTION pg_catalog."overlaps"(time without time zone, interval, time without time zone, time without time zone)
 RETURNS boolean
 LANGUAGE sql
 IMMUTABLE PARALLEL SAFE COST 1
AS $function$select ($1, ($1 + $2)) overlaps ($3, $4)$function$
CREATE OR REPLACE FUNCTION pg_catalog."overlaps"(timestamp without time zone, timestamp without time zone, timestamp without time zone, timestamp without time zone)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE
AS $function$overlaps_timestamp$function$
CREATE OR REPLACE FUNCTION pg_catalog."overlaps"(timestamp without time zone, interval, timestamp without time zone, interval)
 RETURNS boolean
 LANGUAGE sql
 IMMUTABLE PARALLEL SAFE COST 1
AS $function$select ($1, ($1 + $2)) overlaps ($3, ($3 + $4))$function$
CREATE OR REPLACE FUNCTION pg_catalog."overlaps"(timestamp without time zone, timestamp without time zone, timestamp without time zone, interval)
 RETURNS boolean
 LANGUAGE sql
 IMMUTABLE PARALLEL SAFE COST 1
AS $function$select ($1, $2) overlaps ($3, ($3 + $4))$function$
CREATE OR REPLACE FUNCTION pg_catalog."overlaps"(timestamp without time zone, interval, timestamp without time zone, timestamp without time zone)
 RETURNS boolean
 LANGUAGE sql
 IMMUTABLE PARALLEL SAFE COST 1
AS $function$select ($1, ($1 + $2)) overlaps ($3, $4)$function$
]]></string>
			<comment><![CDATA[intervals overlap?]]></comment>
		</function>
		<function name="overlaps_008" id="Function_1b83ce9f" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog."overlaps"(time with time zone, time with time zone, time with time zone, time with time zone)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE
AS $function$overlaps_timetz$function$
CREATE OR REPLACE FUNCTION pg_catalog."overlaps"(timestamp with time zone, timestamp with time zone, timestamp with time zone, timestamp with time zone)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE
AS $function$overlaps_timestamp$function$
CREATE OR REPLACE FUNCTION pg_catalog."overlaps"(timestamp with time zone, interval, timestamp with time zone, interval)
 RETURNS boolean
 LANGUAGE sql
 STABLE PARALLEL SAFE COST 1
AS $function$select ($1, ($1 + $2)) overlaps ($3, ($3 + $4))$function$
CREATE OR REPLACE FUNCTION pg_catalog."overlaps"(timestamp with time zone, timestamp with time zone, timestamp with time zone, interval)
 RETURNS boolean
 LANGUAGE sql
 STABLE PARALLEL SAFE COST 1
AS $function$select ($1, $2) overlaps ($3, ($3 + $4))$function$
CREATE OR REPLACE FUNCTION pg_catalog."overlaps"(timestamp with time zone, interval, timestamp with time zone, timestamp with time zone)
 RETURNS boolean
 LANGUAGE sql
 STABLE PARALLEL SAFE COST 1
AS $function$select ($1, ($1 + $2)) overlaps ($3, $4)$function$
CREATE OR REPLACE FUNCTION pg_catalog."overlaps"(time without time zone, time without time zone, time without time zone, time without time zone)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE
AS $function$overlaps_time$function$
CREATE OR REPLACE FUNCTION pg_catalog."overlaps"(time without time zone, interval, time without time zone, interval)
 RETURNS boolean
 LANGUAGE sql
 IMMUTABLE PARALLEL SAFE COST 1
AS $function$select ($1, ($1 + $2)) overlaps ($3, ($3 + $4))$function$
CREATE OR REPLACE FUNCTION pg_catalog."overlaps"(time without time zone, time without time zone, time without time zone, interval)
 RETURNS boolean
 LANGUAGE sql
 IMMUTABLE PARALLEL SAFE COST 1
AS $function$select ($1, $2) overlaps ($3, ($3 + $4))$function$
CREATE OR REPLACE FUNCTION pg_catalog."overlaps"(time without time zone, interval, time without time zone, time without time zone)
 RETURNS boolean
 LANGUAGE sql
 IMMUTABLE PARALLEL SAFE COST 1
AS $function$select ($1, ($1 + $2)) overlaps ($3, $4)$function$
CREATE OR REPLACE FUNCTION pg_catalog."overlaps"(timestamp without time zone, timestamp without time zone, timestamp without time zone, timestamp without time zone)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE
AS $function$overlaps_timestamp$function$
CREATE OR REPLACE FUNCTION pg_catalog."overlaps"(timestamp without time zone, interval, timestamp without time zone, interval)
 RETURNS boolean
 LANGUAGE sql
 IMMUTABLE PARALLEL SAFE COST 1
AS $function$select ($1, ($1 + $2)) overlaps ($3, ($3 + $4))$function$
CREATE OR REPLACE FUNCTION pg_catalog."overlaps"(timestamp without time zone, timestamp without time zone, timestamp without time zone, interval)
 RETURNS boolean
 LANGUAGE sql
 IMMUTABLE PARALLEL SAFE COST 1
AS $function$select ($1, $2) overlaps ($3, ($3 + $4))$function$
CREATE OR REPLACE FUNCTION pg_catalog."overlaps"(timestamp without time zone, interval, timestamp without time zone, timestamp without time zone)
 RETURNS boolean
 LANGUAGE sql
 IMMUTABLE PARALLEL SAFE COST 1
AS $function$select ($1, ($1 + $2)) overlaps ($3, $4)$function$
]]></string>
			<comment><![CDATA[intervals overlap?]]></comment>
		</function>
		<function name="overlaps_009" id="Function_2d3fe0c5" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog."overlaps"(time with time zone, time with time zone, time with time zone, time with time zone)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE
AS $function$overlaps_timetz$function$
CREATE OR REPLACE FUNCTION pg_catalog."overlaps"(timestamp with time zone, timestamp with time zone, timestamp with time zone, timestamp with time zone)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE
AS $function$overlaps_timestamp$function$
CREATE OR REPLACE FUNCTION pg_catalog."overlaps"(timestamp with time zone, interval, timestamp with time zone, interval)
 RETURNS boolean
 LANGUAGE sql
 STABLE PARALLEL SAFE COST 1
AS $function$select ($1, ($1 + $2)) overlaps ($3, ($3 + $4))$function$
CREATE OR REPLACE FUNCTION pg_catalog."overlaps"(timestamp with time zone, timestamp with time zone, timestamp with time zone, interval)
 RETURNS boolean
 LANGUAGE sql
 STABLE PARALLEL SAFE COST 1
AS $function$select ($1, $2) overlaps ($3, ($3 + $4))$function$
CREATE OR REPLACE FUNCTION pg_catalog."overlaps"(timestamp with time zone, interval, timestamp with time zone, timestamp with time zone)
 RETURNS boolean
 LANGUAGE sql
 STABLE PARALLEL SAFE COST 1
AS $function$select ($1, ($1 + $2)) overlaps ($3, $4)$function$
CREATE OR REPLACE FUNCTION pg_catalog."overlaps"(time without time zone, time without time zone, time without time zone, time without time zone)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE
AS $function$overlaps_time$function$
CREATE OR REPLACE FUNCTION pg_catalog."overlaps"(time without time zone, interval, time without time zone, interval)
 RETURNS boolean
 LANGUAGE sql
 IMMUTABLE PARALLEL SAFE COST 1
AS $function$select ($1, ($1 + $2)) overlaps ($3, ($3 + $4))$function$
CREATE OR REPLACE FUNCTION pg_catalog."overlaps"(time without time zone, time without time zone, time without time zone, interval)
 RETURNS boolean
 LANGUAGE sql
 IMMUTABLE PARALLEL SAFE COST 1
AS $function$select ($1, $2) overlaps ($3, ($3 + $4))$function$
CREATE OR REPLACE FUNCTION pg_catalog."overlaps"(time without time zone, interval, time without time zone, time without time zone)
 RETURNS boolean
 LANGUAGE sql
 IMMUTABLE PARALLEL SAFE COST 1
AS $function$select ($1, ($1 + $2)) overlaps ($3, $4)$function$
CREATE OR REPLACE FUNCTION pg_catalog."overlaps"(timestamp without time zone, timestamp without time zone, timestamp without time zone, timestamp without time zone)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE
AS $function$overlaps_timestamp$function$
CREATE OR REPLACE FUNCTION pg_catalog."overlaps"(timestamp without time zone, interval, timestamp without time zone, interval)
 RETURNS boolean
 LANGUAGE sql
 IMMUTABLE PARALLEL SAFE COST 1
AS $function$select ($1, ($1 + $2)) overlaps ($3, ($3 + $4))$function$
CREATE OR REPLACE FUNCTION pg_catalog."overlaps"(timestamp without time zone, timestamp without time zone, timestamp without time zone, interval)
 RETURNS boolean
 LANGUAGE sql
 IMMUTABLE PARALLEL SAFE COST 1
AS $function$select ($1, $2) overlaps ($3, ($3 + $4))$function$
CREATE OR REPLACE FUNCTION pg_catalog."overlaps"(timestamp without time zone, interval, timestamp without time zone, timestamp without time zone)
 RETURNS boolean
 LANGUAGE sql
 IMMUTABLE PARALLEL SAFE COST 1
AS $function$select ($1, ($1 + $2)) overlaps ($3, $4)$function$
]]></string>
			<comment><![CDATA[intervals overlap?]]></comment>
		</function>
		<function name="overlaps_010" id="Function_228907c3" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog."overlaps"(time with time zone, time with time zone, time with time zone, time with time zone)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE
AS $function$overlaps_timetz$function$
CREATE OR REPLACE FUNCTION pg_catalog."overlaps"(timestamp with time zone, timestamp with time zone, timestamp with time zone, timestamp with time zone)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE
AS $function$overlaps_timestamp$function$
CREATE OR REPLACE FUNCTION pg_catalog."overlaps"(timestamp with time zone, interval, timestamp with time zone, interval)
 RETURNS boolean
 LANGUAGE sql
 STABLE PARALLEL SAFE COST 1
AS $function$select ($1, ($1 + $2)) overlaps ($3, ($3 + $4))$function$
CREATE OR REPLACE FUNCTION pg_catalog."overlaps"(timestamp with time zone, timestamp with time zone, timestamp with time zone, interval)
 RETURNS boolean
 LANGUAGE sql
 STABLE PARALLEL SAFE COST 1
AS $function$select ($1, $2) overlaps ($3, ($3 + $4))$function$
CREATE OR REPLACE FUNCTION pg_catalog."overlaps"(timestamp with time zone, interval, timestamp with time zone, timestamp with time zone)
 RETURNS boolean
 LANGUAGE sql
 STABLE PARALLEL SAFE COST 1
AS $function$select ($1, ($1 + $2)) overlaps ($3, $4)$function$
CREATE OR REPLACE FUNCTION pg_catalog."overlaps"(time without time zone, time without time zone, time without time zone, time without time zone)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE
AS $function$overlaps_time$function$
CREATE OR REPLACE FUNCTION pg_catalog."overlaps"(time without time zone, interval, time without time zone, interval)
 RETURNS boolean
 LANGUAGE sql
 IMMUTABLE PARALLEL SAFE COST 1
AS $function$select ($1, ($1 + $2)) overlaps ($3, ($3 + $4))$function$
CREATE OR REPLACE FUNCTION pg_catalog."overlaps"(time without time zone, time without time zone, time without time zone, interval)
 RETURNS boolean
 LANGUAGE sql
 IMMUTABLE PARALLEL SAFE COST 1
AS $function$select ($1, $2) overlaps ($3, ($3 + $4))$function$
CREATE OR REPLACE FUNCTION pg_catalog."overlaps"(time without time zone, interval, time without time zone, time without time zone)
 RETURNS boolean
 LANGUAGE sql
 IMMUTABLE PARALLEL SAFE COST 1
AS $function$select ($1, ($1 + $2)) overlaps ($3, $4)$function$
CREATE OR REPLACE FUNCTION pg_catalog."overlaps"(timestamp without time zone, timestamp without time zone, timestamp without time zone, timestamp without time zone)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE
AS $function$overlaps_timestamp$function$
CREATE OR REPLACE FUNCTION pg_catalog."overlaps"(timestamp without time zone, interval, timestamp without time zone, interval)
 RETURNS boolean
 LANGUAGE sql
 IMMUTABLE PARALLEL SAFE COST 1
AS $function$select ($1, ($1 + $2)) overlaps ($3, ($3 + $4))$function$
CREATE OR REPLACE FUNCTION pg_catalog."overlaps"(timestamp without time zone, timestamp without time zone, timestamp without time zone, interval)
 RETURNS boolean
 LANGUAGE sql
 IMMUTABLE PARALLEL SAFE COST 1
AS $function$select ($1, $2) overlaps ($3, ($3 + $4))$function$
CREATE OR REPLACE FUNCTION pg_catalog."overlaps"(timestamp without time zone, interval, timestamp without time zone, timestamp without time zone)
 RETURNS boolean
 LANGUAGE sql
 IMMUTABLE PARALLEL SAFE COST 1
AS $function$select ($1, ($1 + $2)) overlaps ($3, $4)$function$
]]></string>
			<comment><![CDATA[intervals overlap?]]></comment>
		</function>
		<function name="overlaps_011" id="Function_2a862b09" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog."overlaps"(time with time zone, time with time zone, time with time zone, time with time zone)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE
AS $function$overlaps_timetz$function$
CREATE OR REPLACE FUNCTION pg_catalog."overlaps"(timestamp with time zone, timestamp with time zone, timestamp with time zone, timestamp with time zone)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE
AS $function$overlaps_timestamp$function$
CREATE OR REPLACE FUNCTION pg_catalog."overlaps"(timestamp with time zone, interval, timestamp with time zone, interval)
 RETURNS boolean
 LANGUAGE sql
 STABLE PARALLEL SAFE COST 1
AS $function$select ($1, ($1 + $2)) overlaps ($3, ($3 + $4))$function$
CREATE OR REPLACE FUNCTION pg_catalog."overlaps"(timestamp with time zone, timestamp with time zone, timestamp with time zone, interval)
 RETURNS boolean
 LANGUAGE sql
 STABLE PARALLEL SAFE COST 1
AS $function$select ($1, $2) overlaps ($3, ($3 + $4))$function$
CREATE OR REPLACE FUNCTION pg_catalog."overlaps"(timestamp with time zone, interval, timestamp with time zone, timestamp with time zone)
 RETURNS boolean
 LANGUAGE sql
 STABLE PARALLEL SAFE COST 1
AS $function$select ($1, ($1 + $2)) overlaps ($3, $4)$function$
CREATE OR REPLACE FUNCTION pg_catalog."overlaps"(time without time zone, time without time zone, time without time zone, time without time zone)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE
AS $function$overlaps_time$function$
CREATE OR REPLACE FUNCTION pg_catalog."overlaps"(time without time zone, interval, time without time zone, interval)
 RETURNS boolean
 LANGUAGE sql
 IMMUTABLE PARALLEL SAFE COST 1
AS $function$select ($1, ($1 + $2)) overlaps ($3, ($3 + $4))$function$
CREATE OR REPLACE FUNCTION pg_catalog."overlaps"(time without time zone, time without time zone, time without time zone, interval)
 RETURNS boolean
 LANGUAGE sql
 IMMUTABLE PARALLEL SAFE COST 1
AS $function$select ($1, $2) overlaps ($3, ($3 + $4))$function$
CREATE OR REPLACE FUNCTION pg_catalog."overlaps"(time without time zone, interval, time without time zone, time without time zone)
 RETURNS boolean
 LANGUAGE sql
 IMMUTABLE PARALLEL SAFE COST 1
AS $function$select ($1, ($1 + $2)) overlaps ($3, $4)$function$
CREATE OR REPLACE FUNCTION pg_catalog."overlaps"(timestamp without time zone, timestamp without time zone, timestamp without time zone, timestamp without time zone)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE
AS $function$overlaps_timestamp$function$
CREATE OR REPLACE FUNCTION pg_catalog."overlaps"(timestamp without time zone, interval, timestamp without time zone, interval)
 RETURNS boolean
 LANGUAGE sql
 IMMUTABLE PARALLEL SAFE COST 1
AS $function$select ($1, ($1 + $2)) overlaps ($3, ($3 + $4))$function$
CREATE OR REPLACE FUNCTION pg_catalog."overlaps"(timestamp without time zone, timestamp without time zone, timestamp without time zone, interval)
 RETURNS boolean
 LANGUAGE sql
 IMMUTABLE PARALLEL SAFE COST 1
AS $function$select ($1, $2) overlaps ($3, ($3 + $4))$function$
CREATE OR REPLACE FUNCTION pg_catalog."overlaps"(timestamp without time zone, interval, timestamp without time zone, timestamp without time zone)
 RETURNS boolean
 LANGUAGE sql
 IMMUTABLE PARALLEL SAFE COST 1
AS $function$select ($1, ($1 + $2)) overlaps ($3, $4)$function$
]]></string>
			<comment><![CDATA[intervals overlap?]]></comment>
		</function>
		<function name="overlaps_012" id="Function_181ef0ed" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog."overlaps"(time with time zone, time with time zone, time with time zone, time with time zone)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE
AS $function$overlaps_timetz$function$
CREATE OR REPLACE FUNCTION pg_catalog."overlaps"(timestamp with time zone, timestamp with time zone, timestamp with time zone, timestamp with time zone)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE
AS $function$overlaps_timestamp$function$
CREATE OR REPLACE FUNCTION pg_catalog."overlaps"(timestamp with time zone, interval, timestamp with time zone, interval)
 RETURNS boolean
 LANGUAGE sql
 STABLE PARALLEL SAFE COST 1
AS $function$select ($1, ($1 + $2)) overlaps ($3, ($3 + $4))$function$
CREATE OR REPLACE FUNCTION pg_catalog."overlaps"(timestamp with time zone, timestamp with time zone, timestamp with time zone, interval)
 RETURNS boolean
 LANGUAGE sql
 STABLE PARALLEL SAFE COST 1
AS $function$select ($1, $2) overlaps ($3, ($3 + $4))$function$
CREATE OR REPLACE FUNCTION pg_catalog."overlaps"(timestamp with time zone, interval, timestamp with time zone, timestamp with time zone)
 RETURNS boolean
 LANGUAGE sql
 STABLE PARALLEL SAFE COST 1
AS $function$select ($1, ($1 + $2)) overlaps ($3, $4)$function$
CREATE OR REPLACE FUNCTION pg_catalog."overlaps"(time without time zone, time without time zone, time without time zone, time without time zone)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE
AS $function$overlaps_time$function$
CREATE OR REPLACE FUNCTION pg_catalog."overlaps"(time without time zone, interval, time without time zone, interval)
 RETURNS boolean
 LANGUAGE sql
 IMMUTABLE PARALLEL SAFE COST 1
AS $function$select ($1, ($1 + $2)) overlaps ($3, ($3 + $4))$function$
CREATE OR REPLACE FUNCTION pg_catalog."overlaps"(time without time zone, time without time zone, time without time zone, interval)
 RETURNS boolean
 LANGUAGE sql
 IMMUTABLE PARALLEL SAFE COST 1
AS $function$select ($1, $2) overlaps ($3, ($3 + $4))$function$
CREATE OR REPLACE FUNCTION pg_catalog."overlaps"(time without time zone, interval, time without time zone, time without time zone)
 RETURNS boolean
 LANGUAGE sql
 IMMUTABLE PARALLEL SAFE COST 1
AS $function$select ($1, ($1 + $2)) overlaps ($3, $4)$function$
CREATE OR REPLACE FUNCTION pg_catalog."overlaps"(timestamp without time zone, timestamp without time zone, timestamp without time zone, timestamp without time zone)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE
AS $function$overlaps_timestamp$function$
CREATE OR REPLACE FUNCTION pg_catalog."overlaps"(timestamp without time zone, interval, timestamp without time zone, interval)
 RETURNS boolean
 LANGUAGE sql
 IMMUTABLE PARALLEL SAFE COST 1
AS $function$select ($1, ($1 + $2)) overlaps ($3, ($3 + $4))$function$
CREATE OR REPLACE FUNCTION pg_catalog."overlaps"(timestamp without time zone, timestamp without time zone, timestamp without time zone, interval)
 RETURNS boolean
 LANGUAGE sql
 IMMUTABLE PARALLEL SAFE COST 1
AS $function$select ($1, $2) overlaps ($3, ($3 + $4))$function$
CREATE OR REPLACE FUNCTION pg_catalog."overlaps"(timestamp without time zone, interval, timestamp without time zone, timestamp without time zone)
 RETURNS boolean
 LANGUAGE sql
 IMMUTABLE PARALLEL SAFE COST 1
AS $function$select ($1, ($1 + $2)) overlaps ($3, $4)$function$
]]></string>
			<comment><![CDATA[intervals overlap?]]></comment>
		</function>
		<function name="overlay" id="Function_ad8feb7" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog."overlay"(bytea, bytea, integer, integer)
 RETURNS bytea
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$byteaoverlay$function$
CREATE OR REPLACE FUNCTION pg_catalog."overlay"(bytea, bytea, integer)
 RETURNS bytea
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$byteaoverlay_no_len$function$
CREATE OR REPLACE FUNCTION pg_catalog."overlay"(text, text, integer, integer)
 RETURNS text
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$textoverlay$function$
CREATE OR REPLACE FUNCTION pg_catalog."overlay"(text, text, integer)
 RETURNS text
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$textoverlay_no_len$function$
CREATE OR REPLACE FUNCTION pg_catalog."overlay"(bit, bit, integer, integer)
 RETURNS bit
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$bitoverlay$function$
CREATE OR REPLACE FUNCTION pg_catalog."overlay"(bit, bit, integer)
 RETURNS bit
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$bitoverlay_no_len$function$
]]></string>
			<comment><![CDATA[substitute portion of string]]></comment>
		</function>
		<function name="overlay_001" id="Function_3758615d" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog."overlay"(bytea, bytea, integer, integer)
 RETURNS bytea
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$byteaoverlay$function$
CREATE OR REPLACE FUNCTION pg_catalog."overlay"(bytea, bytea, integer)
 RETURNS bytea
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$byteaoverlay_no_len$function$
CREATE OR REPLACE FUNCTION pg_catalog."overlay"(text, text, integer, integer)
 RETURNS text
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$textoverlay$function$
CREATE OR REPLACE FUNCTION pg_catalog."overlay"(text, text, integer)
 RETURNS text
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$textoverlay_no_len$function$
CREATE OR REPLACE FUNCTION pg_catalog."overlay"(bit, bit, integer, integer)
 RETURNS bit
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$bitoverlay$function$
CREATE OR REPLACE FUNCTION pg_catalog."overlay"(bit, bit, integer)
 RETURNS bit
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$bitoverlay_no_len$function$
]]></string>
			<comment><![CDATA[substitute portion of string]]></comment>
		</function>
		<function name="overlay_002" id="Function_36bd894e" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog."overlay"(bytea, bytea, integer, integer)
 RETURNS bytea
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$byteaoverlay$function$
CREATE OR REPLACE FUNCTION pg_catalog."overlay"(bytea, bytea, integer)
 RETURNS bytea
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$byteaoverlay_no_len$function$
CREATE OR REPLACE FUNCTION pg_catalog."overlay"(text, text, integer, integer)
 RETURNS text
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$textoverlay$function$
CREATE OR REPLACE FUNCTION pg_catalog."overlay"(text, text, integer)
 RETURNS text
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$textoverlay_no_len$function$
CREATE OR REPLACE FUNCTION pg_catalog."overlay"(bit, bit, integer, integer)
 RETURNS bit
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$bitoverlay$function$
CREATE OR REPLACE FUNCTION pg_catalog."overlay"(bit, bit, integer)
 RETURNS bit
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$bitoverlay_no_len$function$
]]></string>
			<comment><![CDATA[substitute portion of string]]></comment>
		</function>
		<function name="overlay_003" id="Function_129eb6fa" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog."overlay"(bytea, bytea, integer, integer)
 RETURNS bytea
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$byteaoverlay$function$
CREATE OR REPLACE FUNCTION pg_catalog."overlay"(bytea, bytea, integer)
 RETURNS bytea
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$byteaoverlay_no_len$function$
CREATE OR REPLACE FUNCTION pg_catalog."overlay"(text, text, integer, integer)
 RETURNS text
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$textoverlay$function$
CREATE OR REPLACE FUNCTION pg_catalog."overlay"(text, text, integer)
 RETURNS text
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$textoverlay_no_len$function$
CREATE OR REPLACE FUNCTION pg_catalog."overlay"(bit, bit, integer, integer)
 RETURNS bit
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$bitoverlay$function$
CREATE OR REPLACE FUNCTION pg_catalog."overlay"(bit, bit, integer)
 RETURNS bit
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$bitoverlay_no_len$function$
]]></string>
			<comment><![CDATA[substitute portion of string]]></comment>
		</function>
		<function name="overlay_004" id="Function_6f3886a" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog."overlay"(bytea, bytea, integer, integer)
 RETURNS bytea
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$byteaoverlay$function$
CREATE OR REPLACE FUNCTION pg_catalog."overlay"(bytea, bytea, integer)
 RETURNS bytea
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$byteaoverlay_no_len$function$
CREATE OR REPLACE FUNCTION pg_catalog."overlay"(text, text, integer, integer)
 RETURNS text
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$textoverlay$function$
CREATE OR REPLACE FUNCTION pg_catalog."overlay"(text, text, integer)
 RETURNS text
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$textoverlay_no_len$function$
CREATE OR REPLACE FUNCTION pg_catalog."overlay"(bit, bit, integer, integer)
 RETURNS bit
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$bitoverlay$function$
CREATE OR REPLACE FUNCTION pg_catalog."overlay"(bit, bit, integer)
 RETURNS bit
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$bitoverlay_no_len$function$
]]></string>
			<comment><![CDATA[substitute portion of string]]></comment>
		</function>
		<function name="overlay_005" id="Function_232ec7c0" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog."overlay"(bytea, bytea, integer, integer)
 RETURNS bytea
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$byteaoverlay$function$
CREATE OR REPLACE FUNCTION pg_catalog."overlay"(bytea, bytea, integer)
 RETURNS bytea
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$byteaoverlay_no_len$function$
CREATE OR REPLACE FUNCTION pg_catalog."overlay"(text, text, integer, integer)
 RETURNS text
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$textoverlay$function$
CREATE OR REPLACE FUNCTION pg_catalog."overlay"(text, text, integer)
 RETURNS text
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$textoverlay_no_len$function$
CREATE OR REPLACE FUNCTION pg_catalog."overlay"(bit, bit, integer, integer)
 RETURNS bit
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$bitoverlay$function$
CREATE OR REPLACE FUNCTION pg_catalog."overlay"(bit, bit, integer)
 RETURNS bit
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$bitoverlay_no_len$function$
]]></string>
			<comment><![CDATA[substitute portion of string]]></comment>
		</function>
		<function name="parse_ident" id="Function_2af50894" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.parse_ident(str text, strict boolean DEFAULT true)
 RETURNS text[]
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$parse_ident$function$
]]></string>
			<comment><![CDATA[parse qualified identifier to array of identifiers]]></comment>
		</function>
		<function name="path" id="Function_220d2117" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.path(polygon)
 RETURNS path
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$poly_path$function$
]]></string>
			<comment><![CDATA[convert polygon to path]]></comment>
		</function>
		<function name="path_add" id="Function_3f10b18" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.path_add(path, path)
 RETURNS path
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$path_add$function$
]]></string>
			<comment><![CDATA[implementation of + operator]]></comment>
		</function>
		<function name="path_add_pt" id="Function_383c5482" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.path_add_pt(path, point)
 RETURNS path
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$path_add_pt$function$
]]></string>
			<comment><![CDATA[implementation of + operator]]></comment>
		</function>
		<function name="path_center" id="Function_bd976bf" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.path_center(path)
 RETURNS point
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$path_center$function$
]]></string>
			<comment><![CDATA[implementation of @@ operator]]></comment>
		</function>
		<function name="path_contain_pt" id="Function_29f0b455" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.path_contain_pt(path, point)
 RETURNS boolean
 LANGUAGE sql
 IMMUTABLE PARALLEL SAFE STRICT COST 1
AS $function$select pg_catalog.on_ppath($2, $1)$function$
]]></string>
			<comment><![CDATA[implementation of @> operator]]></comment>
		</function>
		<function name="path_distance" id="Function_28bded89" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.path_distance(path, path)
 RETURNS double precision
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$path_distance$function$
]]></string>
			<comment><![CDATA[implementation of <-> operator]]></comment>
		</function>
		<function name="path_div_pt" id="Function_e3831f1" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.path_div_pt(path, point)
 RETURNS path
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$path_div_pt$function$
]]></string>
			<comment><![CDATA[implementation of / operator]]></comment>
		</function>
		<function name="path_in" id="Function_29b43862" isSystem="false" >
			<comment><![CDATA[I/O]]></comment>
		</function>
		<function name="path_inter" id="Function_781607" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.path_inter(path, path)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$path_inter$function$
]]></string>
			<comment><![CDATA[implementation of ?# operator]]></comment>
		</function>
		<function name="path_length" id="Function_2d82e99e" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.path_length(path)
 RETURNS double precision
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$path_length$function$
]]></string>
			<comment><![CDATA[implementation of @-@ operator]]></comment>
		</function>
		<function name="path_mul_pt" id="Function_27d3283f" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.path_mul_pt(path, point)
 RETURNS path
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$path_mul_pt$function$
]]></string>
			<comment><![CDATA[implementation of * operator]]></comment>
		</function>
		<function name="path_n_eq" id="Function_319cebae" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.path_n_eq(path, path)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$path_n_eq$function$
]]></string>
			<comment><![CDATA[implementation of = operator]]></comment>
		</function>
		<function name="path_n_ge" id="Function_28d4031b" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.path_n_ge(path, path)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$path_n_ge$function$
]]></string>
			<comment><![CDATA[implementation of >= operator]]></comment>
		</function>
		<function name="path_n_gt" id="Function_3149287e" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.path_n_gt(path, path)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$path_n_gt$function$
]]></string>
			<comment><![CDATA[implementation of > operator]]></comment>
		</function>
		<function name="path_n_le" id="Function_ec91aa5" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.path_n_le(path, path)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$path_n_le$function$
]]></string>
			<comment><![CDATA[implementation of <= operator]]></comment>
		</function>
		<function name="path_n_lt" id="Function_1cfbe885" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.path_n_lt(path, path)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$path_n_lt$function$
]]></string>
			<comment><![CDATA[implementation of < operator]]></comment>
		</function>
		<function name="path_npoints" id="Function_386642ee" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.path_npoints(path)
 RETURNS integer
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$path_npoints$function$
]]></string>
			<comment><![CDATA[implementation of # operator]]></comment>
		</function>
		<function name="path_out" id="Function_77f2a72" isSystem="false" >
			<comment><![CDATA[I/O]]></comment>
		</function>
		<function name="path_recv" id="Function_22b23815" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.path_recv(internal)
 RETURNS path
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$path_recv$function$
]]></string>
			<comment><![CDATA[I/O]]></comment>
		</function>
		<function name="path_send" id="Function_123eae0e" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.path_send(path)
 RETURNS bytea
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$path_send$function$
]]></string>
			<comment><![CDATA[I/O]]></comment>
		</function>
		<function name="path_sub_pt" id="Function_2a533350" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.path_sub_pt(path, point)
 RETURNS path
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$path_sub_pt$function$
]]></string>
			<comment><![CDATA[implementation of - operator]]></comment>
		</function>
		<function name="pclose" id="Function_265ac0d9" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pclose(path)
 RETURNS path
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$path_close$function$
]]></string>
			<comment><![CDATA[close path]]></comment>
		</function>
		<function name="percent_rank" id="Function_3b0422aa" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.percent_rank()
 RETURNS double precision
 LANGUAGE internal
 WINDOW IMMUTABLE PARALLEL SAFE
AS $function$window_percent_rank$function$
]]></string>
			<comment><![CDATA[fractional rank within partition]]></comment>
		</function>
		<function name="percent_rank_001" id="Function_39a0c2de" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.percent_rank()
 RETURNS double precision
 LANGUAGE internal
 WINDOW IMMUTABLE PARALLEL SAFE
AS $function$window_percent_rank$function$
]]></string>
			<comment><![CDATA[fractional rank within partition]]></comment>
		</function>
		<function name="percent_rank_final" id="Function_1c804c3" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.percent_rank_final(internal, VARIADIC "any")
 RETURNS double precision
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE
AS $function$hypothetical_percent_rank_final$function$
]]></string>
			<comment><![CDATA[aggregate final function]]></comment>
		</function>
		<function name="percentile_cont" id="Function_23348d8" isSystem="false" >
			<comment><![CDATA[continuous distribution percentile]]></comment>
		</function>
		<function name="percentile_cont_001" id="Function_25d08928" isSystem="false" >
			<comment><![CDATA[continuous distribution percentile]]></comment>
		</function>
		<function name="percentile_cont_002" id="Function_54166f4" isSystem="false" >
			<comment><![CDATA[continuous distribution percentile]]></comment>
		</function>
		<function name="percentile_cont_003" id="Function_3b6cda7d" isSystem="false" >
			<comment><![CDATA[continuous distribution percentile]]></comment>
		</function>
		<function name="percentile_cont_float8_final" id="Function_2337bc43" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.percentile_cont_float8_final(internal, double precision)
 RETURNS double precision
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE
AS $function$percentile_cont_float8_final$function$
]]></string>
			<comment><![CDATA[aggregate final function]]></comment>
		</function>
		<function name="percentile_cont_float8_multi_final" id="Function_d1d44eb" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.percentile_cont_float8_multi_final(internal, double precision[])
 RETURNS double precision[]
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE
AS $function$percentile_cont_float8_multi_final$function$
]]></string>
			<comment><![CDATA[aggregate final function]]></comment>
		</function>
		<function name="percentile_cont_interval_final" id="Function_23813826" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.percentile_cont_interval_final(internal, double precision)
 RETURNS interval
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE
AS $function$percentile_cont_interval_final$function$
]]></string>
			<comment><![CDATA[aggregate final function]]></comment>
		</function>
		<function name="percentile_cont_interval_multi_final" id="Function_19e788ba" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.percentile_cont_interval_multi_final(internal, double precision[])
 RETURNS interval[]
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE
AS $function$percentile_cont_interval_multi_final$function$
]]></string>
			<comment><![CDATA[aggregate final function]]></comment>
		</function>
		<function name="percentile_disc" id="Function_51270a3" isSystem="false" >
			<comment><![CDATA[discrete percentile]]></comment>
		</function>
		<function name="percentile_disc_001" id="Function_24f01b63" isSystem="false" >
			<comment><![CDATA[discrete percentile]]></comment>
		</function>
		<function name="percentile_disc_final" id="Function_237b28ff" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.percentile_disc_final(internal, double precision, anyelement)
 RETURNS anyelement
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE
AS $function$percentile_disc_final$function$
]]></string>
			<comment><![CDATA[aggregate final function]]></comment>
		</function>
		<function name="percentile_disc_multi_final" id="Function_31628ca7" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.percentile_disc_multi_final(internal, double precision[], anyelement)
 RETURNS anyarray
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE
AS $function$percentile_disc_multi_final$function$
]]></string>
			<comment><![CDATA[aggregate final function]]></comment>
		</function>
		<function name="pg_advisory_lock" id="Function_2ef84f63" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_advisory_lock(bigint)
 RETURNS void
 LANGUAGE internal
 STRICT
AS $function$pg_advisory_lock_int8$function$
CREATE OR REPLACE FUNCTION pg_catalog.pg_advisory_lock(integer, integer)
 RETURNS void
 LANGUAGE internal
 STRICT
AS $function$pg_advisory_lock_int4$function$
]]></string>
			<comment><![CDATA[obtain exclusive advisory lock]]></comment>
		</function>
		<function name="pg_advisory_lock_001" id="Function_2db9bc30" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_advisory_lock(bigint)
 RETURNS void
 LANGUAGE internal
 STRICT
AS $function$pg_advisory_lock_int8$function$
CREATE OR REPLACE FUNCTION pg_catalog.pg_advisory_lock(integer, integer)
 RETURNS void
 LANGUAGE internal
 STRICT
AS $function$pg_advisory_lock_int4$function$
]]></string>
			<comment><![CDATA[obtain exclusive advisory lock]]></comment>
		</function>
		<function name="pg_advisory_lock_shared" id="Function_197e6ef9" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_advisory_lock_shared(bigint)
 RETURNS void
 LANGUAGE internal
 STRICT
AS $function$pg_advisory_lock_shared_int8$function$
CREATE OR REPLACE FUNCTION pg_catalog.pg_advisory_lock_shared(integer, integer)
 RETURNS void
 LANGUAGE internal
 STRICT
AS $function$pg_advisory_lock_shared_int4$function$
]]></string>
			<comment><![CDATA[obtain shared advisory lock]]></comment>
		</function>
		<function name="pg_advisory_lock_shared_001" id="Function_23a8ade" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_advisory_lock_shared(bigint)
 RETURNS void
 LANGUAGE internal
 STRICT
AS $function$pg_advisory_lock_shared_int8$function$
CREATE OR REPLACE FUNCTION pg_catalog.pg_advisory_lock_shared(integer, integer)
 RETURNS void
 LANGUAGE internal
 STRICT
AS $function$pg_advisory_lock_shared_int4$function$
]]></string>
			<comment><![CDATA[obtain shared advisory lock]]></comment>
		</function>
		<function name="pg_advisory_unlock" id="Function_1cab4bdf" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_advisory_unlock(bigint)
 RETURNS boolean
 LANGUAGE internal
 STRICT
AS $function$pg_advisory_unlock_int8$function$
CREATE OR REPLACE FUNCTION pg_catalog.pg_advisory_unlock(integer, integer)
 RETURNS boolean
 LANGUAGE internal
 STRICT
AS $function$pg_advisory_unlock_int4$function$
]]></string>
			<comment><![CDATA[release exclusive advisory lock]]></comment>
		</function>
		<function name="pg_advisory_unlock_001" id="Function_29a2cb46" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_advisory_unlock(bigint)
 RETURNS boolean
 LANGUAGE internal
 STRICT
AS $function$pg_advisory_unlock_int8$function$
CREATE OR REPLACE FUNCTION pg_catalog.pg_advisory_unlock(integer, integer)
 RETURNS boolean
 LANGUAGE internal
 STRICT
AS $function$pg_advisory_unlock_int4$function$
]]></string>
			<comment><![CDATA[release exclusive advisory lock]]></comment>
		</function>
		<function name="pg_advisory_unlock_all" id="Function_2d82e0d1" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_advisory_unlock_all()
 RETURNS void
 LANGUAGE internal
 STRICT
AS $function$pg_advisory_unlock_all$function$
]]></string>
			<comment><![CDATA[release all advisory locks]]></comment>
		</function>
		<function name="pg_advisory_unlock_shared" id="Function_297606f6" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_advisory_unlock_shared(bigint)
 RETURNS boolean
 LANGUAGE internal
 STRICT
AS $function$pg_advisory_unlock_shared_int8$function$
CREATE OR REPLACE FUNCTION pg_catalog.pg_advisory_unlock_shared(integer, integer)
 RETURNS boolean
 LANGUAGE internal
 STRICT
AS $function$pg_advisory_unlock_shared_int4$function$
]]></string>
			<comment><![CDATA[release shared advisory lock]]></comment>
		</function>
		<function name="pg_advisory_unlock_shared_001" id="Function_35c42b31" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_advisory_unlock_shared(bigint)
 RETURNS boolean
 LANGUAGE internal
 STRICT
AS $function$pg_advisory_unlock_shared_int8$function$
CREATE OR REPLACE FUNCTION pg_catalog.pg_advisory_unlock_shared(integer, integer)
 RETURNS boolean
 LANGUAGE internal
 STRICT
AS $function$pg_advisory_unlock_shared_int4$function$
]]></string>
			<comment><![CDATA[release shared advisory lock]]></comment>
		</function>
		<function name="pg_advisory_xact_lock" id="Function_2ab524a0" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_advisory_xact_lock(bigint)
 RETURNS void
 LANGUAGE internal
 STRICT
AS $function$pg_advisory_xact_lock_int8$function$
CREATE OR REPLACE FUNCTION pg_catalog.pg_advisory_xact_lock(integer, integer)
 RETURNS void
 LANGUAGE internal
 STRICT
AS $function$pg_advisory_xact_lock_int4$function$
]]></string>
			<comment><![CDATA[obtain exclusive advisory lock]]></comment>
		</function>
		<function name="pg_advisory_xact_lock_001" id="Function_280d1cd2" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_advisory_xact_lock(bigint)
 RETURNS void
 LANGUAGE internal
 STRICT
AS $function$pg_advisory_xact_lock_int8$function$
CREATE OR REPLACE FUNCTION pg_catalog.pg_advisory_xact_lock(integer, integer)
 RETURNS void
 LANGUAGE internal
 STRICT
AS $function$pg_advisory_xact_lock_int4$function$
]]></string>
			<comment><![CDATA[obtain exclusive advisory lock]]></comment>
		</function>
		<function name="pg_advisory_xact_lock_shared" id="Function_1cda61d" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_advisory_xact_lock_shared(bigint)
 RETURNS void
 LANGUAGE internal
 STRICT
AS $function$pg_advisory_xact_lock_shared_int8$function$
CREATE OR REPLACE FUNCTION pg_catalog.pg_advisory_xact_lock_shared(integer, integer)
 RETURNS void
 LANGUAGE internal
 STRICT
AS $function$pg_advisory_xact_lock_shared_int4$function$
]]></string>
			<comment><![CDATA[obtain shared advisory lock]]></comment>
		</function>
		<function name="pg_advisory_xact_lock_shared_001" id="Function_19b6a1d5" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_advisory_xact_lock_shared(bigint)
 RETURNS void
 LANGUAGE internal
 STRICT
AS $function$pg_advisory_xact_lock_shared_int8$function$
CREATE OR REPLACE FUNCTION pg_catalog.pg_advisory_xact_lock_shared(integer, integer)
 RETURNS void
 LANGUAGE internal
 STRICT
AS $function$pg_advisory_xact_lock_shared_int4$function$
]]></string>
			<comment><![CDATA[obtain shared advisory lock]]></comment>
		</function>
		<function name="pg_available_extension_versions" id="Function_140279f4" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_available_extension_versions(OUT name name, OUT version text, OUT superuser boolean, OUT relocatable boolean, OUT schema name, OUT requires name[], OUT comment text)
 RETURNS SETOF record
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT COST 10 ROWS 100
AS $function$pg_available_extension_versions$function$
]]></string>
			<comment><![CDATA[list available extension versions]]></comment>
		</function>
		<function name="pg_available_extensions" id="Function_e115d9c" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_available_extensions(OUT name name, OUT default_version text, OUT comment text)
 RETURNS SETOF record
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT COST 10 ROWS 100
AS $function$pg_available_extensions$function$
]]></string>
			<comment><![CDATA[list available extensions]]></comment>
		</function>
		<function name="pg_backend_pid" id="Function_dc7c731" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_backend_pid()
 RETURNS integer
 LANGUAGE internal
 STABLE PARALLEL RESTRICTED STRICT
AS $function$pg_backend_pid$function$
]]></string>
			<comment><![CDATA[statistics: current backend PID]]></comment>
		</function>
		<function name="pg_backup_start_time" id="Function_3728b965" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_backup_start_time()
 RETURNS timestamp with time zone
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$pg_backup_start_time$function$
]]></string>
			<comment><![CDATA[start time of an online backup]]></comment>
		</function>
		<function name="pg_blocking_pids" id="Function_e2e166b" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_blocking_pids(integer)
 RETURNS integer[]
 LANGUAGE internal
 PARALLEL SAFE STRICT
AS $function$pg_blocking_pids$function$
]]></string>
			<comment><![CDATA[get array of PIDs of sessions blocking specified backend PID]]></comment>
		</function>
		<function name="pg_cancel_backend" id="Function_392aa7a0" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_cancel_backend(integer)
 RETURNS boolean
 LANGUAGE internal
 PARALLEL SAFE STRICT
AS $function$pg_cancel_backend$function$
]]></string>
			<comment><![CDATA[cancel a server process' current query]]></comment>
		</function>
		<function name="pg_char_to_encoding" id="Function_55ae300" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_char_to_encoding(name)
 RETURNS integer
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$PG_char_to_encoding$function$
]]></string>
			<comment><![CDATA[convert encoding name to encoding id]]></comment>
		</function>
		<function name="pg_client_encoding" id="Function_bf2eeea" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_client_encoding()
 RETURNS name
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$pg_client_encoding$function$
]]></string>
			<comment><![CDATA[encoding name of current database]]></comment>
		</function>
		<function name="pg_collation_for" id="Function_7dfddf3" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_collation_for("any")
 RETURNS text
 LANGUAGE internal
 STABLE PARALLEL SAFE
AS $function$pg_collation_for$function$
]]></string>
			<comment><![CDATA[collation of the argument; implementation of the COLLATION FOR expression]]></comment>
		</function>
		<function name="pg_collation_is_visible" id="Function_20a37ea9" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_collation_is_visible(oid)
 RETURNS boolean
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT COST 10
AS $function$pg_collation_is_visible$function$
]]></string>
			<comment><![CDATA[is collation visible in search path?]]></comment>
		</function>
		<function name="pg_column_is_updatable" id="Function_29e7d330" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_column_is_updatable(regclass, smallint, boolean)
 RETURNS boolean
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT COST 10
AS $function$pg_column_is_updatable$function$
]]></string>
			<comment><![CDATA[is a column updatable]]></comment>
		</function>
		<function name="pg_column_size" id="Function_3890ca07" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_column_size("any")
 RETURNS integer
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$pg_column_size$function$
]]></string>
			<comment><![CDATA[bytes required to store the value, perhaps with compression]]></comment>
		</function>
		<function name="pg_conf_load_time" id="Function_2c1f0300" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_conf_load_time()
 RETURNS timestamp with time zone
 LANGUAGE internal
 STABLE PARALLEL RESTRICTED STRICT
AS $function$pg_conf_load_time$function$
]]></string>
			<comment><![CDATA[configuration load time]]></comment>
		</function>
		<function name="pg_config" id="Function_2aa5e30d" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_config(OUT name text, OUT setting text)
 RETURNS SETOF record
 LANGUAGE internal
 IMMUTABLE PARALLEL RESTRICTED STRICT ROWS 23
AS $function$pg_config$function$
]]></string>
			<comment><![CDATA[pg_config binary as a function]]></comment>
		</function>
		<function name="pg_control_checkpoint" id="Function_32164b67" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_control_checkpoint(OUT checkpoint_location pg_lsn, OUT prior_location pg_lsn, OUT redo_location pg_lsn, OUT redo_wal_file text, OUT timeline_id integer, OUT prev_timeline_id integer, OUT full_page_writes boolean, OUT next_xid text, OUT next_oid oid, OUT next_multixact_id xid, OUT next_multi_offset xid, OUT oldest_xid xid, OUT oldest_xid_dbid oid, OUT oldest_active_xid xid, OUT oldest_multi_xid xid, OUT oldest_multi_dbid oid, OUT oldest_commit_ts_xid xid, OUT newest_commit_ts_xid xid, OUT checkpoint_time timestamp with time zone)
 RETURNS record
 LANGUAGE internal
 PARALLEL SAFE STRICT
AS $function$pg_control_checkpoint$function$
]]></string>
			<comment><![CDATA[pg_controldata checkpoint state information as a function]]></comment>
		</function>
		<function name="pg_control_init" id="Function_327518bd" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_control_init(OUT max_data_alignment integer, OUT database_block_size integer, OUT blocks_per_segment integer, OUT wal_block_size integer, OUT bytes_per_wal_segment integer, OUT max_identifier_length integer, OUT max_index_columns integer, OUT max_toast_chunk_size integer, OUT large_object_chunk_size integer, OUT bigint_timestamps boolean, OUT float4_pass_by_value boolean, OUT float8_pass_by_value boolean, OUT data_page_checksum_version integer)
 RETURNS record
 LANGUAGE internal
 PARALLEL SAFE STRICT
AS $function$pg_control_init$function$
]]></string>
			<comment><![CDATA[pg_controldata init state information as a function]]></comment>
		</function>
		<function name="pg_control_recovery" id="Function_284ec513" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_control_recovery(OUT min_recovery_end_location pg_lsn, OUT min_recovery_end_timeline integer, OUT backup_start_location pg_lsn, OUT backup_end_location pg_lsn, OUT end_of_backup_record_required boolean)
 RETURNS record
 LANGUAGE internal
 PARALLEL SAFE STRICT
AS $function$pg_control_recovery$function$
]]></string>
			<comment><![CDATA[pg_controldata recovery state information as a function]]></comment>
		</function>
		<function name="pg_control_system" id="Function_10a15077" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_control_system(OUT pg_control_version integer, OUT catalog_version_no integer, OUT system_identifier bigint, OUT pg_control_last_modified timestamp with time zone)
 RETURNS record
 LANGUAGE internal
 PARALLEL SAFE STRICT
AS $function$pg_control_system$function$
]]></string>
			<comment><![CDATA[pg_controldata general state information as a function]]></comment>
		</function>
		<function name="pg_conversion_is_visible" id="Function_2576e22e" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_conversion_is_visible(oid)
 RETURNS boolean
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT COST 10
AS $function$pg_conversion_is_visible$function$
]]></string>
			<comment><![CDATA[is conversion visible in search path?]]></comment>
		</function>
		<function name="pg_create_logical_replication_slot" id="Function_37c5ca71" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_create_logical_replication_slot(slot_name name, plugin name, OUT slot_name text, OUT xlog_position pg_lsn)
 RETURNS record
 LANGUAGE internal
 STRICT
AS $function$pg_create_logical_replication_slot$function$
]]></string>
			<comment><![CDATA[set up a logical replication slot]]></comment>
		</function>
		<function name="pg_create_physical_replication_slot" id="Function_2b21e402" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_create_physical_replication_slot(slot_name name, immediately_reserve boolean DEFAULT false, OUT slot_name name, OUT xlog_position pg_lsn)
 RETURNS record
 LANGUAGE internal
 STRICT
AS $function$pg_create_physical_replication_slot$function$
]]></string>
			<comment><![CDATA[create a physical replication slot]]></comment>
		</function>
		<function name="pg_create_restore_point" id="Function_c009925" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_create_restore_point(text)
 RETURNS pg_lsn
 LANGUAGE internal
 PARALLEL SAFE STRICT
AS $function$pg_create_restore_point$function$
]]></string>
			<comment><![CDATA[create a named restore point]]></comment>
		</function>
		<function name="pg_current_xlog_flush_location" id="Function_1d191510" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_current_xlog_flush_location()
 RETURNS pg_lsn
 LANGUAGE internal
 PARALLEL SAFE STRICT
AS $function$pg_current_xlog_flush_location$function$
]]></string>
			<comment><![CDATA[current xlog flush location]]></comment>
		</function>
		<function name="pg_current_xlog_insert_location" id="Function_3ad37260" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_current_xlog_insert_location()
 RETURNS pg_lsn
 LANGUAGE internal
 PARALLEL SAFE STRICT
AS $function$pg_current_xlog_insert_location$function$
]]></string>
			<comment><![CDATA[current xlog insert location]]></comment>
		</function>
		<function name="pg_current_xlog_location" id="Function_7894f31" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_current_xlog_location()
 RETURNS pg_lsn
 LANGUAGE internal
 PARALLEL SAFE STRICT
AS $function$pg_current_xlog_location$function$
]]></string>
			<comment><![CDATA[current xlog write location]]></comment>
		</function>
		<function name="pg_cursor" id="Function_330555e0" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_cursor(OUT name text, OUT statement text, OUT is_holdable boolean, OUT is_binary boolean, OUT is_scrollable boolean, OUT creation_time timestamp with time zone)
 RETURNS SETOF record
 LANGUAGE internal
 STABLE PARALLEL RESTRICTED STRICT
AS $function$pg_cursor$function$
]]></string>
			<comment><![CDATA[get the open cursors for this session]]></comment>
		</function>
		<function name="pg_database_size" id="Function_2e9942da" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_database_size(name)
 RETURNS bigint
 LANGUAGE internal
 PARALLEL SAFE STRICT
AS $function$pg_database_size_name$function$
CREATE OR REPLACE FUNCTION pg_catalog.pg_database_size(oid)
 RETURNS bigint
 LANGUAGE internal
 PARALLEL SAFE STRICT
AS $function$pg_database_size_oid$function$
]]></string>
			<comment><![CDATA[total disk space usage for the specified database]]></comment>
		</function>
		<function name="pg_database_size_001" id="Function_1e35f2c8" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_database_size(name)
 RETURNS bigint
 LANGUAGE internal
 PARALLEL SAFE STRICT
AS $function$pg_database_size_name$function$
CREATE OR REPLACE FUNCTION pg_catalog.pg_database_size(oid)
 RETURNS bigint
 LANGUAGE internal
 PARALLEL SAFE STRICT
AS $function$pg_database_size_oid$function$
]]></string>
			<comment><![CDATA[total disk space usage for the specified database]]></comment>
		</function>
		<function name="pg_ddl_command_in" id="Function_2fefc8fe" isSystem="false" >
			<comment><![CDATA[I/O]]></comment>
		</function>
		<function name="pg_ddl_command_out" id="Function_3a662c9a" isSystem="false" >
			<comment><![CDATA[I/O]]></comment>
		</function>
		<function name="pg_ddl_command_recv" id="Function_1107dd82" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_ddl_command_recv(internal)
 RETURNS pg_ddl_command
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$pg_ddl_command_recv$function$
]]></string>
			<comment><![CDATA[I/O]]></comment>
		</function>
		<function name="pg_ddl_command_send" id="Function_36a97eb9" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_ddl_command_send(pg_ddl_command)
 RETURNS bytea
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$pg_ddl_command_send$function$
]]></string>
			<comment><![CDATA[I/O]]></comment>
		</function>
		<function name="pg_describe_object" id="Function_26d14a6a" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_describe_object(oid, oid, integer)
 RETURNS text
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$pg_describe_object$function$
]]></string>
			<comment><![CDATA[get identification of SQL object]]></comment>
		</function>
		<function name="pg_drop_replication_slot" id="Function_25d94ee" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_drop_replication_slot(name)
 RETURNS void
 LANGUAGE internal
 STRICT
AS $function$pg_drop_replication_slot$function$
]]></string>
			<comment><![CDATA[drop a replication slot]]></comment>
		</function>
		<function name="pg_encoding_max_length" id="Function_20695322" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_encoding_max_length(integer)
 RETURNS integer
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$pg_encoding_max_length_sql$function$
]]></string>
			<comment><![CDATA[maximum octet length of a character in given encoding]]></comment>
		</function>
		<function name="pg_encoding_to_char" id="Function_3a3c3818" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_encoding_to_char(integer)
 RETURNS name
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$PG_encoding_to_char$function$
]]></string>
			<comment><![CDATA[convert encoding id to encoding name]]></comment>
		</function>
		<function name="pg_event_trigger_ddl_commands" id="Function_13a39439" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_event_trigger_ddl_commands(OUT classid oid, OUT objid oid, OUT objsubid integer, OUT command_tag text, OUT object_type text, OUT schema_name text, OUT object_identity text, OUT in_extension boolean, OUT command pg_ddl_command)
 RETURNS SETOF record
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT COST 10 ROWS 100
AS $function$pg_event_trigger_ddl_commands$function$
]]></string>
			<comment><![CDATA[list DDL actions being executed by the current command]]></comment>
		</function>
		<function name="pg_event_trigger_dropped_objects" id="Function_3ab7801f" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_event_trigger_dropped_objects(OUT classid oid, OUT objid oid, OUT objsubid integer, OUT original boolean, OUT normal boolean, OUT is_temporary boolean, OUT object_type text, OUT schema_name text, OUT object_name text, OUT object_identity text, OUT address_names text[], OUT address_args text[])
 RETURNS SETOF record
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT COST 10 ROWS 100
AS $function$pg_event_trigger_dropped_objects$function$
]]></string>
			<comment><![CDATA[list objects dropped by the current command]]></comment>
		</function>
		<function name="pg_event_trigger_table_rewrite_oid" id="Function_e50a43" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_event_trigger_table_rewrite_oid(OUT oid oid)
 RETURNS oid
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$pg_event_trigger_table_rewrite_oid$function$
]]></string>
			<comment><![CDATA[return Oid of the table getting rewritten]]></comment>
		</function>
		<function name="pg_event_trigger_table_rewrite_reason" id="Function_a386c41" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_event_trigger_table_rewrite_reason()
 RETURNS integer
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$pg_event_trigger_table_rewrite_reason$function$
]]></string>
			<comment><![CDATA[return reason code for table getting rewritten]]></comment>
		</function>
		<function name="pg_export_snapshot" id="Function_ce62c70" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_export_snapshot()
 RETURNS text
 LANGUAGE internal
 STRICT
AS $function$pg_export_snapshot$function$
]]></string>
			<comment><![CDATA[export a snapshot]]></comment>
		</function>
		<function name="pg_extension_config_dump" id="Function_24471a71" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_extension_config_dump(regclass, text)
 RETURNS void
 LANGUAGE internal
 STRICT
AS $function$pg_extension_config_dump$function$
]]></string>
			<comment><![CDATA[flag an extension's table contents to be emitted by pg_dump]]></comment>
		</function>
		<function name="pg_extension_update_paths" id="Function_19456621" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_extension_update_paths(name name, OUT source text, OUT target text, OUT path text)
 RETURNS SETOF record
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT COST 10 ROWS 100
AS $function$pg_extension_update_paths$function$
]]></string>
			<comment><![CDATA[list an extension's version update paths]]></comment>
		</function>
		<function name="pg_filenode_relation" id="Function_2ef04c7e" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_filenode_relation(oid, oid)
 RETURNS regclass
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$pg_filenode_relation$function$
]]></string>
			<comment><![CDATA[relation OID for filenode and tablespace]]></comment>
		</function>
		<function name="pg_function_is_visible" id="Function_18db2267" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_function_is_visible(oid)
 RETURNS boolean
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT COST 10
AS $function$pg_function_is_visible$function$
]]></string>
			<comment><![CDATA[is function visible in search path?]]></comment>
		</function>
		<function name="pg_get_constraintdef" id="Function_223eb369" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_get_constraintdef(oid)
 RETURNS text
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$pg_get_constraintdef$function$
CREATE OR REPLACE FUNCTION pg_catalog.pg_get_constraintdef(oid, boolean)
 RETURNS text
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$pg_get_constraintdef_ext$function$
]]></string>
			<comment><![CDATA[constraint description]]></comment>
		</function>
		<function name="pg_get_constraintdef_001" id="Function_3ae4d7b6" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_get_constraintdef(oid)
 RETURNS text
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$pg_get_constraintdef$function$
CREATE OR REPLACE FUNCTION pg_catalog.pg_get_constraintdef(oid, boolean)
 RETURNS text
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$pg_get_constraintdef_ext$function$
]]></string>
			<comment><![CDATA[constraint description]]></comment>
		</function>
		<function name="pg_get_expr" id="Function_93b6b" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_get_expr(pg_node_tree, oid)
 RETURNS text
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$pg_get_expr$function$
CREATE OR REPLACE FUNCTION pg_catalog.pg_get_expr(pg_node_tree, oid, boolean)
 RETURNS text
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$pg_get_expr_ext$function$
]]></string>
			<comment><![CDATA[deparse an encoded expression]]></comment>
		</function>
		<function name="pg_get_expr_001" id="Function_31e6154" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_get_expr(pg_node_tree, oid)
 RETURNS text
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$pg_get_expr$function$
CREATE OR REPLACE FUNCTION pg_catalog.pg_get_expr(pg_node_tree, oid, boolean)
 RETURNS text
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$pg_get_expr_ext$function$
]]></string>
			<comment><![CDATA[deparse an encoded expression]]></comment>
		</function>
		<function name="pg_get_function_arg_default" id="Function_2ba2856f" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_get_function_arg_default(oid, integer)
 RETURNS text
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$pg_get_function_arg_default$function$
]]></string>
			<comment><![CDATA[function argument default]]></comment>
		</function>
		<function name="pg_get_function_arguments" id="Function_31e5e45a" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_get_function_arguments(oid)
 RETURNS text
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$pg_get_function_arguments$function$
]]></string>
			<comment><![CDATA[argument list of a function]]></comment>
		</function>
		<function name="pg_get_function_identity_arguments" id="Function_f329e59" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_get_function_identity_arguments(oid)
 RETURNS text
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$pg_get_function_identity_arguments$function$
]]></string>
			<comment><![CDATA[identity argument list of a function]]></comment>
		</function>
		<function name="pg_get_function_result" id="Function_33fff759" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_get_function_result(oid)
 RETURNS text
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$pg_get_function_result$function$
]]></string>
			<comment><![CDATA[result type of a function]]></comment>
		</function>
		<function name="pg_get_functiondef" id="Function_22f8d4" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_get_functiondef(oid)
 RETURNS text
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$pg_get_functiondef$function$
]]></string>
			<comment><![CDATA[definition of a function]]></comment>
		</function>
		<function name="pg_get_indexdef" id="Function_d6253ac" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_get_indexdef(oid)
 RETURNS text
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$pg_get_indexdef$function$
CREATE OR REPLACE FUNCTION pg_catalog.pg_get_indexdef(oid, integer, boolean)
 RETURNS text
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$pg_get_indexdef_ext$function$
]]></string>
			<comment><![CDATA[index description]]></comment>
		</function>
		<function name="pg_get_indexdef_001" id="Function_21f76d4d" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_get_indexdef(oid)
 RETURNS text
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$pg_get_indexdef$function$
CREATE OR REPLACE FUNCTION pg_catalog.pg_get_indexdef(oid, integer, boolean)
 RETURNS text
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$pg_get_indexdef_ext$function$
]]></string>
			<comment><![CDATA[index description]]></comment>
		</function>
		<function name="pg_get_keywords" id="Function_3809fc0d" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_get_keywords(OUT word text, OUT catcode "char", OUT catdesc text)
 RETURNS SETOF record
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT COST 10 ROWS 400
AS $function$pg_get_keywords$function$
]]></string>
			<comment><![CDATA[list of SQL keywords]]></comment>
		</function>
		<function name="pg_get_multixact_members" id="Function_1fddd2c5" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_get_multixact_members(multixid xid, OUT xid xid, OUT mode text)
 RETURNS SETOF record
 LANGUAGE internal
 PARALLEL SAFE STRICT
AS $function$pg_get_multixact_members$function$
]]></string>
			<comment><![CDATA[view members of a multixactid]]></comment>
		</function>
		<function name="pg_get_object_address" id="Function_f617943" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_get_object_address(type text, name text[], args text[], OUT classid oid, OUT objid oid, OUT subobjid integer)
 RETURNS record
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$pg_get_object_address$function$
]]></string>
			<comment><![CDATA[get OID-based object address from name/args arrays]]></comment>
		</function>
		<function name="pg_get_replication_slots" id="Function_1e8d0be1" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_get_replication_slots(OUT slot_name name, OUT plugin name, OUT slot_type text, OUT datoid oid, OUT active boolean, OUT active_pid integer, OUT xmin xid, OUT catalog_xmin xid, OUT restart_lsn pg_lsn, OUT confirmed_flush_lsn pg_lsn)
 RETURNS SETOF record
 LANGUAGE internal
 STABLE PARALLEL SAFE ROWS 10
AS $function$pg_get_replication_slots$function$
]]></string>
			<comment><![CDATA[information about replication slots currently in use]]></comment>
		</function>
		<function name="pg_get_ruledef" id="Function_7e0b90e" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_get_ruledef(oid)
 RETURNS text
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$pg_get_ruledef$function$
CREATE OR REPLACE FUNCTION pg_catalog.pg_get_ruledef(oid, boolean)
 RETURNS text
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$pg_get_ruledef_ext$function$
]]></string>
			<comment><![CDATA[source text of a rule]]></comment>
		</function>
		<function name="pg_get_ruledef_001" id="Function_1cf5ef8f" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_get_ruledef(oid)
 RETURNS text
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$pg_get_ruledef$function$
CREATE OR REPLACE FUNCTION pg_catalog.pg_get_ruledef(oid, boolean)
 RETURNS text
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$pg_get_ruledef_ext$function$
]]></string>
			<comment><![CDATA[source text of a rule]]></comment>
		</function>
		<function name="pg_get_serial_sequence" id="Function_1853975b" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_get_serial_sequence(text, text)
 RETURNS text
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$pg_get_serial_sequence$function$
]]></string>
			<comment><![CDATA[name of sequence for a serial column]]></comment>
		</function>
		<function name="pg_get_triggerdef" id="Function_35cef9bb" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_get_triggerdef(oid)
 RETURNS text
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$pg_get_triggerdef$function$
CREATE OR REPLACE FUNCTION pg_catalog.pg_get_triggerdef(oid, boolean)
 RETURNS text
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$pg_get_triggerdef_ext$function$
]]></string>
			<comment><![CDATA[trigger description]]></comment>
		</function>
		<function name="pg_get_triggerdef_001" id="Function_34487e2b" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_get_triggerdef(oid)
 RETURNS text
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$pg_get_triggerdef$function$
CREATE OR REPLACE FUNCTION pg_catalog.pg_get_triggerdef(oid, boolean)
 RETURNS text
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$pg_get_triggerdef_ext$function$
]]></string>
			<comment><![CDATA[trigger description]]></comment>
		</function>
		<function name="pg_get_userbyid" id="Function_150314da" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_get_userbyid(oid)
 RETURNS name
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$pg_get_userbyid$function$
]]></string>
			<comment><![CDATA[role name by OID (with fallback)]]></comment>
		</function>
		<function name="pg_get_viewdef" id="Function_17a18a25" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_get_viewdef(text)
 RETURNS text
 LANGUAGE internal
 STABLE PARALLEL RESTRICTED STRICT
AS $function$pg_get_viewdef_name$function$
CREATE OR REPLACE FUNCTION pg_catalog.pg_get_viewdef(oid)
 RETURNS text
 LANGUAGE internal
 STABLE PARALLEL RESTRICTED STRICT
AS $function$pg_get_viewdef$function$
CREATE OR REPLACE FUNCTION pg_catalog.pg_get_viewdef(text, boolean)
 RETURNS text
 LANGUAGE internal
 STABLE PARALLEL RESTRICTED STRICT
AS $function$pg_get_viewdef_name_ext$function$
CREATE OR REPLACE FUNCTION pg_catalog.pg_get_viewdef(oid, boolean)
 RETURNS text
 LANGUAGE internal
 STABLE PARALLEL RESTRICTED STRICT
AS $function$pg_get_viewdef_ext$function$
CREATE OR REPLACE FUNCTION pg_catalog.pg_get_viewdef(oid, integer)
 RETURNS text
 LANGUAGE internal
 STABLE PARALLEL RESTRICTED STRICT
AS $function$pg_get_viewdef_wrap$function$
]]></string>
			<comment><![CDATA[select statement of a view]]></comment>
		</function>
		<function name="pg_get_viewdef_001" id="Function_1597cc68" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_get_viewdef(text)
 RETURNS text
 LANGUAGE internal
 STABLE PARALLEL RESTRICTED STRICT
AS $function$pg_get_viewdef_name$function$
CREATE OR REPLACE FUNCTION pg_catalog.pg_get_viewdef(oid)
 RETURNS text
 LANGUAGE internal
 STABLE PARALLEL RESTRICTED STRICT
AS $function$pg_get_viewdef$function$
CREATE OR REPLACE FUNCTION pg_catalog.pg_get_viewdef(text, boolean)
 RETURNS text
 LANGUAGE internal
 STABLE PARALLEL RESTRICTED STRICT
AS $function$pg_get_viewdef_name_ext$function$
CREATE OR REPLACE FUNCTION pg_catalog.pg_get_viewdef(oid, boolean)
 RETURNS text
 LANGUAGE internal
 STABLE PARALLEL RESTRICTED STRICT
AS $function$pg_get_viewdef_ext$function$
CREATE OR REPLACE FUNCTION pg_catalog.pg_get_viewdef(oid, integer)
 RETURNS text
 LANGUAGE internal
 STABLE PARALLEL RESTRICTED STRICT
AS $function$pg_get_viewdef_wrap$function$
]]></string>
			<comment><![CDATA[select statement of a view]]></comment>
		</function>
		<function name="pg_get_viewdef_002" id="Function_c629191" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_get_viewdef(text)
 RETURNS text
 LANGUAGE internal
 STABLE PARALLEL RESTRICTED STRICT
AS $function$pg_get_viewdef_name$function$
CREATE OR REPLACE FUNCTION pg_catalog.pg_get_viewdef(oid)
 RETURNS text
 LANGUAGE internal
 STABLE PARALLEL RESTRICTED STRICT
AS $function$pg_get_viewdef$function$
CREATE OR REPLACE FUNCTION pg_catalog.pg_get_viewdef(text, boolean)
 RETURNS text
 LANGUAGE internal
 STABLE PARALLEL RESTRICTED STRICT
AS $function$pg_get_viewdef_name_ext$function$
CREATE OR REPLACE FUNCTION pg_catalog.pg_get_viewdef(oid, boolean)
 RETURNS text
 LANGUAGE internal
 STABLE PARALLEL RESTRICTED STRICT
AS $function$pg_get_viewdef_ext$function$
CREATE OR REPLACE FUNCTION pg_catalog.pg_get_viewdef(oid, integer)
 RETURNS text
 LANGUAGE internal
 STABLE PARALLEL RESTRICTED STRICT
AS $function$pg_get_viewdef_wrap$function$
]]></string>
			<comment><![CDATA[select statement of a view]]></comment>
		</function>
		<function name="pg_get_viewdef_003" id="Function_36a5ae00" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_get_viewdef(text)
 RETURNS text
 LANGUAGE internal
 STABLE PARALLEL RESTRICTED STRICT
AS $function$pg_get_viewdef_name$function$
CREATE OR REPLACE FUNCTION pg_catalog.pg_get_viewdef(oid)
 RETURNS text
 LANGUAGE internal
 STABLE PARALLEL RESTRICTED STRICT
AS $function$pg_get_viewdef$function$
CREATE OR REPLACE FUNCTION pg_catalog.pg_get_viewdef(text, boolean)
 RETURNS text
 LANGUAGE internal
 STABLE PARALLEL RESTRICTED STRICT
AS $function$pg_get_viewdef_name_ext$function$
CREATE OR REPLACE FUNCTION pg_catalog.pg_get_viewdef(oid, boolean)
 RETURNS text
 LANGUAGE internal
 STABLE PARALLEL RESTRICTED STRICT
AS $function$pg_get_viewdef_ext$function$
CREATE OR REPLACE FUNCTION pg_catalog.pg_get_viewdef(oid, integer)
 RETURNS text
 LANGUAGE internal
 STABLE PARALLEL RESTRICTED STRICT
AS $function$pg_get_viewdef_wrap$function$
]]></string>
			<comment><![CDATA[select statement of a view]]></comment>
		</function>
		<function name="pg_get_viewdef_004" id="Function_1ca361ba" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_get_viewdef(text)
 RETURNS text
 LANGUAGE internal
 STABLE PARALLEL RESTRICTED STRICT
AS $function$pg_get_viewdef_name$function$
CREATE OR REPLACE FUNCTION pg_catalog.pg_get_viewdef(oid)
 RETURNS text
 LANGUAGE internal
 STABLE PARALLEL RESTRICTED STRICT
AS $function$pg_get_viewdef$function$
CREATE OR REPLACE FUNCTION pg_catalog.pg_get_viewdef(text, boolean)
 RETURNS text
 LANGUAGE internal
 STABLE PARALLEL RESTRICTED STRICT
AS $function$pg_get_viewdef_name_ext$function$
CREATE OR REPLACE FUNCTION pg_catalog.pg_get_viewdef(oid, boolean)
 RETURNS text
 LANGUAGE internal
 STABLE PARALLEL RESTRICTED STRICT
AS $function$pg_get_viewdef_ext$function$
CREATE OR REPLACE FUNCTION pg_catalog.pg_get_viewdef(oid, integer)
 RETURNS text
 LANGUAGE internal
 STABLE PARALLEL RESTRICTED STRICT
AS $function$pg_get_viewdef_wrap$function$
]]></string>
			<comment><![CDATA[select statement of a view]]></comment>
		</function>
		<function name="pg_has_role" id="Function_29e9490b" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_has_role(name, name, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$pg_has_role_name_name$function$
CREATE OR REPLACE FUNCTION pg_catalog.pg_has_role(name, oid, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$pg_has_role_name_id$function$
CREATE OR REPLACE FUNCTION pg_catalog.pg_has_role(oid, name, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$pg_has_role_id_name$function$
CREATE OR REPLACE FUNCTION pg_catalog.pg_has_role(oid, oid, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$pg_has_role_id_id$function$
CREATE OR REPLACE FUNCTION pg_catalog.pg_has_role(name, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$pg_has_role_name$function$
CREATE OR REPLACE FUNCTION pg_catalog.pg_has_role(oid, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$pg_has_role_id$function$
]]></string>
			<comment><![CDATA[user privilege on role by username, role name]]></comment>
		</function>
		<function name="pg_has_role_001" id="Function_1d957603" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_has_role(name, name, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$pg_has_role_name_name$function$
CREATE OR REPLACE FUNCTION pg_catalog.pg_has_role(name, oid, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$pg_has_role_name_id$function$
CREATE OR REPLACE FUNCTION pg_catalog.pg_has_role(oid, name, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$pg_has_role_id_name$function$
CREATE OR REPLACE FUNCTION pg_catalog.pg_has_role(oid, oid, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$pg_has_role_id_id$function$
CREATE OR REPLACE FUNCTION pg_catalog.pg_has_role(name, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$pg_has_role_name$function$
CREATE OR REPLACE FUNCTION pg_catalog.pg_has_role(oid, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$pg_has_role_id$function$
]]></string>
			<comment><![CDATA[user privilege on role by username, role name]]></comment>
		</function>
		<function name="pg_has_role_002" id="Function_1825e050" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_has_role(name, name, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$pg_has_role_name_name$function$
CREATE OR REPLACE FUNCTION pg_catalog.pg_has_role(name, oid, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$pg_has_role_name_id$function$
CREATE OR REPLACE FUNCTION pg_catalog.pg_has_role(oid, name, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$pg_has_role_id_name$function$
CREATE OR REPLACE FUNCTION pg_catalog.pg_has_role(oid, oid, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$pg_has_role_id_id$function$
CREATE OR REPLACE FUNCTION pg_catalog.pg_has_role(name, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$pg_has_role_name$function$
CREATE OR REPLACE FUNCTION pg_catalog.pg_has_role(oid, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$pg_has_role_id$function$
]]></string>
			<comment><![CDATA[user privilege on role by username, role name]]></comment>
		</function>
		<function name="pg_has_role_003" id="Function_aca95f7" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_has_role(name, name, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$pg_has_role_name_name$function$
CREATE OR REPLACE FUNCTION pg_catalog.pg_has_role(name, oid, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$pg_has_role_name_id$function$
CREATE OR REPLACE FUNCTION pg_catalog.pg_has_role(oid, name, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$pg_has_role_id_name$function$
CREATE OR REPLACE FUNCTION pg_catalog.pg_has_role(oid, oid, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$pg_has_role_id_id$function$
CREATE OR REPLACE FUNCTION pg_catalog.pg_has_role(name, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$pg_has_role_name$function$
CREATE OR REPLACE FUNCTION pg_catalog.pg_has_role(oid, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$pg_has_role_id$function$
]]></string>
			<comment><![CDATA[user privilege on role by username, role name]]></comment>
		</function>
		<function name="pg_has_role_004" id="Function_3afe9c2b" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_has_role(name, name, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$pg_has_role_name_name$function$
CREATE OR REPLACE FUNCTION pg_catalog.pg_has_role(name, oid, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$pg_has_role_name_id$function$
CREATE OR REPLACE FUNCTION pg_catalog.pg_has_role(oid, name, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$pg_has_role_id_name$function$
CREATE OR REPLACE FUNCTION pg_catalog.pg_has_role(oid, oid, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$pg_has_role_id_id$function$
CREATE OR REPLACE FUNCTION pg_catalog.pg_has_role(name, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$pg_has_role_name$function$
CREATE OR REPLACE FUNCTION pg_catalog.pg_has_role(oid, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$pg_has_role_id$function$
]]></string>
			<comment><![CDATA[user privilege on role by username, role name]]></comment>
		</function>
		<function name="pg_has_role_005" id="Function_38b0f68e" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_has_role(name, name, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$pg_has_role_name_name$function$
CREATE OR REPLACE FUNCTION pg_catalog.pg_has_role(name, oid, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$pg_has_role_name_id$function$
CREATE OR REPLACE FUNCTION pg_catalog.pg_has_role(oid, name, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$pg_has_role_id_name$function$
CREATE OR REPLACE FUNCTION pg_catalog.pg_has_role(oid, oid, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$pg_has_role_id_id$function$
CREATE OR REPLACE FUNCTION pg_catalog.pg_has_role(name, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$pg_has_role_name$function$
CREATE OR REPLACE FUNCTION pg_catalog.pg_has_role(oid, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$pg_has_role_id$function$
]]></string>
			<comment><![CDATA[user privilege on role by username, role name]]></comment>
		</function>
		<function name="pg_identify_object" id="Function_2ef8ca4a" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_identify_object(classid oid, objid oid, subobjid integer, OUT type text, OUT schema text, OUT name text, OUT identity text)
 RETURNS record
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$pg_identify_object$function$
]]></string>
			<comment><![CDATA[get machine-parseable identification of SQL object]]></comment>
		</function>
		<function name="pg_identify_object_as_address" id="Function_14858f66" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_identify_object_as_address(classid oid, objid oid, subobjid integer, OUT type text, OUT object_names text[], OUT object_args text[])
 RETURNS record
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$pg_identify_object_as_address$function$
]]></string>
			<comment><![CDATA[get identification of SQL object for pg_get_object_address()]]></comment>
		</function>
		<function name="pg_index_column_has_property" id="Function_37a41699" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_index_column_has_property(regclass, integer, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$pg_index_column_has_property$function$
]]></string>
			<comment><![CDATA[test property of an index column]]></comment>
		</function>
		<function name="pg_index_has_property" id="Function_1be2ddbc" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_index_has_property(regclass, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$pg_index_has_property$function$
]]></string>
			<comment><![CDATA[test property of an index]]></comment>
		</function>
		<function name="pg_indexam_has_property" id="Function_307dc9c8" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_indexam_has_property(oid, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$pg_indexam_has_property$function$
]]></string>
			<comment><![CDATA[test property of an index access method]]></comment>
		</function>
		<function name="pg_indexes_size" id="Function_22a84831" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_indexes_size(regclass)
 RETURNS bigint
 LANGUAGE internal
 PARALLEL SAFE STRICT
AS $function$pg_indexes_size$function$
]]></string>
			<comment><![CDATA[disk space usage for all indexes attached to the specified table]]></comment>
		</function>
		<function name="pg_is_in_backup" id="Function_ce8286e" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_is_in_backup()
 RETURNS boolean
 LANGUAGE internal
 PARALLEL SAFE STRICT
AS $function$pg_is_in_backup$function$
]]></string>
			<comment><![CDATA[true if server is in online backup]]></comment>
		</function>
		<function name="pg_is_in_recovery" id="Function_2ecaae28" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_is_in_recovery()
 RETURNS boolean
 LANGUAGE internal
 PARALLEL SAFE STRICT
AS $function$pg_is_in_recovery$function$
]]></string>
			<comment><![CDATA[true if server is in recovery]]></comment>
		</function>
		<function name="pg_is_other_temp_schema" id="Function_2ef86589" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_is_other_temp_schema(oid)
 RETURNS boolean
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$pg_is_other_temp_schema$function$
]]></string>
			<comment><![CDATA[is schema another session's temp schema?]]></comment>
		</function>
		<function name="pg_is_xlog_replay_paused" id="Function_a1c3e23" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_is_xlog_replay_paused()
 RETURNS boolean
 LANGUAGE internal
 PARALLEL SAFE STRICT
AS $function$pg_is_xlog_replay_paused$function$
]]></string>
			<comment><![CDATA[true if xlog replay is paused]]></comment>
		</function>
		<function name="pg_last_committed_xact" id="Function_2ace3bf1" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_last_committed_xact(OUT xid xid, OUT "timestamp" timestamp with time zone)
 RETURNS record
 LANGUAGE internal
 PARALLEL SAFE STRICT
AS $function$pg_last_committed_xact$function$
]]></string>
			<comment><![CDATA[get transaction Id and commit timestamp of latest transaction commit]]></comment>
		</function>
		<function name="pg_last_xact_replay_timestamp" id="Function_316d10a8" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_last_xact_replay_timestamp()
 RETURNS timestamp with time zone
 LANGUAGE internal
 PARALLEL SAFE STRICT
AS $function$pg_last_xact_replay_timestamp$function$
]]></string>
			<comment><![CDATA[timestamp of last replay xact]]></comment>
		</function>
		<function name="pg_last_xlog_receive_location" id="Function_a3cee76" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_last_xlog_receive_location()
 RETURNS pg_lsn
 LANGUAGE internal
 PARALLEL SAFE STRICT
AS $function$pg_last_xlog_receive_location$function$
]]></string>
			<comment><![CDATA[current xlog flush location]]></comment>
		</function>
		<function name="pg_last_xlog_replay_location" id="Function_31041e" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_last_xlog_replay_location()
 RETURNS pg_lsn
 LANGUAGE internal
 PARALLEL SAFE STRICT
AS $function$pg_last_xlog_replay_location$function$
]]></string>
			<comment><![CDATA[last xlog replay location]]></comment>
		</function>
		<function name="pg_listening_channels" id="Function_2172618d" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_listening_channels()
 RETURNS SETOF text
 LANGUAGE internal
 STABLE PARALLEL RESTRICTED STRICT ROWS 10
AS $function$pg_listening_channels$function$
]]></string>
			<comment><![CDATA[get the channels that the current backend listens to]]></comment>
		</function>
		<function name="pg_lock_status" id="Function_d849b6e" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_lock_status(OUT locktype text, OUT database oid, OUT relation oid, OUT page integer, OUT tuple smallint, OUT virtualxid text, OUT transactionid xid, OUT classid oid, OUT objid oid, OUT objsubid smallint, OUT virtualtransaction text, OUT pid integer, OUT mode text, OUT granted boolean, OUT fastpath boolean)
 RETURNS SETOF record
 LANGUAGE internal
 PARALLEL SAFE STRICT
AS $function$pg_lock_status$function$
]]></string>
			<comment><![CDATA[view system lock information]]></comment>
		</function>
		<function name="pg_logical_emit_message" id="Function_8b0d26" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_logical_emit_message(boolean, text, bytea)
 RETURNS pg_lsn
 LANGUAGE internal
 STRICT
AS $function$pg_logical_emit_message_bytea$function$
CREATE OR REPLACE FUNCTION pg_catalog.pg_logical_emit_message(boolean, text, text)
 RETURNS pg_lsn
 LANGUAGE internal
 STRICT
AS $function$pg_logical_emit_message_text$function$
]]></string>
			<comment><![CDATA[emit a textual logical decoding message]]></comment>
		</function>
		<function name="pg_logical_emit_message_001" id="Function_25fc5509" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_logical_emit_message(boolean, text, bytea)
 RETURNS pg_lsn
 LANGUAGE internal
 STRICT
AS $function$pg_logical_emit_message_bytea$function$
CREATE OR REPLACE FUNCTION pg_catalog.pg_logical_emit_message(boolean, text, text)
 RETURNS pg_lsn
 LANGUAGE internal
 STRICT
AS $function$pg_logical_emit_message_text$function$
]]></string>
			<comment><![CDATA[emit a textual logical decoding message]]></comment>
		</function>
		<function name="pg_logical_slot_get_binary_changes" id="Function_1f3c71f" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_logical_slot_get_binary_changes(slot_name name, upto_lsn pg_lsn, upto_nchanges integer, VARIADIC options text[] DEFAULT '{}'::text[], OUT location pg_lsn, OUT xid xid, OUT data bytea)
 RETURNS SETOF record
 LANGUAGE internal
 COST 1000
AS $function$pg_logical_slot_get_binary_changes$function$
]]></string>
			<comment><![CDATA[get binary changes from replication slot]]></comment>
		</function>
		<function name="pg_logical_slot_get_changes" id="Function_1caa189d" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_logical_slot_get_changes(slot_name name, upto_lsn pg_lsn, upto_nchanges integer, VARIADIC options text[] DEFAULT '{}'::text[], OUT location pg_lsn, OUT xid xid, OUT data text)
 RETURNS SETOF record
 LANGUAGE internal
 COST 1000
AS $function$pg_logical_slot_get_changes$function$
]]></string>
			<comment><![CDATA[get changes from replication slot]]></comment>
		</function>
		<function name="pg_logical_slot_peek_binary_changes" id="Function_1386967c" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_logical_slot_peek_binary_changes(slot_name name, upto_lsn pg_lsn, upto_nchanges integer, VARIADIC options text[] DEFAULT '{}'::text[], OUT location pg_lsn, OUT xid xid, OUT data bytea)
 RETURNS SETOF record
 LANGUAGE internal
 COST 1000
AS $function$pg_logical_slot_peek_binary_changes$function$
]]></string>
			<comment><![CDATA[peek at binary changes from replication slot]]></comment>
		</function>
		<function name="pg_logical_slot_peek_changes" id="Function_273ad79d" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_logical_slot_peek_changes(slot_name name, upto_lsn pg_lsn, upto_nchanges integer, VARIADIC options text[] DEFAULT '{}'::text[], OUT location pg_lsn, OUT xid xid, OUT data text)
 RETURNS SETOF record
 LANGUAGE internal
 COST 1000
AS $function$pg_logical_slot_peek_changes$function$
]]></string>
			<comment><![CDATA[peek at changes from replication slot]]></comment>
		</function>
		<function name="pg_ls_dir" id="Function_1b04f08a" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_ls_dir(text)
 RETURNS SETOF text
 LANGUAGE internal
 PARALLEL SAFE STRICT
AS $function$pg_ls_dir_1arg$function$
CREATE OR REPLACE FUNCTION pg_catalog.pg_ls_dir(text, boolean, boolean)
 RETURNS SETOF text
 LANGUAGE internal
 PARALLEL SAFE STRICT
AS $function$pg_ls_dir$function$
]]></string>
			<comment><![CDATA[list all files in a directory]]></comment>
		</function>
		<function name="pg_ls_dir_001" id="Function_376bc1e0" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_ls_dir(text)
 RETURNS SETOF text
 LANGUAGE internal
 PARALLEL SAFE STRICT
AS $function$pg_ls_dir_1arg$function$
CREATE OR REPLACE FUNCTION pg_catalog.pg_ls_dir(text, boolean, boolean)
 RETURNS SETOF text
 LANGUAGE internal
 PARALLEL SAFE STRICT
AS $function$pg_ls_dir$function$
]]></string>
			<comment><![CDATA[list all files in a directory]]></comment>
		</function>
		<function name="pg_lsn_cmp" id="Function_3b9ccc5" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_lsn_cmp(pg_lsn, pg_lsn)
 RETURNS integer
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$pg_lsn_cmp$function$
]]></string>
			<comment><![CDATA[less-equal-greater]]></comment>
		</function>
		<function name="pg_lsn_eq" id="Function_13cc8063" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_lsn_eq(pg_lsn, pg_lsn)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$pg_lsn_eq$function$
]]></string>
			<comment><![CDATA[implementation of = operator]]></comment>
		</function>
		<function name="pg_lsn_ge" id="Function_378ff712" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_lsn_ge(pg_lsn, pg_lsn)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$pg_lsn_ge$function$
]]></string>
			<comment><![CDATA[implementation of >= operator]]></comment>
		</function>
		<function name="pg_lsn_gt" id="Function_218c46be" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_lsn_gt(pg_lsn, pg_lsn)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$pg_lsn_gt$function$
]]></string>
			<comment><![CDATA[implementation of > operator]]></comment>
		</function>
		<function name="pg_lsn_hash" id="Function_2ab0c7a4" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_lsn_hash(pg_lsn)
 RETURNS integer
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$pg_lsn_hash$function$
]]></string>
			<comment><![CDATA[hash]]></comment>
		</function>
		<function name="pg_lsn_in" id="Function_13c2f35b" isSystem="false" >
			<comment><![CDATA[I/O]]></comment>
		</function>
		<function name="pg_lsn_le" id="Function_14ffde4e" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_lsn_le(pg_lsn, pg_lsn)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$pg_lsn_le$function$
]]></string>
			<comment><![CDATA[implementation of <= operator]]></comment>
		</function>
		<function name="pg_lsn_lt" id="Function_246c0a68" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_lsn_lt(pg_lsn, pg_lsn)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$pg_lsn_lt$function$
]]></string>
			<comment><![CDATA[implementation of < operator]]></comment>
		</function>
		<function name="pg_lsn_mi" id="Function_e33a78c" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_lsn_mi(pg_lsn, pg_lsn)
 RETURNS numeric
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$pg_lsn_mi$function$
]]></string>
			<comment><![CDATA[implementation of - operator]]></comment>
		</function>
		<function name="pg_lsn_ne" id="Function_214fc14a" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_lsn_ne(pg_lsn, pg_lsn)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$pg_lsn_ne$function$
]]></string>
			<comment><![CDATA[implementation of <> operator]]></comment>
		</function>
		<function name="pg_lsn_out" id="Function_332a8c12" isSystem="false" >
			<comment><![CDATA[I/O]]></comment>
		</function>
		<function name="pg_lsn_recv" id="Function_178ae027" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_lsn_recv(internal)
 RETURNS pg_lsn
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$pg_lsn_recv$function$
]]></string>
			<comment><![CDATA[I/O]]></comment>
		</function>
		<function name="pg_lsn_send" id="Function_26e6fbb" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_lsn_send(pg_lsn)
 RETURNS bytea
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$pg_lsn_send$function$
]]></string>
			<comment><![CDATA[I/O]]></comment>
		</function>
		<function name="pg_my_temp_schema" id="Function_9bdc990" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_my_temp_schema()
 RETURNS oid
 LANGUAGE internal
 STABLE PARALLEL RESTRICTED STRICT
AS $function$pg_my_temp_schema$function$
]]></string>
			<comment><![CDATA[get OID of current session's temp schema, if any]]></comment>
		</function>
		<function name="pg_node_tree_in" id="Function_1235a52" isSystem="false" >
			<comment><![CDATA[I/O]]></comment>
		</function>
		<function name="pg_node_tree_out" id="Function_1ed3021a" isSystem="false" >
			<comment><![CDATA[I/O]]></comment>
		</function>
		<function name="pg_node_tree_recv" id="Function_2b348db1" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_node_tree_recv(internal)
 RETURNS pg_node_tree
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$pg_node_tree_recv$function$
]]></string>
			<comment><![CDATA[I/O]]></comment>
		</function>
		<function name="pg_node_tree_send" id="Function_28a43119" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_node_tree_send(pg_node_tree)
 RETURNS bytea
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$pg_node_tree_send$function$
]]></string>
			<comment><![CDATA[I/O]]></comment>
		</function>
		<function name="pg_notification_queue_usage" id="Function_2db488db" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_notification_queue_usage()
 RETURNS double precision
 LANGUAGE internal
 PARALLEL SAFE STRICT
AS $function$pg_notification_queue_usage$function$
]]></string>
			<comment><![CDATA[get the fraction of the asynchronous notification queue currently in use]]></comment>
		</function>
		<function name="pg_notify" id="Function_32c1f4f" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_notify(text, text)
 RETURNS void
 LANGUAGE internal
 PARALLEL RESTRICTED
AS $function$pg_notify$function$
]]></string>
			<comment><![CDATA[send a notification event]]></comment>
		</function>
		<function name="pg_opclass_is_visible" id="Function_15f30d67" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_opclass_is_visible(oid)
 RETURNS boolean
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT COST 10
AS $function$pg_opclass_is_visible$function$
]]></string>
			<comment><![CDATA[is opclass visible in search path?]]></comment>
		</function>
		<function name="pg_operator_is_visible" id="Function_1b6cb666" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_operator_is_visible(oid)
 RETURNS boolean
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT COST 10
AS $function$pg_operator_is_visible$function$
]]></string>
			<comment><![CDATA[is operator visible in search path?]]></comment>
		</function>
		<function name="pg_opfamily_is_visible" id="Function_7a43ede" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_opfamily_is_visible(oid)
 RETURNS boolean
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT COST 10
AS $function$pg_opfamily_is_visible$function$
]]></string>
			<comment><![CDATA[is opfamily visible in search path?]]></comment>
		</function>
		<function name="pg_options_to_table" id="Function_3ad73526" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_options_to_table(options_array text[], OUT option_name text, OUT option_value text)
 RETURNS SETOF record
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT ROWS 3
AS $function$pg_options_to_table$function$
]]></string>
			<comment><![CDATA[convert generic options array to name/value table]]></comment>
		</function>
		<function name="pg_postmaster_start_time" id="Function_32839644" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_postmaster_start_time()
 RETURNS timestamp with time zone
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$pg_postmaster_start_time$function$
]]></string>
			<comment><![CDATA[postmaster start time]]></comment>
		</function>
		<function name="pg_prepared_statement" id="Function_175d9bdd" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_prepared_statement(OUT name text, OUT statement text, OUT prepare_time timestamp with time zone, OUT parameter_types regtype[], OUT from_sql boolean)
 RETURNS SETOF record
 LANGUAGE internal
 STABLE PARALLEL RESTRICTED STRICT
AS $function$pg_prepared_statement$function$
]]></string>
			<comment><![CDATA[get the prepared statements for this session]]></comment>
		</function>
		<function name="pg_prepared_xact" id="Function_30cb5dc9" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_prepared_xact(OUT transaction xid, OUT gid text, OUT prepared timestamp with time zone, OUT ownerid oid, OUT dbid oid)
 RETURNS SETOF record
 LANGUAGE internal
 PARALLEL SAFE STRICT
AS $function$pg_prepared_xact$function$
]]></string>
			<comment><![CDATA[view two-phase transactions]]></comment>
		</function>
		<function name="pg_read_binary_file" id="Function_f73b9bf" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_read_binary_file(text)
 RETURNS bytea
 LANGUAGE internal
 PARALLEL SAFE STRICT
AS $function$pg_read_binary_file_all$function$
CREATE OR REPLACE FUNCTION pg_catalog.pg_read_binary_file(text, bigint, bigint)
 RETURNS bytea
 LANGUAGE internal
 PARALLEL SAFE STRICT
AS $function$pg_read_binary_file_off_len$function$
CREATE OR REPLACE FUNCTION pg_catalog.pg_read_binary_file(text, bigint, bigint, boolean)
 RETURNS bytea
 LANGUAGE internal
 PARALLEL SAFE STRICT
AS $function$pg_read_binary_file$function$
]]></string>
			<comment><![CDATA[read bytea from a file]]></comment>
		</function>
		<function name="pg_read_binary_file_001" id="Function_36a5b176" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_read_binary_file(text)
 RETURNS bytea
 LANGUAGE internal
 PARALLEL SAFE STRICT
AS $function$pg_read_binary_file_all$function$
CREATE OR REPLACE FUNCTION pg_catalog.pg_read_binary_file(text, bigint, bigint)
 RETURNS bytea
 LANGUAGE internal
 PARALLEL SAFE STRICT
AS $function$pg_read_binary_file_off_len$function$
CREATE OR REPLACE FUNCTION pg_catalog.pg_read_binary_file(text, bigint, bigint, boolean)
 RETURNS bytea
 LANGUAGE internal
 PARALLEL SAFE STRICT
AS $function$pg_read_binary_file$function$
]]></string>
			<comment><![CDATA[read bytea from a file]]></comment>
		</function>
		<function name="pg_read_binary_file_002" id="Function_223b2fbd" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_read_binary_file(text)
 RETURNS bytea
 LANGUAGE internal
 PARALLEL SAFE STRICT
AS $function$pg_read_binary_file_all$function$
CREATE OR REPLACE FUNCTION pg_catalog.pg_read_binary_file(text, bigint, bigint)
 RETURNS bytea
 LANGUAGE internal
 PARALLEL SAFE STRICT
AS $function$pg_read_binary_file_off_len$function$
CREATE OR REPLACE FUNCTION pg_catalog.pg_read_binary_file(text, bigint, bigint, boolean)
 RETURNS bytea
 LANGUAGE internal
 PARALLEL SAFE STRICT
AS $function$pg_read_binary_file$function$
]]></string>
			<comment><![CDATA[read bytea from a file]]></comment>
		</function>
		<function name="pg_read_file" id="Function_1000cb5" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_read_file(text)
 RETURNS text
 LANGUAGE internal
 PARALLEL SAFE STRICT
AS $function$pg_read_file_all$function$
CREATE OR REPLACE FUNCTION pg_catalog.pg_read_file(text, bigint, bigint)
 RETURNS text
 LANGUAGE internal
 PARALLEL SAFE STRICT
AS $function$pg_read_file_off_len$function$
CREATE OR REPLACE FUNCTION pg_catalog.pg_read_file(text, bigint, bigint, boolean)
 RETURNS text
 LANGUAGE internal
 PARALLEL SAFE STRICT
AS $function$pg_read_file$function$
]]></string>
			<comment><![CDATA[read text from a file]]></comment>
		</function>
		<function name="pg_read_file_001" id="Function_282e64f" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_read_file(text)
 RETURNS text
 LANGUAGE internal
 PARALLEL SAFE STRICT
AS $function$pg_read_file_all$function$
CREATE OR REPLACE FUNCTION pg_catalog.pg_read_file(text, bigint, bigint)
 RETURNS text
 LANGUAGE internal
 PARALLEL SAFE STRICT
AS $function$pg_read_file_off_len$function$
CREATE OR REPLACE FUNCTION pg_catalog.pg_read_file(text, bigint, bigint, boolean)
 RETURNS text
 LANGUAGE internal
 PARALLEL SAFE STRICT
AS $function$pg_read_file$function$
]]></string>
			<comment><![CDATA[read text from a file]]></comment>
		</function>
		<function name="pg_read_file_002" id="Function_20b40efa" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_read_file(text)
 RETURNS text
 LANGUAGE internal
 PARALLEL SAFE STRICT
AS $function$pg_read_file_all$function$
CREATE OR REPLACE FUNCTION pg_catalog.pg_read_file(text, bigint, bigint)
 RETURNS text
 LANGUAGE internal
 PARALLEL SAFE STRICT
AS $function$pg_read_file_off_len$function$
CREATE OR REPLACE FUNCTION pg_catalog.pg_read_file(text, bigint, bigint, boolean)
 RETURNS text
 LANGUAGE internal
 PARALLEL SAFE STRICT
AS $function$pg_read_file$function$
]]></string>
			<comment><![CDATA[read text from a file]]></comment>
		</function>
		<function name="pg_relation_filenode" id="Function_c699aee" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_relation_filenode(regclass)
 RETURNS oid
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$pg_relation_filenode$function$
]]></string>
			<comment><![CDATA[filenode identifier of relation]]></comment>
		</function>
		<function name="pg_relation_filepath" id="Function_85c839d" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_relation_filepath(regclass)
 RETURNS text
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$pg_relation_filepath$function$
]]></string>
			<comment><![CDATA[file path of relation]]></comment>
		</function>
		<function name="pg_relation_is_updatable" id="Function_1141f600" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_relation_is_updatable(regclass, boolean)
 RETURNS integer
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT COST 10
AS $function$pg_relation_is_updatable$function$
]]></string>
			<comment><![CDATA[is a relation insertable/updatable/deletable]]></comment>
		</function>
		<function name="pg_relation_size" id="Function_8e1db62" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_relation_size(regclass)
 RETURNS bigint
 LANGUAGE sql
 PARALLEL SAFE STRICT COST 1
AS $function$select pg_catalog.pg_relation_size($1, 'main')$function$
CREATE OR REPLACE FUNCTION pg_catalog.pg_relation_size(regclass, text)
 RETURNS bigint
 LANGUAGE internal
 PARALLEL SAFE STRICT
AS $function$pg_relation_size$function$
]]></string>
			<comment><![CDATA[disk space usage for the main fork of the specified table or index]]></comment>
		</function>
		<function name="pg_relation_size_001" id="Function_212f036" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_relation_size(regclass)
 RETURNS bigint
 LANGUAGE sql
 PARALLEL SAFE STRICT COST 1
AS $function$select pg_catalog.pg_relation_size($1, 'main')$function$
CREATE OR REPLACE FUNCTION pg_catalog.pg_relation_size(regclass, text)
 RETURNS bigint
 LANGUAGE internal
 PARALLEL SAFE STRICT
AS $function$pg_relation_size$function$
]]></string>
			<comment><![CDATA[disk space usage for the main fork of the specified table or index]]></comment>
		</function>
		<function name="pg_reload_conf" id="Function_2fb30bcc" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_reload_conf()
 RETURNS boolean
 LANGUAGE internal
 PARALLEL SAFE STRICT
AS $function$pg_reload_conf$function$
]]></string>
			<comment><![CDATA[reload configuration files]]></comment>
		</function>
		<function name="pg_replication_origin_advance" id="Function_1d723407" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_replication_origin_advance(text, pg_lsn)
 RETURNS void
 LANGUAGE internal
 STRICT
AS $function$pg_replication_origin_advance$function$
]]></string>
			<comment><![CDATA[advance replication itentifier to specific location]]></comment>
		</function>
		<function name="pg_replication_origin_create" id="Function_1d421d7e" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_replication_origin_create(text)
 RETURNS oid
 LANGUAGE internal
 STRICT
AS $function$pg_replication_origin_create$function$
]]></string>
			<comment><![CDATA[create a replication origin]]></comment>
		</function>
		<function name="pg_replication_origin_drop" id="Function_69d9905" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_replication_origin_drop(text)
 RETURNS void
 LANGUAGE internal
 STRICT
AS $function$pg_replication_origin_drop$function$
]]></string>
			<comment><![CDATA[drop replication origin identified by its name]]></comment>
		</function>
		<function name="pg_replication_origin_oid" id="Function_8dc204f" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_replication_origin_oid(text)
 RETURNS oid
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$pg_replication_origin_oid$function$
]]></string>
			<comment><![CDATA[translate the replication origin's name to its id]]></comment>
		</function>
		<function name="pg_replication_origin_progress" id="Function_2ef04add" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_replication_origin_progress(text, boolean)
 RETURNS pg_lsn
 LANGUAGE internal
 STRICT
AS $function$pg_replication_origin_progress$function$
]]></string>
			<comment><![CDATA[get an individual replication origin's replication progress]]></comment>
		</function>
		<function name="pg_replication_origin_session_is_setup" id="Function_33e5369f" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_replication_origin_session_is_setup()
 RETURNS boolean
 LANGUAGE internal
 PARALLEL RESTRICTED STRICT
AS $function$pg_replication_origin_session_is_setup$function$
]]></string>
			<comment><![CDATA[is a replication origin configured in this session]]></comment>
		</function>
		<function name="pg_replication_origin_session_progress" id="Function_32234fd6" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_replication_origin_session_progress(boolean)
 RETURNS pg_lsn
 LANGUAGE internal
 STRICT
AS $function$pg_replication_origin_session_progress$function$
]]></string>
			<comment><![CDATA[get the replication progress of the current session]]></comment>
		</function>
		<function name="pg_replication_origin_session_reset" id="Function_32a4d7d6" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_replication_origin_session_reset()
 RETURNS void
 LANGUAGE internal
 STRICT
AS $function$pg_replication_origin_session_reset$function$
]]></string>
			<comment><![CDATA[teardown configured replication progress tracking]]></comment>
		</function>
		<function name="pg_replication_origin_session_setup" id="Function_1878e585" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_replication_origin_session_setup(text)
 RETURNS void
 LANGUAGE internal
 STRICT
AS $function$pg_replication_origin_session_setup$function$
]]></string>
			<comment><![CDATA[configure session to maintain replication progress tracking for the passed in origin]]></comment>
		</function>
		<function name="pg_replication_origin_xact_reset" id="Function_4b18d26" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_replication_origin_xact_reset()
 RETURNS void
 LANGUAGE internal
 PARALLEL RESTRICTED STRICT
AS $function$pg_replication_origin_xact_reset$function$
]]></string>
			<comment><![CDATA[reset the transaction's origin lsn and timestamp]]></comment>
		</function>
		<function name="pg_replication_origin_xact_setup" id="Function_ab604fb" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_replication_origin_xact_setup(pg_lsn, timestamp with time zone)
 RETURNS void
 LANGUAGE internal
 PARALLEL RESTRICTED STRICT
AS $function$pg_replication_origin_xact_setup$function$
]]></string>
			<comment><![CDATA[setup the transaction's origin lsn and timestamp]]></comment>
		</function>
		<function name="pg_rotate_logfile" id="Function_38356dd1" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_rotate_logfile()
 RETURNS boolean
 LANGUAGE internal
 PARALLEL SAFE STRICT
AS $function$pg_rotate_logfile$function$
]]></string>
			<comment><![CDATA[rotate log file]]></comment>
		</function>
		<function name="pg_sequence_parameters" id="Function_55e857" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_sequence_parameters(sequence_oid oid, OUT start_value bigint, OUT minimum_value bigint, OUT maximum_value bigint, OUT increment bigint, OUT cycle_option boolean)
 RETURNS record
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$pg_sequence_parameters$function$
]]></string>
			<comment><![CDATA[sequence parameters, for use by information schema]]></comment>
		</function>
		<function name="pg_show_all_file_settings" id="Function_dfe5665" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_show_all_file_settings(OUT sourcefile text, OUT sourceline integer, OUT seqno integer, OUT name text, OUT setting text, OUT applied boolean, OUT error text)
 RETURNS SETOF record
 LANGUAGE internal
 PARALLEL SAFE STRICT
AS $function$show_all_file_settings$function$
]]></string>
			<comment><![CDATA[show config file settings]]></comment>
		</function>
		<function name="pg_show_all_settings" id="Function_3b7b20b5" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_show_all_settings(OUT name text, OUT setting text, OUT unit text, OUT category text, OUT short_desc text, OUT extra_desc text, OUT context text, OUT vartype text, OUT source text, OUT min_val text, OUT max_val text, OUT enumvals text[], OUT boot_val text, OUT reset_val text, OUT sourcefile text, OUT sourceline integer, OUT pending_restart boolean)
 RETURNS SETOF record
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$show_all_settings$function$
]]></string>
			<comment><![CDATA[SHOW ALL as a function]]></comment>
		</function>
		<function name="pg_show_replication_origin_status" id="Function_d4b8033" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_show_replication_origin_status(OUT local_id oid, OUT external_id text, OUT remote_lsn pg_lsn, OUT local_lsn pg_lsn)
 RETURNS SETOF record
 LANGUAGE internal
 PARALLEL RESTRICTED ROWS 100
AS $function$pg_show_replication_origin_status$function$
]]></string>
			<comment><![CDATA[get progress for all replication origins]]></comment>
		</function>
		<function name="pg_size_bytes" id="Function_392548d7" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_size_bytes(text)
 RETURNS bigint
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$pg_size_bytes$function$
]]></string>
			<comment><![CDATA[convert a size in human-readable format with size units into bytes]]></comment>
		</function>
		<function name="pg_size_pretty" id="Function_2bc3ba8d" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_size_pretty(bigint)
 RETURNS text
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$pg_size_pretty$function$
CREATE OR REPLACE FUNCTION pg_catalog.pg_size_pretty(numeric)
 RETURNS text
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$pg_size_pretty_numeric$function$
]]></string>
			<comment><![CDATA[convert a long int to a human readable text using size units]]></comment>
		</function>
		<function name="pg_size_pretty_001" id="Function_10fd9847" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_size_pretty(bigint)
 RETURNS text
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$pg_size_pretty$function$
CREATE OR REPLACE FUNCTION pg_catalog.pg_size_pretty(numeric)
 RETURNS text
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$pg_size_pretty_numeric$function$
]]></string>
			<comment><![CDATA[convert a long int to a human readable text using size units]]></comment>
		</function>
		<function name="pg_sleep" id="Function_fb360b0" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_sleep(double precision)
 RETURNS void
 LANGUAGE internal
 PARALLEL SAFE STRICT
AS $function$pg_sleep$function$
]]></string>
			<comment><![CDATA[sleep for the specified time in seconds]]></comment>
		</function>
		<function name="pg_sleep_for" id="Function_38aa85a4" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_sleep_for(interval)
 RETURNS void
 LANGUAGE sql
 PARALLEL SAFE STRICT COST 1
AS $function$select pg_catalog.pg_sleep(extract(epoch from pg_catalog.clock_timestamp() operator(pg_catalog.+) $1) operator(pg_catalog.-) extract(epoch from pg_catalog.clock_timestamp()))$function$
]]></string>
			<comment><![CDATA[sleep for the specified interval]]></comment>
		</function>
		<function name="pg_sleep_until" id="Function_9147308" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_sleep_until(timestamp with time zone)
 RETURNS void
 LANGUAGE sql
 PARALLEL SAFE STRICT COST 1
AS $function$select pg_catalog.pg_sleep(extract(epoch from $1) operator(pg_catalog.-) extract(epoch from pg_catalog.clock_timestamp()))$function$
]]></string>
			<comment><![CDATA[sleep until the specified time]]></comment>
		</function>
		<function name="pg_start_backup" id="Function_3072790f" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_start_backup(label text, fast boolean DEFAULT false, exclusive boolean DEFAULT true)
 RETURNS pg_lsn
 LANGUAGE internal
 PARALLEL RESTRICTED STRICT
AS $function$pg_start_backup$function$
]]></string>
			<comment><![CDATA[prepare for taking an online backup]]></comment>
		</function>
		<function name="pg_stat_clear_snapshot" id="Function_37bc4235" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_stat_clear_snapshot()
 RETURNS void
 LANGUAGE internal
 PARALLEL RESTRICTED
AS $function$pg_stat_clear_snapshot$function$
]]></string>
			<comment><![CDATA[statistics: discard current transaction's statistics snapshot]]></comment>
		</function>
		<function name="pg_stat_file" id="Function_179fb5c6" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_stat_file(filename text, OUT size bigint, OUT access timestamp with time zone, OUT modification timestamp with time zone, OUT change timestamp with time zone, OUT creation timestamp with time zone, OUT isdir boolean)
 RETURNS record
 LANGUAGE internal
 PARALLEL SAFE STRICT
AS $function$pg_stat_file_1arg$function$
CREATE OR REPLACE FUNCTION pg_catalog.pg_stat_file(filename text, missing_ok boolean, OUT size bigint, OUT access timestamp with time zone, OUT modification timestamp with time zone, OUT change timestamp with time zone, OUT creation timestamp with time zone, OUT isdir boolean)
 RETURNS record
 LANGUAGE internal
 PARALLEL SAFE STRICT
AS $function$pg_stat_file$function$
]]></string>
			<comment><![CDATA[get information about file]]></comment>
		</function>
		<function name="pg_stat_file_001" id="Function_794465f" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_stat_file(filename text, OUT size bigint, OUT access timestamp with time zone, OUT modification timestamp with time zone, OUT change timestamp with time zone, OUT creation timestamp with time zone, OUT isdir boolean)
 RETURNS record
 LANGUAGE internal
 PARALLEL SAFE STRICT
AS $function$pg_stat_file_1arg$function$
CREATE OR REPLACE FUNCTION pg_catalog.pg_stat_file(filename text, missing_ok boolean, OUT size bigint, OUT access timestamp with time zone, OUT modification timestamp with time zone, OUT change timestamp with time zone, OUT creation timestamp with time zone, OUT isdir boolean)
 RETURNS record
 LANGUAGE internal
 PARALLEL SAFE STRICT
AS $function$pg_stat_file$function$
]]></string>
			<comment><![CDATA[get information about file]]></comment>
		</function>
		<function name="pg_stat_get_activity" id="Function_1c9f71ac" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_stat_get_activity(pid integer, OUT datid oid, OUT pid integer, OUT usesysid oid, OUT application_name text, OUT state text, OUT query text, OUT wait_event_type text, OUT wait_event text, OUT xact_start timestamp with time zone, OUT query_start timestamp with time zone, OUT backend_start timestamp with time zone, OUT state_change timestamp with time zone, OUT client_addr inet, OUT client_hostname text, OUT client_port integer, OUT backend_xid xid, OUT backend_xmin xid, OUT ssl boolean, OUT sslversion text, OUT sslcipher text, OUT sslbits integer, OUT sslcompression boolean, OUT sslclientdn text)
 RETURNS SETOF record
 LANGUAGE internal
 STABLE PARALLEL RESTRICTED ROWS 100
AS $function$pg_stat_get_activity$function$
]]></string>
			<comment><![CDATA[statistics: information about currently active backends]]></comment>
		</function>
		<function name="pg_stat_get_analyze_count" id="Function_1eb4e6c7" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_stat_get_analyze_count(oid)
 RETURNS bigint
 LANGUAGE internal
 STABLE PARALLEL RESTRICTED STRICT
AS $function$pg_stat_get_analyze_count$function$
]]></string>
			<comment><![CDATA[statistics: number of manual analyzes for a table]]></comment>
		</function>
		<function name="pg_stat_get_archiver" id="Function_20ad1f9e" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_stat_get_archiver(OUT archived_count bigint, OUT last_archived_wal text, OUT last_archived_time timestamp with time zone, OUT failed_count bigint, OUT last_failed_wal text, OUT last_failed_time timestamp with time zone, OUT stats_reset timestamp with time zone)
 RETURNS record
 LANGUAGE internal
 STABLE PARALLEL RESTRICTED
AS $function$pg_stat_get_archiver$function$
]]></string>
			<comment><![CDATA[statistics: information about WAL archiver]]></comment>
		</function>
		<function name="pg_stat_get_autoanalyze_count" id="Function_243a92e3" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_stat_get_autoanalyze_count(oid)
 RETURNS bigint
 LANGUAGE internal
 STABLE PARALLEL RESTRICTED STRICT
AS $function$pg_stat_get_autoanalyze_count$function$
]]></string>
			<comment><![CDATA[statistics: number of auto analyzes for a table]]></comment>
		</function>
		<function name="pg_stat_get_autovacuum_count" id="Function_32644cc5" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_stat_get_autovacuum_count(oid)
 RETURNS bigint
 LANGUAGE internal
 STABLE PARALLEL RESTRICTED STRICT
AS $function$pg_stat_get_autovacuum_count$function$
]]></string>
			<comment><![CDATA[statistics: number of auto vacuums for a table]]></comment>
		</function>
		<function name="pg_stat_get_backend_activity" id="Function_2bc467c2" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_stat_get_backend_activity(integer)
 RETURNS text
 LANGUAGE internal
 STABLE PARALLEL RESTRICTED STRICT
AS $function$pg_stat_get_backend_activity$function$
]]></string>
			<comment><![CDATA[statistics: current query of backend]]></comment>
		</function>
		<function name="pg_stat_get_backend_activity_start" id="Function_315226e0" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_stat_get_backend_activity_start(integer)
 RETURNS timestamp with time zone
 LANGUAGE internal
 STABLE PARALLEL RESTRICTED STRICT
AS $function$pg_stat_get_backend_activity_start$function$
]]></string>
			<comment><![CDATA[statistics: start time for current query of backend]]></comment>
		</function>
		<function name="pg_stat_get_backend_client_addr" id="Function_83fc63" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_stat_get_backend_client_addr(integer)
 RETURNS inet
 LANGUAGE internal
 STABLE PARALLEL RESTRICTED STRICT
AS $function$pg_stat_get_backend_client_addr$function$
]]></string>
			<comment><![CDATA[statistics: address of client connected to backend]]></comment>
		</function>
		<function name="pg_stat_get_backend_client_port" id="Function_96c1f9e" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_stat_get_backend_client_port(integer)
 RETURNS integer
 LANGUAGE internal
 STABLE PARALLEL RESTRICTED STRICT
AS $function$pg_stat_get_backend_client_port$function$
]]></string>
			<comment><![CDATA[statistics: port number of client connected to backend]]></comment>
		</function>
		<function name="pg_stat_get_backend_dbid" id="Function_15773191" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_stat_get_backend_dbid(integer)
 RETURNS oid
 LANGUAGE internal
 STABLE PARALLEL RESTRICTED STRICT
AS $function$pg_stat_get_backend_dbid$function$
]]></string>
			<comment><![CDATA[statistics: database ID of backend]]></comment>
		</function>
		<function name="pg_stat_get_backend_idset" id="Function_7322be0" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_stat_get_backend_idset()
 RETURNS SETOF integer
 LANGUAGE internal
 STABLE PARALLEL RESTRICTED STRICT ROWS 100
AS $function$pg_stat_get_backend_idset$function$
]]></string>
			<comment><![CDATA[statistics: currently active backend IDs]]></comment>
		</function>
		<function name="pg_stat_get_backend_pid" id="Function_3a7583f8" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_stat_get_backend_pid(integer)
 RETURNS integer
 LANGUAGE internal
 STABLE PARALLEL RESTRICTED STRICT
AS $function$pg_stat_get_backend_pid$function$
]]></string>
			<comment><![CDATA[statistics: PID of backend]]></comment>
		</function>
		<function name="pg_stat_get_backend_start" id="Function_245de8f2" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_stat_get_backend_start(integer)
 RETURNS timestamp with time zone
 LANGUAGE internal
 STABLE PARALLEL RESTRICTED STRICT
AS $function$pg_stat_get_backend_start$function$
]]></string>
			<comment><![CDATA[statistics: start time for current backend session]]></comment>
		</function>
		<function name="pg_stat_get_backend_userid" id="Function_9d3c39c" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_stat_get_backend_userid(integer)
 RETURNS oid
 LANGUAGE internal
 STABLE PARALLEL RESTRICTED STRICT
AS $function$pg_stat_get_backend_userid$function$
]]></string>
			<comment><![CDATA[statistics: user ID of backend]]></comment>
		</function>
		<function name="pg_stat_get_backend_wait_event" id="Function_3421673f" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_stat_get_backend_wait_event(integer)
 RETURNS text
 LANGUAGE internal
 STABLE PARALLEL RESTRICTED STRICT
AS $function$pg_stat_get_backend_wait_event$function$
]]></string>
			<comment><![CDATA[statistics: wait event on which backend is currently waiting]]></comment>
		</function>
		<function name="pg_stat_get_backend_wait_event_type" id="Function_1d98ac2e" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_stat_get_backend_wait_event_type(integer)
 RETURNS text
 LANGUAGE internal
 STABLE PARALLEL RESTRICTED STRICT
AS $function$pg_stat_get_backend_wait_event_type$function$
]]></string>
			<comment><![CDATA[statistics: wait event type on which backend is currently waiting]]></comment>
		</function>
		<function name="pg_stat_get_backend_xact_start" id="Function_bb4374b" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_stat_get_backend_xact_start(integer)
 RETURNS timestamp with time zone
 LANGUAGE internal
 STABLE PARALLEL RESTRICTED STRICT
AS $function$pg_stat_get_backend_xact_start$function$
]]></string>
			<comment><![CDATA[statistics: start time for backend's current transaction]]></comment>
		</function>
		<function name="pg_stat_get_bgwriter_buf_written_checkpoints" id="Function_164c5486" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_stat_get_bgwriter_buf_written_checkpoints()
 RETURNS bigint
 LANGUAGE internal
 STABLE PARALLEL RESTRICTED STRICT
AS $function$pg_stat_get_bgwriter_buf_written_checkpoints$function$
]]></string>
			<comment><![CDATA[statistics: number of buffers written by the bgwriter during checkpoints]]></comment>
		</function>
		<function name="pg_stat_get_bgwriter_buf_written_clean" id="Function_3b4ee9ab" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_stat_get_bgwriter_buf_written_clean()
 RETURNS bigint
 LANGUAGE internal
 STABLE PARALLEL RESTRICTED STRICT
AS $function$pg_stat_get_bgwriter_buf_written_clean$function$
]]></string>
			<comment><![CDATA[statistics: number of buffers written by the bgwriter for cleaning dirty buffers]]></comment>
		</function>
		<function name="pg_stat_get_bgwriter_maxwritten_clean" id="Function_281e996d" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_stat_get_bgwriter_maxwritten_clean()
 RETURNS bigint
 LANGUAGE internal
 STABLE PARALLEL RESTRICTED STRICT
AS $function$pg_stat_get_bgwriter_maxwritten_clean$function$
]]></string>
			<comment><![CDATA[statistics: number of times the bgwriter stopped processing when it had written too many buffers while cleaning]]></comment>
		</function>
		<function name="pg_stat_get_bgwriter_requested_checkpoints" id="Function_18f22ede" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_stat_get_bgwriter_requested_checkpoints()
 RETURNS bigint
 LANGUAGE internal
 STABLE PARALLEL RESTRICTED STRICT
AS $function$pg_stat_get_bgwriter_requested_checkpoints$function$
]]></string>
			<comment><![CDATA[statistics: number of backend requested checkpoints started by the bgwriter]]></comment>
		</function>
		<function name="pg_stat_get_bgwriter_stat_reset_time" id="Function_38520e91" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_stat_get_bgwriter_stat_reset_time()
 RETURNS timestamp with time zone
 LANGUAGE internal
 STABLE PARALLEL RESTRICTED STRICT
AS $function$pg_stat_get_bgwriter_stat_reset_time$function$
]]></string>
			<comment><![CDATA[statistics: last reset for the bgwriter]]></comment>
		</function>
		<function name="pg_stat_get_bgwriter_timed_checkpoints" id="Function_149e9c5d" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_stat_get_bgwriter_timed_checkpoints()
 RETURNS bigint
 LANGUAGE internal
 STABLE PARALLEL RESTRICTED STRICT
AS $function$pg_stat_get_bgwriter_timed_checkpoints$function$
]]></string>
			<comment><![CDATA[statistics: number of timed checkpoints started by the bgwriter]]></comment>
		</function>
		<function name="pg_stat_get_blocks_fetched" id="Function_370c4f06" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_stat_get_blocks_fetched(oid)
 RETURNS bigint
 LANGUAGE internal
 STABLE PARALLEL RESTRICTED STRICT
AS $function$pg_stat_get_blocks_fetched$function$
]]></string>
			<comment><![CDATA[statistics: number of blocks fetched]]></comment>
		</function>
		<function name="pg_stat_get_blocks_hit" id="Function_33c57cd2" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_stat_get_blocks_hit(oid)
 RETURNS bigint
 LANGUAGE internal
 STABLE PARALLEL RESTRICTED STRICT
AS $function$pg_stat_get_blocks_hit$function$
]]></string>
			<comment><![CDATA[statistics: number of blocks found in cache]]></comment>
		</function>
		<function name="pg_stat_get_buf_alloc" id="Function_1023759f" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_stat_get_buf_alloc()
 RETURNS bigint
 LANGUAGE internal
 STABLE PARALLEL RESTRICTED STRICT
AS $function$pg_stat_get_buf_alloc$function$
]]></string>
			<comment><![CDATA[statistics: number of buffer allocations]]></comment>
		</function>
		<function name="pg_stat_get_buf_fsync_backend" id="Function_2c010ca5" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_stat_get_buf_fsync_backend()
 RETURNS bigint
 LANGUAGE internal
 STABLE PARALLEL RESTRICTED STRICT
AS $function$pg_stat_get_buf_fsync_backend$function$
]]></string>
			<comment><![CDATA[statistics: number of backend buffer writes that did their own fsync]]></comment>
		</function>
		<function name="pg_stat_get_buf_written_backend" id="Function_197c6d04" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_stat_get_buf_written_backend()
 RETURNS bigint
 LANGUAGE internal
 STABLE PARALLEL RESTRICTED STRICT
AS $function$pg_stat_get_buf_written_backend$function$
]]></string>
			<comment><![CDATA[statistics: number of buffers written by backends]]></comment>
		</function>
		<function name="pg_stat_get_checkpoint_sync_time" id="Function_3a2c2408" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_stat_get_checkpoint_sync_time()
 RETURNS double precision
 LANGUAGE internal
 STABLE PARALLEL RESTRICTED STRICT
AS $function$pg_stat_get_checkpoint_sync_time$function$
]]></string>
			<comment><![CDATA[statistics: checkpoint time spent synchronizing buffers to disk, in msec]]></comment>
		</function>
		<function name="pg_stat_get_checkpoint_write_time" id="Function_997b0d8" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_stat_get_checkpoint_write_time()
 RETURNS double precision
 LANGUAGE internal
 STABLE PARALLEL RESTRICTED STRICT
AS $function$pg_stat_get_checkpoint_write_time$function$
]]></string>
			<comment><![CDATA[statistics: checkpoint time spent writing buffers to disk, in msec]]></comment>
		</function>
		<function name="pg_stat_get_db_blk_read_time" id="Function_30d648d3" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_stat_get_db_blk_read_time(oid)
 RETURNS double precision
 LANGUAGE internal
 STABLE PARALLEL RESTRICTED STRICT
AS $function$pg_stat_get_db_blk_read_time$function$
]]></string>
			<comment><![CDATA[statistics: block read time, in msec]]></comment>
		</function>
		<function name="pg_stat_get_db_blk_write_time" id="Function_35494e2e" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_stat_get_db_blk_write_time(oid)
 RETURNS double precision
 LANGUAGE internal
 STABLE PARALLEL RESTRICTED STRICT
AS $function$pg_stat_get_db_blk_write_time$function$
]]></string>
			<comment><![CDATA[statistics: block write time, in msec]]></comment>
		</function>
		<function name="pg_stat_get_db_blocks_fetched" id="Function_1b12e021" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_stat_get_db_blocks_fetched(oid)
 RETURNS bigint
 LANGUAGE internal
 STABLE PARALLEL RESTRICTED STRICT
AS $function$pg_stat_get_db_blocks_fetched$function$
]]></string>
			<comment><![CDATA[statistics: blocks fetched for database]]></comment>
		</function>
		<function name="pg_stat_get_db_blocks_hit" id="Function_b716d36" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_stat_get_db_blocks_hit(oid)
 RETURNS bigint
 LANGUAGE internal
 STABLE PARALLEL RESTRICTED STRICT
AS $function$pg_stat_get_db_blocks_hit$function$
]]></string>
			<comment><![CDATA[statistics: blocks found in cache for database]]></comment>
		</function>
		<function name="pg_stat_get_db_conflict_all" id="Function_1f2c090d" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_stat_get_db_conflict_all(oid)
 RETURNS bigint
 LANGUAGE internal
 STABLE PARALLEL RESTRICTED STRICT
AS $function$pg_stat_get_db_conflict_all$function$
]]></string>
			<comment><![CDATA[statistics: recovery conflicts in database]]></comment>
		</function>
		<function name="pg_stat_get_db_conflict_bufferpin" id="Function_31f3e48f" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_stat_get_db_conflict_bufferpin(oid)
 RETURNS bigint
 LANGUAGE internal
 STABLE PARALLEL RESTRICTED STRICT
AS $function$pg_stat_get_db_conflict_bufferpin$function$
]]></string>
			<comment><![CDATA[statistics: recovery conflicts in database caused by shared buffer pin]]></comment>
		</function>
		<function name="pg_stat_get_db_conflict_lock" id="Function_dd3704c" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_stat_get_db_conflict_lock(oid)
 RETURNS bigint
 LANGUAGE internal
 STABLE PARALLEL RESTRICTED STRICT
AS $function$pg_stat_get_db_conflict_lock$function$
]]></string>
			<comment><![CDATA[statistics: recovery conflicts in database caused by relation lock]]></comment>
		</function>
		<function name="pg_stat_get_db_conflict_snapshot" id="Function_2e6f25ab" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_stat_get_db_conflict_snapshot(oid)
 RETURNS bigint
 LANGUAGE internal
 STABLE PARALLEL RESTRICTED STRICT
AS $function$pg_stat_get_db_conflict_snapshot$function$
]]></string>
			<comment><![CDATA[statistics: recovery conflicts in database caused by snapshot expiry]]></comment>
		</function>
		<function name="pg_stat_get_db_conflict_startup_deadlock" id="Function_3b053168" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_stat_get_db_conflict_startup_deadlock(oid)
 RETURNS bigint
 LANGUAGE internal
 STABLE PARALLEL RESTRICTED STRICT
AS $function$pg_stat_get_db_conflict_startup_deadlock$function$
]]></string>
			<comment><![CDATA[statistics: recovery conflicts in database caused by buffer deadlock]]></comment>
		</function>
		<function name="pg_stat_get_db_conflict_tablespace" id="Function_32707b71" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_stat_get_db_conflict_tablespace(oid)
 RETURNS bigint
 LANGUAGE internal
 STABLE PARALLEL RESTRICTED STRICT
AS $function$pg_stat_get_db_conflict_tablespace$function$
]]></string>
			<comment><![CDATA[statistics: recovery conflicts in database caused by drop tablespace]]></comment>
		</function>
		<function name="pg_stat_get_db_deadlocks" id="Function_35dadd5a" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_stat_get_db_deadlocks(oid)
 RETURNS bigint
 LANGUAGE internal
 STABLE PARALLEL RESTRICTED STRICT
AS $function$pg_stat_get_db_deadlocks$function$
]]></string>
			<comment><![CDATA[statistics: deadlocks detected in database]]></comment>
		</function>
		<function name="pg_stat_get_db_numbackends" id="Function_21a67eb0" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_stat_get_db_numbackends(oid)
 RETURNS integer
 LANGUAGE internal
 STABLE PARALLEL RESTRICTED STRICT
AS $function$pg_stat_get_db_numbackends$function$
]]></string>
			<comment><![CDATA[statistics: number of backends in database]]></comment>
		</function>
		<function name="pg_stat_get_db_stat_reset_time" id="Function_73676b7" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_stat_get_db_stat_reset_time(oid)
 RETURNS timestamp with time zone
 LANGUAGE internal
 STABLE PARALLEL RESTRICTED STRICT
AS $function$pg_stat_get_db_stat_reset_time$function$
]]></string>
			<comment><![CDATA[statistics: last reset for a database]]></comment>
		</function>
		<function name="pg_stat_get_db_temp_bytes" id="Function_20d471ee" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_stat_get_db_temp_bytes(oid)
 RETURNS bigint
 LANGUAGE internal
 STABLE PARALLEL RESTRICTED STRICT
AS $function$pg_stat_get_db_temp_bytes$function$
]]></string>
			<comment><![CDATA[statistics: number of bytes in temporary files written]]></comment>
		</function>
		<function name="pg_stat_get_db_temp_files" id="Function_3aac737e" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_stat_get_db_temp_files(oid)
 RETURNS bigint
 LANGUAGE internal
 STABLE PARALLEL RESTRICTED STRICT
AS $function$pg_stat_get_db_temp_files$function$
]]></string>
			<comment><![CDATA[statistics: number of temporary files written]]></comment>
		</function>
		<function name="pg_stat_get_db_tuples_deleted" id="Function_39f261f8" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_stat_get_db_tuples_deleted(oid)
 RETURNS bigint
 LANGUAGE internal
 STABLE PARALLEL RESTRICTED STRICT
AS $function$pg_stat_get_db_tuples_deleted$function$
]]></string>
			<comment><![CDATA[statistics: tuples deleted in database]]></comment>
		</function>
		<function name="pg_stat_get_db_tuples_fetched" id="Function_9f74283" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_stat_get_db_tuples_fetched(oid)
 RETURNS bigint
 LANGUAGE internal
 STABLE PARALLEL RESTRICTED STRICT
AS $function$pg_stat_get_db_tuples_fetched$function$
]]></string>
			<comment><![CDATA[statistics: tuples fetched for database]]></comment>
		</function>
		<function name="pg_stat_get_db_tuples_inserted" id="Function_111ff628" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_stat_get_db_tuples_inserted(oid)
 RETURNS bigint
 LANGUAGE internal
 STABLE PARALLEL RESTRICTED STRICT
AS $function$pg_stat_get_db_tuples_inserted$function$
]]></string>
			<comment><![CDATA[statistics: tuples inserted in database]]></comment>
		</function>
		<function name="pg_stat_get_db_tuples_returned" id="Function_1e2d361b" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_stat_get_db_tuples_returned(oid)
 RETURNS bigint
 LANGUAGE internal
 STABLE PARALLEL RESTRICTED STRICT
AS $function$pg_stat_get_db_tuples_returned$function$
]]></string>
			<comment><![CDATA[statistics: tuples returned for database]]></comment>
		</function>
		<function name="pg_stat_get_db_tuples_updated" id="Function_163c41b" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_stat_get_db_tuples_updated(oid)
 RETURNS bigint
 LANGUAGE internal
 STABLE PARALLEL RESTRICTED STRICT
AS $function$pg_stat_get_db_tuples_updated$function$
]]></string>
			<comment><![CDATA[statistics: tuples updated in database]]></comment>
		</function>
		<function name="pg_stat_get_db_xact_commit" id="Function_191eef5" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_stat_get_db_xact_commit(oid)
 RETURNS bigint
 LANGUAGE internal
 STABLE PARALLEL RESTRICTED STRICT
AS $function$pg_stat_get_db_xact_commit$function$
]]></string>
			<comment><![CDATA[statistics: transactions committed]]></comment>
		</function>
		<function name="pg_stat_get_db_xact_rollback" id="Function_272db097" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_stat_get_db_xact_rollback(oid)
 RETURNS bigint
 LANGUAGE internal
 STABLE PARALLEL RESTRICTED STRICT
AS $function$pg_stat_get_db_xact_rollback$function$
]]></string>
			<comment><![CDATA[statistics: transactions rolled back]]></comment>
		</function>
		<function name="pg_stat_get_dead_tuples" id="Function_2bf873ef" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_stat_get_dead_tuples(oid)
 RETURNS bigint
 LANGUAGE internal
 STABLE PARALLEL RESTRICTED STRICT
AS $function$pg_stat_get_dead_tuples$function$
]]></string>
			<comment><![CDATA[statistics: number of dead tuples]]></comment>
		</function>
		<function name="pg_stat_get_function_calls" id="Function_2d8b9e64" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_stat_get_function_calls(oid)
 RETURNS bigint
 LANGUAGE internal
 STABLE PARALLEL RESTRICTED STRICT
AS $function$pg_stat_get_function_calls$function$
]]></string>
			<comment><![CDATA[statistics: number of function calls]]></comment>
		</function>
		<function name="pg_stat_get_function_self_time" id="Function_8c688a0" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_stat_get_function_self_time(oid)
 RETURNS double precision
 LANGUAGE internal
 STABLE PARALLEL RESTRICTED STRICT
AS $function$pg_stat_get_function_self_time$function$
]]></string>
			<comment><![CDATA[statistics: self execution time of function, in msec]]></comment>
		</function>
		<function name="pg_stat_get_function_total_time" id="Function_1bf48a35" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_stat_get_function_total_time(oid)
 RETURNS double precision
 LANGUAGE internal
 STABLE PARALLEL RESTRICTED STRICT
AS $function$pg_stat_get_function_total_time$function$
]]></string>
			<comment><![CDATA[statistics: total execution time of function, in msec]]></comment>
		</function>
		<function name="pg_stat_get_last_analyze_time" id="Function_3d5ec20" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_stat_get_last_analyze_time(oid)
 RETURNS timestamp with time zone
 LANGUAGE internal
 STABLE PARALLEL RESTRICTED STRICT
AS $function$pg_stat_get_last_analyze_time$function$
]]></string>
			<comment><![CDATA[statistics: last manual analyze time for a table]]></comment>
		</function>
		<function name="pg_stat_get_last_autoanalyze_time" id="Function_35aecc10" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_stat_get_last_autoanalyze_time(oid)
 RETURNS timestamp with time zone
 LANGUAGE internal
 STABLE PARALLEL RESTRICTED STRICT
AS $function$pg_stat_get_last_autoanalyze_time$function$
]]></string>
			<comment><![CDATA[statistics: last auto analyze time for a table]]></comment>
		</function>
		<function name="pg_stat_get_last_autovacuum_time" id="Function_c541aa0" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_stat_get_last_autovacuum_time(oid)
 RETURNS timestamp with time zone
 LANGUAGE internal
 STABLE PARALLEL RESTRICTED STRICT
AS $function$pg_stat_get_last_autovacuum_time$function$
]]></string>
			<comment><![CDATA[statistics: last auto vacuum time for a table]]></comment>
		</function>
		<function name="pg_stat_get_last_vacuum_time" id="Function_2e69ee55" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_stat_get_last_vacuum_time(oid)
 RETURNS timestamp with time zone
 LANGUAGE internal
 STABLE PARALLEL RESTRICTED STRICT
AS $function$pg_stat_get_last_vacuum_time$function$
]]></string>
			<comment><![CDATA[statistics: last manual vacuum time for a table]]></comment>
		</function>
		<function name="pg_stat_get_live_tuples" id="Function_12c7b2e6" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_stat_get_live_tuples(oid)
 RETURNS bigint
 LANGUAGE internal
 STABLE PARALLEL RESTRICTED STRICT
AS $function$pg_stat_get_live_tuples$function$
]]></string>
			<comment><![CDATA[statistics: number of live tuples]]></comment>
		</function>
		<function name="pg_stat_get_mod_since_analyze" id="Function_1d2e66de" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_stat_get_mod_since_analyze(oid)
 RETURNS bigint
 LANGUAGE internal
 STABLE PARALLEL RESTRICTED STRICT
AS $function$pg_stat_get_mod_since_analyze$function$
]]></string>
			<comment><![CDATA[statistics: number of tuples changed since last analyze]]></comment>
		</function>
		<function name="pg_stat_get_numscans" id="Function_39c1adff" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_stat_get_numscans(oid)
 RETURNS bigint
 LANGUAGE internal
 STABLE PARALLEL RESTRICTED STRICT
AS $function$pg_stat_get_numscans$function$
]]></string>
			<comment><![CDATA[statistics: number of scans done for table/index]]></comment>
		</function>
		<function name="pg_stat_get_progress_info" id="Function_5177ac" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_stat_get_progress_info(cmdtype text, OUT pid integer, OUT datid oid, OUT relid oid, OUT param1 bigint, OUT param2 bigint, OUT param3 bigint, OUT param4 bigint, OUT param5 bigint, OUT param6 bigint, OUT param7 bigint, OUT param8 bigint, OUT param9 bigint, OUT param10 bigint)
 RETURNS SETOF record
 LANGUAGE internal
 STABLE PARALLEL RESTRICTED STRICT ROWS 100
AS $function$pg_stat_get_progress_info$function$
]]></string>
			<comment><![CDATA[statistics: information about progress of backends running maintenance command]]></comment>
		</function>
		<function name="pg_stat_get_snapshot_timestamp" id="Function_412bd7a" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_stat_get_snapshot_timestamp()
 RETURNS timestamp with time zone
 LANGUAGE internal
 STABLE PARALLEL RESTRICTED STRICT
AS $function$pg_stat_get_snapshot_timestamp$function$
]]></string>
			<comment><![CDATA[statistics: timestamp of the current statistics snapshot]]></comment>
		</function>
		<function name="pg_stat_get_tuples_deleted" id="Function_2ea37414" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_stat_get_tuples_deleted(oid)
 RETURNS bigint
 LANGUAGE internal
 STABLE PARALLEL RESTRICTED STRICT
AS $function$pg_stat_get_tuples_deleted$function$
]]></string>
			<comment><![CDATA[statistics: number of tuples deleted]]></comment>
		</function>
		<function name="pg_stat_get_tuples_fetched" id="Function_3ab448e3" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_stat_get_tuples_fetched(oid)
 RETURNS bigint
 LANGUAGE internal
 STABLE PARALLEL RESTRICTED STRICT
AS $function$pg_stat_get_tuples_fetched$function$
]]></string>
			<comment><![CDATA[statistics: number of tuples fetched by idxscan]]></comment>
		</function>
		<function name="pg_stat_get_tuples_hot_updated" id="Function_145746b6" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_stat_get_tuples_hot_updated(oid)
 RETURNS bigint
 LANGUAGE internal
 STABLE PARALLEL RESTRICTED STRICT
AS $function$pg_stat_get_tuples_hot_updated$function$
]]></string>
			<comment><![CDATA[statistics: number of tuples hot updated]]></comment>
		</function>
		<function name="pg_stat_get_tuples_inserted" id="Function_2b2c56a0" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_stat_get_tuples_inserted(oid)
 RETURNS bigint
 LANGUAGE internal
 STABLE PARALLEL RESTRICTED STRICT
AS $function$pg_stat_get_tuples_inserted$function$
]]></string>
			<comment><![CDATA[statistics: number of tuples inserted]]></comment>
		</function>
		<function name="pg_stat_get_tuples_returned" id="Function_22076dad" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_stat_get_tuples_returned(oid)
 RETURNS bigint
 LANGUAGE internal
 STABLE PARALLEL RESTRICTED STRICT
AS $function$pg_stat_get_tuples_returned$function$
]]></string>
			<comment><![CDATA[statistics: number of tuples read by seqscan]]></comment>
		</function>
		<function name="pg_stat_get_tuples_updated" id="Function_2b87d24" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_stat_get_tuples_updated(oid)
 RETURNS bigint
 LANGUAGE internal
 STABLE PARALLEL RESTRICTED STRICT
AS $function$pg_stat_get_tuples_updated$function$
]]></string>
			<comment><![CDATA[statistics: number of tuples updated]]></comment>
		</function>
		<function name="pg_stat_get_vacuum_count" id="Function_37837179" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_stat_get_vacuum_count(oid)
 RETURNS bigint
 LANGUAGE internal
 STABLE PARALLEL RESTRICTED STRICT
AS $function$pg_stat_get_vacuum_count$function$
]]></string>
			<comment><![CDATA[statistics: number of manual vacuums for a table]]></comment>
		</function>
		<function name="pg_stat_get_wal_receiver" id="Function_16873395" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_stat_get_wal_receiver(OUT pid integer, OUT status text, OUT receive_start_lsn pg_lsn, OUT receive_start_tli integer, OUT received_lsn pg_lsn, OUT received_tli integer, OUT last_msg_send_time timestamp with time zone, OUT last_msg_receipt_time timestamp with time zone, OUT latest_end_lsn pg_lsn, OUT latest_end_time timestamp with time zone, OUT slot_name text, OUT conninfo text)
 RETURNS record
 LANGUAGE internal
 STABLE PARALLEL RESTRICTED
AS $function$pg_stat_get_wal_receiver$function$
]]></string>
			<comment><![CDATA[statistics: information about WAL receiver]]></comment>
		</function>
		<function name="pg_stat_get_wal_senders" id="Function_25950df9" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_stat_get_wal_senders(OUT pid integer, OUT state text, OUT sent_location pg_lsn, OUT write_location pg_lsn, OUT flush_location pg_lsn, OUT replay_location pg_lsn, OUT sync_priority integer, OUT sync_state text)
 RETURNS SETOF record
 LANGUAGE internal
 STABLE PARALLEL RESTRICTED ROWS 10
AS $function$pg_stat_get_wal_senders$function$
]]></string>
			<comment><![CDATA[statistics: information about currently active replication]]></comment>
		</function>
		<function name="pg_stat_get_xact_blocks_fetched" id="Function_209a3672" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_stat_get_xact_blocks_fetched(oid)
 RETURNS bigint
 LANGUAGE internal
 PARALLEL RESTRICTED STRICT
AS $function$pg_stat_get_xact_blocks_fetched$function$
]]></string>
			<comment><![CDATA[statistics: number of blocks fetched in current transaction]]></comment>
		</function>
		<function name="pg_stat_get_xact_blocks_hit" id="Function_2066c459" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_stat_get_xact_blocks_hit(oid)
 RETURNS bigint
 LANGUAGE internal
 PARALLEL RESTRICTED STRICT
AS $function$pg_stat_get_xact_blocks_hit$function$
]]></string>
			<comment><![CDATA[statistics: number of blocks found in cache in current transaction]]></comment>
		</function>
		<function name="pg_stat_get_xact_function_calls" id="Function_2e5d06b0" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_stat_get_xact_function_calls(oid)
 RETURNS bigint
 LANGUAGE internal
 PARALLEL RESTRICTED STRICT
AS $function$pg_stat_get_xact_function_calls$function$
]]></string>
			<comment><![CDATA[statistics: number of function calls in current transaction]]></comment>
		</function>
		<function name="pg_stat_get_xact_function_self_time" id="Function_6a029b5" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_stat_get_xact_function_self_time(oid)
 RETURNS double precision
 LANGUAGE internal
 PARALLEL RESTRICTED STRICT
AS $function$pg_stat_get_xact_function_self_time$function$
]]></string>
			<comment><![CDATA[statistics: self execution time of function in current transaction, in msec]]></comment>
		</function>
		<function name="pg_stat_get_xact_function_total_time" id="Function_a81beb7" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_stat_get_xact_function_total_time(oid)
 RETURNS double precision
 LANGUAGE internal
 PARALLEL RESTRICTED STRICT
AS $function$pg_stat_get_xact_function_total_time$function$
]]></string>
			<comment><![CDATA[statistics: total execution time of function in current transaction, in msec]]></comment>
		</function>
		<function name="pg_stat_get_xact_numscans" id="Function_29ee7e81" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_stat_get_xact_numscans(oid)
 RETURNS bigint
 LANGUAGE internal
 PARALLEL RESTRICTED STRICT
AS $function$pg_stat_get_xact_numscans$function$
]]></string>
			<comment><![CDATA[statistics: number of scans done for table/index in current transaction]]></comment>
		</function>
		<function name="pg_stat_get_xact_tuples_deleted" id="Function_360717f7" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_stat_get_xact_tuples_deleted(oid)
 RETURNS bigint
 LANGUAGE internal
 PARALLEL RESTRICTED STRICT
AS $function$pg_stat_get_xact_tuples_deleted$function$
]]></string>
			<comment><![CDATA[statistics: number of tuples deleted in current transaction]]></comment>
		</function>
		<function name="pg_stat_get_xact_tuples_fetched" id="Function_39e355a1" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_stat_get_xact_tuples_fetched(oid)
 RETURNS bigint
 LANGUAGE internal
 PARALLEL RESTRICTED STRICT
AS $function$pg_stat_get_xact_tuples_fetched$function$
]]></string>
			<comment><![CDATA[statistics: number of tuples fetched by idxscan in current transaction]]></comment>
		</function>
		<function name="pg_stat_get_xact_tuples_hot_updated" id="Function_22b21930" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_stat_get_xact_tuples_hot_updated(oid)
 RETURNS bigint
 LANGUAGE internal
 PARALLEL RESTRICTED STRICT
AS $function$pg_stat_get_xact_tuples_hot_updated$function$
]]></string>
			<comment><![CDATA[statistics: number of tuples hot updated in current transaction]]></comment>
		</function>
		<function name="pg_stat_get_xact_tuples_inserted" id="Function_1eb366df" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_stat_get_xact_tuples_inserted(oid)
 RETURNS bigint
 LANGUAGE internal
 PARALLEL RESTRICTED STRICT
AS $function$pg_stat_get_xact_tuples_inserted$function$
]]></string>
			<comment><![CDATA[statistics: number of tuples inserted in current transaction]]></comment>
		</function>
		<function name="pg_stat_get_xact_tuples_returned" id="Function_399a91d6" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_stat_get_xact_tuples_returned(oid)
 RETURNS bigint
 LANGUAGE internal
 PARALLEL RESTRICTED STRICT
AS $function$pg_stat_get_xact_tuples_returned$function$
]]></string>
			<comment><![CDATA[statistics: number of tuples read by seqscan in current transaction]]></comment>
		</function>
		<function name="pg_stat_get_xact_tuples_updated" id="Function_2fe4605d" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_stat_get_xact_tuples_updated(oid)
 RETURNS bigint
 LANGUAGE internal
 PARALLEL RESTRICTED STRICT
AS $function$pg_stat_get_xact_tuples_updated$function$
]]></string>
			<comment><![CDATA[statistics: number of tuples updated in current transaction]]></comment>
		</function>
		<function name="pg_stat_reset" id="Function_37cf53da" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_stat_reset()
 RETURNS void
 LANGUAGE internal
 PARALLEL SAFE
AS $function$pg_stat_reset$function$
]]></string>
			<comment><![CDATA[statistics: reset collected statistics for current database]]></comment>
		</function>
		<function name="pg_stat_reset_shared" id="Function_2637cd3e" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_stat_reset_shared(text)
 RETURNS void
 LANGUAGE internal
 PARALLEL SAFE STRICT
AS $function$pg_stat_reset_shared$function$
]]></string>
			<comment><![CDATA[statistics: reset collected statistics shared across the cluster]]></comment>
		</function>
		<function name="pg_stat_reset_single_function_counters" id="Function_30345408" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_stat_reset_single_function_counters(oid)
 RETURNS void
 LANGUAGE internal
 PARALLEL SAFE STRICT
AS $function$pg_stat_reset_single_function_counters$function$
]]></string>
			<comment><![CDATA[statistics: reset collected statistics for a single function in the current database]]></comment>
		</function>
		<function name="pg_stat_reset_single_table_counters" id="Function_26c7a6c3" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_stat_reset_single_table_counters(oid)
 RETURNS void
 LANGUAGE internal
 PARALLEL SAFE STRICT
AS $function$pg_stat_reset_single_table_counters$function$
]]></string>
			<comment><![CDATA[statistics: reset collected statistics for a single table or index in the current database]]></comment>
		</function>
		<function name="pg_stop_backup" id="Function_9dfe9e1" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_stop_backup()
 RETURNS pg_lsn
 LANGUAGE internal
 PARALLEL SAFE STRICT
AS $function$pg_stop_backup$function$
CREATE OR REPLACE FUNCTION pg_catalog.pg_stop_backup(exclusive boolean, OUT lsn pg_lsn, OUT labelfile text, OUT spcmapfile text)
 RETURNS SETOF record
 LANGUAGE internal
 PARALLEL SAFE STRICT ROWS 1
AS $function$pg_stop_backup_v2$function$
]]></string>
			<comment><![CDATA[finish taking an online backup]]></comment>
		</function>
		<function name="pg_stop_backup_001" id="Function_20bb8cb5" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_stop_backup()
 RETURNS pg_lsn
 LANGUAGE internal
 PARALLEL SAFE STRICT
AS $function$pg_stop_backup$function$
CREATE OR REPLACE FUNCTION pg_catalog.pg_stop_backup(exclusive boolean, OUT lsn pg_lsn, OUT labelfile text, OUT spcmapfile text)
 RETURNS SETOF record
 LANGUAGE internal
 PARALLEL SAFE STRICT ROWS 1
AS $function$pg_stop_backup_v2$function$
]]></string>
			<comment><![CDATA[finish taking an online backup]]></comment>
		</function>
		<function name="pg_switch_xlog" id="Function_52ef54b" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_switch_xlog()
 RETURNS pg_lsn
 LANGUAGE internal
 PARALLEL SAFE STRICT
AS $function$pg_switch_xlog$function$
]]></string>
			<comment><![CDATA[switch to new xlog file]]></comment>
		</function>
		<function name="pg_table_is_visible" id="Function_272a6081" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_table_is_visible(oid)
 RETURNS boolean
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT COST 10
AS $function$pg_table_is_visible$function$
]]></string>
			<comment><![CDATA[is table visible in search path?]]></comment>
		</function>
		<function name="pg_table_size" id="Function_38714043" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_table_size(regclass)
 RETURNS bigint
 LANGUAGE internal
 PARALLEL SAFE STRICT
AS $function$pg_table_size$function$
]]></string>
			<comment><![CDATA[disk space usage for the specified table, including TOAST, free space and visibility map]]></comment>
		</function>
		<function name="pg_tablespace_databases" id="Function_127a6a82" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_tablespace_databases(oid)
 RETURNS SETOF oid
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$pg_tablespace_databases$function$
]]></string>
			<comment><![CDATA[get OIDs of databases in a tablespace]]></comment>
		</function>
		<function name="pg_tablespace_location" id="Function_2828ca33" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_tablespace_location(oid)
 RETURNS text
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$pg_tablespace_location$function$
]]></string>
			<comment><![CDATA[tablespace location]]></comment>
		</function>
		<function name="pg_tablespace_size" id="Function_45dc35c" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_tablespace_size(name)
 RETURNS bigint
 LANGUAGE internal
 PARALLEL SAFE STRICT
AS $function$pg_tablespace_size_name$function$
CREATE OR REPLACE FUNCTION pg_catalog.pg_tablespace_size(oid)
 RETURNS bigint
 LANGUAGE internal
 PARALLEL SAFE STRICT
AS $function$pg_tablespace_size_oid$function$
]]></string>
			<comment><![CDATA[total disk space usage for the specified tablespace]]></comment>
		</function>
		<function name="pg_tablespace_size_001" id="Function_271d6c42" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_tablespace_size(name)
 RETURNS bigint
 LANGUAGE internal
 PARALLEL SAFE STRICT
AS $function$pg_tablespace_size_name$function$
CREATE OR REPLACE FUNCTION pg_catalog.pg_tablespace_size(oid)
 RETURNS bigint
 LANGUAGE internal
 PARALLEL SAFE STRICT
AS $function$pg_tablespace_size_oid$function$
]]></string>
			<comment><![CDATA[total disk space usage for the specified tablespace]]></comment>
		</function>
		<function name="pg_terminate_backend" id="Function_d8ccfd8" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_terminate_backend(integer)
 RETURNS boolean
 LANGUAGE internal
 PARALLEL SAFE STRICT
AS $function$pg_terminate_backend$function$
]]></string>
			<comment><![CDATA[terminate a server process]]></comment>
		</function>
		<function name="pg_timezone_abbrevs" id="Function_7650266" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_timezone_abbrevs(OUT abbrev text, OUT utc_offset interval, OUT is_dst boolean)
 RETURNS SETOF record
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$pg_timezone_abbrevs$function$
]]></string>
			<comment><![CDATA[get the available time zone abbreviations]]></comment>
		</function>
		<function name="pg_timezone_names" id="Function_258af8e" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_timezone_names(OUT name text, OUT abbrev text, OUT utc_offset interval, OUT is_dst boolean)
 RETURNS SETOF record
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$pg_timezone_names$function$
]]></string>
			<comment><![CDATA[get the available time zone names]]></comment>
		</function>
		<function name="pg_total_relation_size" id="Function_1f2e5ad4" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_total_relation_size(regclass)
 RETURNS bigint
 LANGUAGE internal
 PARALLEL SAFE STRICT
AS $function$pg_total_relation_size$function$
]]></string>
			<comment><![CDATA[total disk space usage for the specified table and associated indexes]]></comment>
		</function>
		<function name="pg_trigger_depth" id="Function_14a19a30" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_trigger_depth()
 RETURNS integer
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$pg_trigger_depth$function$
]]></string>
			<comment><![CDATA[current trigger depth]]></comment>
		</function>
		<function name="pg_try_advisory_lock" id="Function_1e16ebd1" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_try_advisory_lock(bigint)
 RETURNS boolean
 LANGUAGE internal
 STRICT
AS $function$pg_try_advisory_lock_int8$function$
CREATE OR REPLACE FUNCTION pg_catalog.pg_try_advisory_lock(integer, integer)
 RETURNS boolean
 LANGUAGE internal
 STRICT
AS $function$pg_try_advisory_lock_int4$function$
]]></string>
			<comment><![CDATA[obtain exclusive advisory lock if available]]></comment>
		</function>
		<function name="pg_try_advisory_lock_001" id="Function_d233c72" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_try_advisory_lock(bigint)
 RETURNS boolean
 LANGUAGE internal
 STRICT
AS $function$pg_try_advisory_lock_int8$function$
CREATE OR REPLACE FUNCTION pg_catalog.pg_try_advisory_lock(integer, integer)
 RETURNS boolean
 LANGUAGE internal
 STRICT
AS $function$pg_try_advisory_lock_int4$function$
]]></string>
			<comment><![CDATA[obtain exclusive advisory lock if available]]></comment>
		</function>
		<function name="pg_try_advisory_lock_shared" id="Function_3acedd99" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_try_advisory_lock_shared(bigint)
 RETURNS boolean
 LANGUAGE internal
 STRICT
AS $function$pg_try_advisory_lock_shared_int8$function$
CREATE OR REPLACE FUNCTION pg_catalog.pg_try_advisory_lock_shared(integer, integer)
 RETURNS boolean
 LANGUAGE internal
 STRICT
AS $function$pg_try_advisory_lock_shared_int4$function$
]]></string>
			<comment><![CDATA[obtain shared advisory lock if available]]></comment>
		</function>
		<function name="pg_try_advisory_lock_shared_001" id="Function_39dd4549" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_try_advisory_lock_shared(bigint)
 RETURNS boolean
 LANGUAGE internal
 STRICT
AS $function$pg_try_advisory_lock_shared_int8$function$
CREATE OR REPLACE FUNCTION pg_catalog.pg_try_advisory_lock_shared(integer, integer)
 RETURNS boolean
 LANGUAGE internal
 STRICT
AS $function$pg_try_advisory_lock_shared_int4$function$
]]></string>
			<comment><![CDATA[obtain shared advisory lock if available]]></comment>
		</function>
		<function name="pg_try_advisory_xact_lock" id="Function_1fdec4e7" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_try_advisory_xact_lock(bigint)
 RETURNS boolean
 LANGUAGE internal
 STRICT
AS $function$pg_try_advisory_xact_lock_int8$function$
CREATE OR REPLACE FUNCTION pg_catalog.pg_try_advisory_xact_lock(integer, integer)
 RETURNS boolean
 LANGUAGE internal
 STRICT
AS $function$pg_try_advisory_xact_lock_int4$function$
]]></string>
			<comment><![CDATA[obtain exclusive advisory lock if available]]></comment>
		</function>
		<function name="pg_try_advisory_xact_lock_001" id="Function_34c90813" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_try_advisory_xact_lock(bigint)
 RETURNS boolean
 LANGUAGE internal
 STRICT
AS $function$pg_try_advisory_xact_lock_int8$function$
CREATE OR REPLACE FUNCTION pg_catalog.pg_try_advisory_xact_lock(integer, integer)
 RETURNS boolean
 LANGUAGE internal
 STRICT
AS $function$pg_try_advisory_xact_lock_int4$function$
]]></string>
			<comment><![CDATA[obtain exclusive advisory lock if available]]></comment>
		</function>
		<function name="pg_try_advisory_xact_lock_shared" id="Function_d3f2d65" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_try_advisory_xact_lock_shared(bigint)
 RETURNS boolean
 LANGUAGE internal
 STRICT
AS $function$pg_try_advisory_xact_lock_shared_int8$function$
CREATE OR REPLACE FUNCTION pg_catalog.pg_try_advisory_xact_lock_shared(integer, integer)
 RETURNS boolean
 LANGUAGE internal
 STRICT
AS $function$pg_try_advisory_xact_lock_shared_int4$function$
]]></string>
			<comment><![CDATA[obtain shared advisory lock if available]]></comment>
		</function>
		<function name="pg_try_advisory_xact_lock_shared_001" id="Function_bfa173e" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_try_advisory_xact_lock_shared(bigint)
 RETURNS boolean
 LANGUAGE internal
 STRICT
AS $function$pg_try_advisory_xact_lock_shared_int8$function$
CREATE OR REPLACE FUNCTION pg_catalog.pg_try_advisory_xact_lock_shared(integer, integer)
 RETURNS boolean
 LANGUAGE internal
 STRICT
AS $function$pg_try_advisory_xact_lock_shared_int4$function$
]]></string>
			<comment><![CDATA[obtain shared advisory lock if available]]></comment>
		</function>
		<function name="pg_ts_config_is_visible" id="Function_3b75bfcc" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_ts_config_is_visible(oid)
 RETURNS boolean
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT COST 10
AS $function$pg_ts_config_is_visible$function$
]]></string>
			<comment><![CDATA[is text search configuration visible in search path?]]></comment>
		</function>
		<function name="pg_ts_dict_is_visible" id="Function_29881540" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_ts_dict_is_visible(oid)
 RETURNS boolean
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT COST 10
AS $function$pg_ts_dict_is_visible$function$
]]></string>
			<comment><![CDATA[is text search dictionary visible in search path?]]></comment>
		</function>
		<function name="pg_ts_parser_is_visible" id="Function_180f8a65" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_ts_parser_is_visible(oid)
 RETURNS boolean
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT COST 10
AS $function$pg_ts_parser_is_visible$function$
]]></string>
			<comment><![CDATA[is text search parser visible in search path?]]></comment>
		</function>
		<function name="pg_ts_template_is_visible" id="Function_c736c9a" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_ts_template_is_visible(oid)
 RETURNS boolean
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT COST 10
AS $function$pg_ts_template_is_visible$function$
]]></string>
			<comment><![CDATA[is text search template visible in search path?]]></comment>
		</function>
		<function name="pg_type_is_visible" id="Function_352c852a" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_type_is_visible(oid)
 RETURNS boolean
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT COST 10
AS $function$pg_type_is_visible$function$
]]></string>
			<comment><![CDATA[is type visible in search path?]]></comment>
		</function>
		<function name="pg_typeof" id="Function_71e97fb" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_typeof("any")
 RETURNS regtype
 LANGUAGE internal
 STABLE PARALLEL SAFE
AS $function$pg_typeof$function$
]]></string>
			<comment><![CDATA[type of the argument]]></comment>
		</function>
		<function name="pg_xact_commit_timestamp" id="Function_265ac126" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_xact_commit_timestamp(xid)
 RETURNS timestamp with time zone
 LANGUAGE internal
 PARALLEL SAFE STRICT
AS $function$pg_xact_commit_timestamp$function$
]]></string>
			<comment><![CDATA[get commit timestamp of a transaction]]></comment>
		</function>
		<function name="pg_xlog_location_diff" id="Function_1b1c52f0" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_xlog_location_diff(pg_lsn, pg_lsn)
 RETURNS numeric
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$pg_xlog_location_diff$function$
]]></string>
			<comment><![CDATA[difference in bytes, given two xlog locations]]></comment>
		</function>
		<function name="pg_xlog_replay_pause" id="Function_230c15be" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_xlog_replay_pause()
 RETURNS void
 LANGUAGE internal
 PARALLEL SAFE STRICT
AS $function$pg_xlog_replay_pause$function$
]]></string>
			<comment><![CDATA[pause xlog replay]]></comment>
		</function>
		<function name="pg_xlog_replay_resume" id="Function_2bee0ba8" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_xlog_replay_resume()
 RETURNS void
 LANGUAGE internal
 PARALLEL SAFE STRICT
AS $function$pg_xlog_replay_resume$function$
]]></string>
			<comment><![CDATA[resume xlog replay, if it was paused]]></comment>
		</function>
		<function name="pg_xlogfile_name" id="Function_27778d3b" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_xlogfile_name(pg_lsn)
 RETURNS text
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$pg_xlogfile_name$function$
]]></string>
			<comment><![CDATA[xlog filename, given an xlog location]]></comment>
		</function>
		<function name="pg_xlogfile_name_offset" id="Function_2cebdd84" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_xlogfile_name_offset(wal_location pg_lsn, OUT file_name text, OUT file_offset integer)
 RETURNS record
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$pg_xlogfile_name_offset$function$
]]></string>
			<comment><![CDATA[xlog filename and byte offset, given an xlog location]]></comment>
		</function>
		<function name="phraseto_tsquery" id="Function_9263a82" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.phraseto_tsquery(text)
 RETURNS tsquery
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT COST 100
AS $function$phraseto_tsquery$function$
CREATE OR REPLACE FUNCTION pg_catalog.phraseto_tsquery(regconfig, text)
 RETURNS tsquery
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT COST 100
AS $function$phraseto_tsquery_byid$function$
]]></string>
			<comment><![CDATA[transform to tsquery]]></comment>
		</function>
		<function name="phraseto_tsquery_001" id="Function_13457e9" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.phraseto_tsquery(text)
 RETURNS tsquery
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT COST 100
AS $function$phraseto_tsquery$function$
CREATE OR REPLACE FUNCTION pg_catalog.phraseto_tsquery(regconfig, text)
 RETURNS tsquery
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT COST 100
AS $function$phraseto_tsquery_byid$function$
]]></string>
			<comment><![CDATA[transform to tsquery]]></comment>
		</function>
		<function name="pi" id="Function_196263fb" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pi()
 RETURNS double precision
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$dpi$function$
]]></string>
			<comment><![CDATA[PI]]></comment>
		</function>
		<function name="plainto_tsquery" id="Function_30a4abfa" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.plainto_tsquery(text)
 RETURNS tsquery
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT COST 100
AS $function$plainto_tsquery$function$
CREATE OR REPLACE FUNCTION pg_catalog.plainto_tsquery(regconfig, text)
 RETURNS tsquery
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT COST 100
AS $function$plainto_tsquery_byid$function$
]]></string>
			<comment><![CDATA[transform to tsquery]]></comment>
		</function>
		<function name="plainto_tsquery_001" id="Function_2ce12de9" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.plainto_tsquery(text)
 RETURNS tsquery
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT COST 100
AS $function$plainto_tsquery$function$
CREATE OR REPLACE FUNCTION pg_catalog.plainto_tsquery(regconfig, text)
 RETURNS tsquery
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT COST 100
AS $function$plainto_tsquery_byid$function$
]]></string>
			<comment><![CDATA[transform to tsquery]]></comment>
		</function>
		<function name="plpgsql_call_handler" id="Function_d3c54ac" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.plpgsql_call_handler()
 RETURNS language_handler
 LANGUAGE c
AS '$libdir/plpgsql', $function$plpgsql_call_handler$function$
]]></string>
		</function>
		<function name="plpgsql_inline_handler" id="Function_49453b4" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.plpgsql_inline_handler(internal)
 RETURNS void
 LANGUAGE c
 STRICT
AS '$libdir/plpgsql', $function$plpgsql_inline_handler$function$
]]></string>
		</function>
		<function name="plpgsql_validator" id="Function_16bf76b1" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.plpgsql_validator(oid)
 RETURNS void
 LANGUAGE c
 STRICT
AS '$libdir/plpgsql', $function$plpgsql_validator$function$
]]></string>
		</function>
		<function name="point" id="Function_1d6cb3ab" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.point(circle)
 RETURNS point
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$circle_center$function$
CREATE OR REPLACE FUNCTION pg_catalog.point(double precision, double precision)
 RETURNS point
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$construct_point$function$
CREATE OR REPLACE FUNCTION pg_catalog.point(lseg)
 RETURNS point
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$lseg_center$function$
CREATE OR REPLACE FUNCTION pg_catalog.point(path)
 RETURNS point
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$path_center$function$
CREATE OR REPLACE FUNCTION pg_catalog.point(box)
 RETURNS point
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$box_center$function$
CREATE OR REPLACE FUNCTION pg_catalog.point(polygon)
 RETURNS point
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$poly_center$function$
]]></string>
			<comment><![CDATA[center of]]></comment>
		</function>
		<function name="point_001" id="Function_1b65fc9d" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.point(circle)
 RETURNS point
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$circle_center$function$
CREATE OR REPLACE FUNCTION pg_catalog.point(double precision, double precision)
 RETURNS point
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$construct_point$function$
CREATE OR REPLACE FUNCTION pg_catalog.point(lseg)
 RETURNS point
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$lseg_center$function$
CREATE OR REPLACE FUNCTION pg_catalog.point(path)
 RETURNS point
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$path_center$function$
CREATE OR REPLACE FUNCTION pg_catalog.point(box)
 RETURNS point
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$box_center$function$
CREATE OR REPLACE FUNCTION pg_catalog.point(polygon)
 RETURNS point
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$poly_center$function$
]]></string>
			<comment><![CDATA[center of]]></comment>
		</function>
		<function name="point_002" id="Function_24415458" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.point(circle)
 RETURNS point
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$circle_center$function$
CREATE OR REPLACE FUNCTION pg_catalog.point(double precision, double precision)
 RETURNS point
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$construct_point$function$
CREATE OR REPLACE FUNCTION pg_catalog.point(lseg)
 RETURNS point
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$lseg_center$function$
CREATE OR REPLACE FUNCTION pg_catalog.point(path)
 RETURNS point
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$path_center$function$
CREATE OR REPLACE FUNCTION pg_catalog.point(box)
 RETURNS point
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$box_center$function$
CREATE OR REPLACE FUNCTION pg_catalog.point(polygon)
 RETURNS point
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$poly_center$function$
]]></string>
			<comment><![CDATA[center of]]></comment>
		</function>
		<function name="point_003" id="Function_bde15b7" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.point(circle)
 RETURNS point
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$circle_center$function$
CREATE OR REPLACE FUNCTION pg_catalog.point(double precision, double precision)
 RETURNS point
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$construct_point$function$
CREATE OR REPLACE FUNCTION pg_catalog.point(lseg)
 RETURNS point
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$lseg_center$function$
CREATE OR REPLACE FUNCTION pg_catalog.point(path)
 RETURNS point
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$path_center$function$
CREATE OR REPLACE FUNCTION pg_catalog.point(box)
 RETURNS point
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$box_center$function$
CREATE OR REPLACE FUNCTION pg_catalog.point(polygon)
 RETURNS point
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$poly_center$function$
]]></string>
			<comment><![CDATA[center of]]></comment>
		</function>
		<function name="point_004" id="Function_2903f562" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.point(circle)
 RETURNS point
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$circle_center$function$
CREATE OR REPLACE FUNCTION pg_catalog.point(double precision, double precision)
 RETURNS point
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$construct_point$function$
CREATE OR REPLACE FUNCTION pg_catalog.point(lseg)
 RETURNS point
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$lseg_center$function$
CREATE OR REPLACE FUNCTION pg_catalog.point(path)
 RETURNS point
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$path_center$function$
CREATE OR REPLACE FUNCTION pg_catalog.point(box)
 RETURNS point
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$box_center$function$
CREATE OR REPLACE FUNCTION pg_catalog.point(polygon)
 RETURNS point
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$poly_center$function$
]]></string>
			<comment><![CDATA[center of]]></comment>
		</function>
		<function name="point_005" id="Function_17d3a5dc" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.point(circle)
 RETURNS point
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$circle_center$function$
CREATE OR REPLACE FUNCTION pg_catalog.point(double precision, double precision)
 RETURNS point
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$construct_point$function$
CREATE OR REPLACE FUNCTION pg_catalog.point(lseg)
 RETURNS point
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$lseg_center$function$
CREATE OR REPLACE FUNCTION pg_catalog.point(path)
 RETURNS point
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$path_center$function$
CREATE OR REPLACE FUNCTION pg_catalog.point(box)
 RETURNS point
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$box_center$function$
CREATE OR REPLACE FUNCTION pg_catalog.point(polygon)
 RETURNS point
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$poly_center$function$
]]></string>
			<comment><![CDATA[center of]]></comment>
		</function>
		<function name="point_above" id="Function_21587093" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.point_above(point, point)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$point_above$function$
]]></string>
			<comment><![CDATA[implementation of >^ operator]]></comment>
		</function>
		<function name="point_add" id="Function_f157d26" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.point_add(point, point)
 RETURNS point
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$point_add$function$
]]></string>
			<comment><![CDATA[implementation of + operator]]></comment>
		</function>
		<function name="point_below" id="Function_3e02715" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.point_below(point, point)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$point_below$function$
]]></string>
			<comment><![CDATA[implementation of <^ operator]]></comment>
		</function>
		<function name="point_distance" id="Function_232eebd8" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.point_distance(point, point)
 RETURNS double precision
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$point_distance$function$
]]></string>
			<comment><![CDATA[implementation of <-> operator]]></comment>
		</function>
		<function name="point_div" id="Function_2bacc704" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.point_div(point, point)
 RETURNS point
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$point_div$function$
]]></string>
			<comment><![CDATA[implementation of / operator]]></comment>
		</function>
		<function name="point_eq" id="Function_314504a1" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.point_eq(point, point)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$point_eq$function$
]]></string>
			<comment><![CDATA[implementation of ~= operator]]></comment>
		</function>
		<function name="point_horiz" id="Function_398bca8a" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.point_horiz(point, point)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$point_horiz$function$
]]></string>
			<comment><![CDATA[implementation of ?- operator]]></comment>
		</function>
		<function name="point_in" id="Function_156390b2" isSystem="false" >
			<comment><![CDATA[I/O]]></comment>
		</function>
		<function name="point_left" id="Function_103ea3ee" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.point_left(point, point)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$point_left$function$
]]></string>
			<comment><![CDATA[implementation of << operator]]></comment>
		</function>
		<function name="point_mul" id="Function_24cbaaee" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.point_mul(point, point)
 RETURNS point
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$point_mul$function$
]]></string>
			<comment><![CDATA[implementation of * operator]]></comment>
		</function>
		<function name="point_ne" id="Function_333fc93c" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.point_ne(point, point)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$point_ne$function$
]]></string>
			<comment><![CDATA[implementation of <> operator]]></comment>
		</function>
		<function name="point_out" id="Function_3a9c16b8" isSystem="false" >
			<comment><![CDATA[I/O]]></comment>
		</function>
		<function name="point_recv" id="Function_1410f01c" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.point_recv(internal)
 RETURNS point
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$point_recv$function$
]]></string>
			<comment><![CDATA[I/O]]></comment>
		</function>
		<function name="point_right" id="Function_1ddbbd92" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.point_right(point, point)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$point_right$function$
]]></string>
			<comment><![CDATA[implementation of >> operator]]></comment>
		</function>
		<function name="point_send" id="Function_27dbe5eb" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.point_send(point)
 RETURNS bytea
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$point_send$function$
]]></string>
			<comment><![CDATA[I/O]]></comment>
		</function>
		<function name="point_sub" id="Function_166d5b44" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.point_sub(point, point)
 RETURNS point
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$point_sub$function$
]]></string>
			<comment><![CDATA[implementation of - operator]]></comment>
		</function>
		<function name="point_vert" id="Function_3751df7b" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.point_vert(point, point)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$point_vert$function$
]]></string>
			<comment><![CDATA[implementation of ?| operator]]></comment>
		</function>
		<function name="poly_above" id="Function_b930aaf" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.poly_above(polygon, polygon)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$poly_above$function$
]]></string>
			<comment><![CDATA[implementation of |>> operator]]></comment>
		</function>
		<function name="poly_below" id="Function_5be9c8c" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.poly_below(polygon, polygon)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$poly_below$function$
]]></string>
			<comment><![CDATA[implementation of <<| operator]]></comment>
		</function>
		<function name="poly_center" id="Function_1e0b854a" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.poly_center(polygon)
 RETURNS point
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$poly_center$function$
]]></string>
			<comment><![CDATA[implementation of @@ operator]]></comment>
		</function>
		<function name="poly_contain" id="Function_9a0ceec" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.poly_contain(polygon, polygon)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$poly_contain$function$
]]></string>
			<comment><![CDATA[implementation of @> operator]]></comment>
		</function>
		<function name="poly_contain_pt" id="Function_372c4980" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.poly_contain_pt(polygon, point)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$poly_contain_pt$function$
]]></string>
			<comment><![CDATA[implementation of @> operator]]></comment>
		</function>
		<function name="poly_contained" id="Function_fd3981" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.poly_contained(polygon, polygon)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$poly_contained$function$
]]></string>
			<comment><![CDATA[implementation of <@ operator]]></comment>
		</function>
		<function name="poly_distance" id="Function_c75afa2" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.poly_distance(polygon, polygon)
 RETURNS double precision
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$poly_distance$function$
]]></string>
			<comment><![CDATA[implementation of <-> operator]]></comment>
		</function>
		<function name="poly_in" id="Function_cd269e1" isSystem="false" >
			<comment><![CDATA[I/O]]></comment>
		</function>
		<function name="poly_left" id="Function_2c7b64c9" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.poly_left(polygon, polygon)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$poly_left$function$
]]></string>
			<comment><![CDATA[implementation of << operator]]></comment>
		</function>
		<function name="poly_npoints" id="Function_1be940c1" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.poly_npoints(polygon)
 RETURNS integer
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$poly_npoints$function$
]]></string>
			<comment><![CDATA[implementation of # operator]]></comment>
		</function>
		<function name="poly_out" id="Function_343d7ab3" isSystem="false" >
			<comment><![CDATA[I/O]]></comment>
		</function>
		<function name="poly_overabove" id="Function_345b3208" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.poly_overabove(polygon, polygon)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$poly_overabove$function$
]]></string>
			<comment><![CDATA[implementation of |&> operator]]></comment>
		</function>
		<function name="poly_overbelow" id="Function_38c30331" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.poly_overbelow(polygon, polygon)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$poly_overbelow$function$
]]></string>
			<comment><![CDATA[implementation of &<| operator]]></comment>
		</function>
		<function name="poly_overlap" id="Function_119c515e" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.poly_overlap(polygon, polygon)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$poly_overlap$function$
]]></string>
			<comment><![CDATA[implementation of && operator]]></comment>
		</function>
		<function name="poly_overleft" id="Function_206c4ee4" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.poly_overleft(polygon, polygon)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$poly_overleft$function$
]]></string>
			<comment><![CDATA[implementation of &< operator]]></comment>
		</function>
		<function name="poly_overright" id="Function_3303fa82" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.poly_overright(polygon, polygon)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$poly_overright$function$
]]></string>
			<comment><![CDATA[implementation of &> operator]]></comment>
		</function>
		<function name="poly_recv" id="Function_14733a87" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.poly_recv(internal)
 RETURNS polygon
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$poly_recv$function$
]]></string>
			<comment><![CDATA[I/O]]></comment>
		</function>
		<function name="poly_right" id="Function_2abf3d2b" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.poly_right(polygon, polygon)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$poly_right$function$
]]></string>
			<comment><![CDATA[implementation of >> operator]]></comment>
		</function>
		<function name="poly_same" id="Function_11f4a989" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.poly_same(polygon, polygon)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$poly_same$function$
]]></string>
			<comment><![CDATA[implementation of ~= operator]]></comment>
		</function>
		<function name="poly_send" id="Function_e1f4eed" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.poly_send(polygon)
 RETURNS bytea
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$poly_send$function$
]]></string>
			<comment><![CDATA[I/O]]></comment>
		</function>
		<function name="polygon" id="Function_2f2dcbb4" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.polygon(box)
 RETURNS polygon
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$box_poly$function$
CREATE OR REPLACE FUNCTION pg_catalog.polygon(path)
 RETURNS polygon
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$path_poly$function$
CREATE OR REPLACE FUNCTION pg_catalog.polygon(integer, circle)
 RETURNS polygon
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$circle_poly$function$
CREATE OR REPLACE FUNCTION pg_catalog.polygon(circle)
 RETURNS polygon
 LANGUAGE sql
 IMMUTABLE PARALLEL SAFE STRICT COST 1
AS $function$select pg_catalog.polygon(12, $1)$function$
]]></string>
			<comment><![CDATA[convert box to polygon]]></comment>
		</function>
		<function name="polygon_001" id="Function_4996e4d" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.polygon(box)
 RETURNS polygon
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$box_poly$function$
CREATE OR REPLACE FUNCTION pg_catalog.polygon(path)
 RETURNS polygon
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$path_poly$function$
CREATE OR REPLACE FUNCTION pg_catalog.polygon(integer, circle)
 RETURNS polygon
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$circle_poly$function$
CREATE OR REPLACE FUNCTION pg_catalog.polygon(circle)
 RETURNS polygon
 LANGUAGE sql
 IMMUTABLE PARALLEL SAFE STRICT COST 1
AS $function$select pg_catalog.polygon(12, $1)$function$
]]></string>
			<comment><![CDATA[convert box to polygon]]></comment>
		</function>
		<function name="polygon_002" id="Function_1595e8f5" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.polygon(box)
 RETURNS polygon
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$box_poly$function$
CREATE OR REPLACE FUNCTION pg_catalog.polygon(path)
 RETURNS polygon
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$path_poly$function$
CREATE OR REPLACE FUNCTION pg_catalog.polygon(integer, circle)
 RETURNS polygon
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$circle_poly$function$
CREATE OR REPLACE FUNCTION pg_catalog.polygon(circle)
 RETURNS polygon
 LANGUAGE sql
 IMMUTABLE PARALLEL SAFE STRICT COST 1
AS $function$select pg_catalog.polygon(12, $1)$function$
]]></string>
			<comment><![CDATA[convert box to polygon]]></comment>
		</function>
		<function name="polygon_003" id="Function_1118585a" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.polygon(box)
 RETURNS polygon
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$box_poly$function$
CREATE OR REPLACE FUNCTION pg_catalog.polygon(path)
 RETURNS polygon
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$path_poly$function$
CREATE OR REPLACE FUNCTION pg_catalog.polygon(integer, circle)
 RETURNS polygon
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$circle_poly$function$
CREATE OR REPLACE FUNCTION pg_catalog.polygon(circle)
 RETURNS polygon
 LANGUAGE sql
 IMMUTABLE PARALLEL SAFE STRICT COST 1
AS $function$select pg_catalog.polygon(12, $1)$function$
]]></string>
			<comment><![CDATA[convert box to polygon]]></comment>
		</function>
		<function name="popen" id="Function_30a76df0" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.popen(path)
 RETURNS path
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$path_open$function$
]]></string>
			<comment><![CDATA[open path]]></comment>
		</function>
		<function name="position" id="Function_2b5930" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog."position"(bytea, bytea)
 RETURNS integer
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$byteapos$function$
CREATE OR REPLACE FUNCTION pg_catalog."position"(text, text)
 RETURNS integer
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$textpos$function$
CREATE OR REPLACE FUNCTION pg_catalog."position"(bit, bit)
 RETURNS integer
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$bitposition$function$
]]></string>
			<comment><![CDATA[position of sub-bitstring]]></comment>
		</function>
		<function name="position_001" id="Function_9b0aabe" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog."position"(bytea, bytea)
 RETURNS integer
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$byteapos$function$
CREATE OR REPLACE FUNCTION pg_catalog."position"(text, text)
 RETURNS integer
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$textpos$function$
CREATE OR REPLACE FUNCTION pg_catalog."position"(bit, bit)
 RETURNS integer
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$bitposition$function$
]]></string>
			<comment><![CDATA[position of sub-bitstring]]></comment>
		</function>
		<function name="position_002" id="Function_20feb19e" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog."position"(bytea, bytea)
 RETURNS integer
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$byteapos$function$
CREATE OR REPLACE FUNCTION pg_catalog."position"(text, text)
 RETURNS integer
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$textpos$function$
CREATE OR REPLACE FUNCTION pg_catalog."position"(bit, bit)
 RETURNS integer
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$bitposition$function$
]]></string>
			<comment><![CDATA[position of sub-bitstring]]></comment>
		</function>
		<function name="positionjoinsel" id="Function_d964248" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.positionjoinsel(internal, oid, internal, smallint, internal)
 RETURNS double precision
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$positionjoinsel$function$
]]></string>
			<comment><![CDATA[join selectivity for position-comparison operators]]></comment>
		</function>
		<function name="positionsel" id="Function_3465fec5" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.positionsel(internal, oid, internal, integer)
 RETURNS double precision
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$positionsel$function$
]]></string>
			<comment><![CDATA[restriction selectivity for position-comparison operators]]></comment>
		</function>
		<function name="postgresql_fdw_validator" id="Function_3f03786" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.postgresql_fdw_validator(text[], oid)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$postgresql_fdw_validator$function$
]]></string>
			<comment><![CDATA[(internal)]]></comment>
		</function>
		<function name="pow" id="Function_36071959" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pow(double precision, double precision)
 RETURNS double precision
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$dpow$function$
CREATE OR REPLACE FUNCTION pg_catalog.pow(numeric, numeric)
 RETURNS numeric
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$numeric_power$function$
]]></string>
			<comment><![CDATA[exponentiation]]></comment>
		</function>
		<function name="pow_001" id="Function_3b5e6f6a" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pow(double precision, double precision)
 RETURNS double precision
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$dpow$function$
CREATE OR REPLACE FUNCTION pg_catalog.pow(numeric, numeric)
 RETURNS numeric
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$numeric_power$function$
]]></string>
			<comment><![CDATA[exponentiation]]></comment>
		</function>
		<function name="power" id="Function_20d05b6d" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.power(double precision, double precision)
 RETURNS double precision
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$dpow$function$
CREATE OR REPLACE FUNCTION pg_catalog.power(numeric, numeric)
 RETURNS numeric
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$numeric_power$function$
]]></string>
			<comment><![CDATA[exponentiation]]></comment>
		</function>
		<function name="power_001" id="Function_13befdd1" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.power(double precision, double precision)
 RETURNS double precision
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$dpow$function$
CREATE OR REPLACE FUNCTION pg_catalog.power(numeric, numeric)
 RETURNS numeric
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$numeric_power$function$
]]></string>
			<comment><![CDATA[exponentiation]]></comment>
		</function>
		<function name="prsd_end" id="Function_2e21e28b" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.prsd_end(internal)
 RETURNS void
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$prsd_end$function$
]]></string>
			<comment><![CDATA[(internal)]]></comment>
		</function>
		<function name="prsd_headline" id="Function_14b4835d" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.prsd_headline(internal, internal, tsquery)
 RETURNS internal
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$prsd_headline$function$
]]></string>
			<comment><![CDATA[(internal)]]></comment>
		</function>
		<function name="prsd_lextype" id="Function_20fc322e" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.prsd_lextype(internal)
 RETURNS internal
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$prsd_lextype$function$
]]></string>
			<comment><![CDATA[(internal)]]></comment>
		</function>
		<function name="prsd_nexttoken" id="Function_3880411d" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.prsd_nexttoken(internal, internal, internal)
 RETURNS internal
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$prsd_nexttoken$function$
]]></string>
			<comment><![CDATA[(internal)]]></comment>
		</function>
		<function name="prsd_start" id="Function_190256d5" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.prsd_start(internal, integer)
 RETURNS internal
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$prsd_start$function$
]]></string>
			<comment><![CDATA[(internal)]]></comment>
		</function>
		<function name="pt_contained_circle" id="Function_23d6b52a" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pt_contained_circle(point, circle)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$pt_contained_circle$function$
]]></string>
			<comment><![CDATA[implementation of <@ operator]]></comment>
		</function>
		<function name="pt_contained_poly" id="Function_3a2db5e4" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pt_contained_poly(point, polygon)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$pt_contained_poly$function$
]]></string>
			<comment><![CDATA[implementation of <@ operator]]></comment>
		</function>
		<function name="query_to_xml" id="Function_5fb5cdc" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.query_to_xml(query text, nulls boolean, tableforest boolean, targetns text)
 RETURNS xml
 LANGUAGE internal
 STABLE STRICT COST 100
AS $function$query_to_xml$function$
]]></string>
			<comment><![CDATA[map query result to XML]]></comment>
		</function>
		<function name="query_to_xml_and_xmlschema" id="Function_a754034" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.query_to_xml_and_xmlschema(query text, nulls boolean, tableforest boolean, targetns text)
 RETURNS xml
 LANGUAGE internal
 STABLE STRICT COST 100
AS $function$query_to_xml_and_xmlschema$function$
]]></string>
			<comment><![CDATA[map query result and structure to XML and XML Schema]]></comment>
		</function>
		<function name="query_to_xmlschema" id="Function_246a2acc" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.query_to_xmlschema(query text, nulls boolean, tableforest boolean, targetns text)
 RETURNS xml
 LANGUAGE internal
 STABLE STRICT COST 100
AS $function$query_to_xmlschema$function$
]]></string>
			<comment><![CDATA[map query result structure to XML Schema]]></comment>
		</function>
		<function name="querytree" id="Function_346f720d" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.querytree(tsquery)
 RETURNS text
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$tsquerytree$function$
]]></string>
			<comment><![CDATA[show real useful query for GiST index]]></comment>
		</function>
		<function name="quote_ident" id="Function_1f447d41" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.quote_ident(text)
 RETURNS text
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$quote_ident$function$
]]></string>
			<comment><![CDATA[quote an identifier for usage in a querystring]]></comment>
		</function>
		<function name="quote_literal" id="Function_9d88858" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.quote_literal(text)
 RETURNS text
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$quote_literal$function$
CREATE OR REPLACE FUNCTION pg_catalog.quote_literal(anyelement)
 RETURNS text
 LANGUAGE sql
 STABLE PARALLEL SAFE STRICT COST 1
AS $function$select pg_catalog.quote_literal($1::pg_catalog.text)$function$
]]></string>
			<comment><![CDATA[quote a literal for usage in a querystring]]></comment>
		</function>
		<function name="quote_literal_001" id="Function_2167cbee" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.quote_literal(text)
 RETURNS text
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$quote_literal$function$
CREATE OR REPLACE FUNCTION pg_catalog.quote_literal(anyelement)
 RETURNS text
 LANGUAGE sql
 STABLE PARALLEL SAFE STRICT COST 1
AS $function$select pg_catalog.quote_literal($1::pg_catalog.text)$function$
]]></string>
			<comment><![CDATA[quote a literal for usage in a querystring]]></comment>
		</function>
		<function name="quote_nullable" id="Function_26a01b0e" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.quote_nullable(text)
 RETURNS text
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE
AS $function$quote_nullable$function$
CREATE OR REPLACE FUNCTION pg_catalog.quote_nullable(anyelement)
 RETURNS text
 LANGUAGE sql
 STABLE PARALLEL SAFE COST 1
AS $function$select pg_catalog.quote_nullable($1::pg_catalog.text)$function$
]]></string>
			<comment><![CDATA[quote a possibly-null literal for usage in a querystring]]></comment>
		</function>
		<function name="quote_nullable_001" id="Function_27d02191" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.quote_nullable(text)
 RETURNS text
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE
AS $function$quote_nullable$function$
CREATE OR REPLACE FUNCTION pg_catalog.quote_nullable(anyelement)
 RETURNS text
 LANGUAGE sql
 STABLE PARALLEL SAFE COST 1
AS $function$select pg_catalog.quote_nullable($1::pg_catalog.text)$function$
]]></string>
			<comment><![CDATA[quote a possibly-null literal for usage in a querystring]]></comment>
		</function>
		<function name="radians" id="Function_37a7150b" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.radians(double precision)
 RETURNS double precision
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$radians$function$
]]></string>
			<comment><![CDATA[degrees to radians]]></comment>
		</function>
		<function name="radius" id="Function_1a50a808" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.radius(circle)
 RETURNS double precision
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$circle_radius$function$
]]></string>
			<comment><![CDATA[radius of circle]]></comment>
		</function>
		<function name="random" id="Function_34e161b7" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.random()
 RETURNS double precision
 LANGUAGE internal
 PARALLEL RESTRICTED STRICT
AS $function$drandom$function$
]]></string>
			<comment><![CDATA[random value]]></comment>
		</function>
		<function name="range_adjacent" id="Function_cbdbfa0" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.range_adjacent(anyrange, anyrange)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$range_adjacent$function$
]]></string>
			<comment><![CDATA[implementation of -|- operator]]></comment>
		</function>
		<function name="range_after" id="Function_9e5fc50" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.range_after(anyrange, anyrange)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$range_after$function$
]]></string>
			<comment><![CDATA[implementation of >> operator]]></comment>
		</function>
		<function name="range_before" id="Function_1578821d" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.range_before(anyrange, anyrange)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$range_before$function$
]]></string>
			<comment><![CDATA[implementation of << operator]]></comment>
		</function>
		<function name="range_cmp" id="Function_2e582214" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.range_cmp(anyrange, anyrange)
 RETURNS integer
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$range_cmp$function$
]]></string>
			<comment><![CDATA[less-equal-greater]]></comment>
		</function>
		<function name="range_contained_by" id="Function_c0c556e" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.range_contained_by(anyrange, anyrange)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$range_contained_by$function$
]]></string>
			<comment><![CDATA[implementation of <@ operator]]></comment>
		</function>
		<function name="range_contains" id="Function_13a0851a" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.range_contains(anyrange, anyrange)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$range_contains$function$
]]></string>
			<comment><![CDATA[implementation of @> operator]]></comment>
		</function>
		<function name="range_contains_elem" id="Function_d4bc58f" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.range_contains_elem(anyrange, anyelement)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$range_contains_elem$function$
]]></string>
			<comment><![CDATA[implementation of @> operator]]></comment>
		</function>
		<function name="range_eq" id="Function_17410d68" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.range_eq(anyrange, anyrange)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$range_eq$function$
]]></string>
			<comment><![CDATA[implementation of = operator]]></comment>
		</function>
		<function name="range_ge" id="Function_33a941fb" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.range_ge(anyrange, anyrange)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$range_ge$function$
]]></string>
			<comment><![CDATA[implementation of >= operator]]></comment>
		</function>
		<function name="range_gist_compress" id="Function_218c3fb6" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.range_gist_compress(internal)
 RETURNS internal
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$range_gist_compress$function$
]]></string>
			<comment><![CDATA[GiST support]]></comment>
		</function>
		<function name="range_gist_consistent" id="Function_155dbca9" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.range_gist_consistent(internal, anyrange, smallint, oid, internal)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$range_gist_consistent$function$
]]></string>
			<comment><![CDATA[GiST support]]></comment>
		</function>
		<function name="range_gist_decompress" id="Function_212752e8" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.range_gist_decompress(internal)
 RETURNS internal
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$range_gist_decompress$function$
]]></string>
			<comment><![CDATA[GiST support]]></comment>
		</function>
		<function name="range_gist_fetch" id="Function_2ba612cc" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.range_gist_fetch(internal)
 RETURNS internal
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$range_gist_fetch$function$
]]></string>
			<comment><![CDATA[GiST support]]></comment>
		</function>
		<function name="range_gist_penalty" id="Function_1f853bb4" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.range_gist_penalty(internal, internal, internal)
 RETURNS internal
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$range_gist_penalty$function$
]]></string>
			<comment><![CDATA[GiST support]]></comment>
		</function>
		<function name="range_gist_picksplit" id="Function_2c7dfd4b" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.range_gist_picksplit(internal, internal)
 RETURNS internal
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$range_gist_picksplit$function$
]]></string>
			<comment><![CDATA[GiST support]]></comment>
		</function>
		<function name="range_gist_same" id="Function_e78dc05" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.range_gist_same(anyrange, anyrange, internal)
 RETURNS internal
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$range_gist_same$function$
]]></string>
			<comment><![CDATA[GiST support]]></comment>
		</function>
		<function name="range_gist_union" id="Function_26e2041c" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.range_gist_union(internal, internal)
 RETURNS anyrange
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$range_gist_union$function$
]]></string>
			<comment><![CDATA[GiST support]]></comment>
		</function>
		<function name="range_gt" id="Function_6d9a5d1" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.range_gt(anyrange, anyrange)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$range_gt$function$
]]></string>
			<comment><![CDATA[implementation of > operator]]></comment>
		</function>
		<function name="range_in" id="Function_326a91a9" isSystem="false" >
			<comment><![CDATA[I/O]]></comment>
		</function>
		<function name="range_intersect" id="Function_4cac776" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.range_intersect(anyrange, anyrange)
 RETURNS anyrange
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$range_intersect$function$
]]></string>
			<comment><![CDATA[implementation of * operator]]></comment>
		</function>
		<function name="range_le" id="Function_1053ee23" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.range_le(anyrange, anyrange)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$range_le$function$
]]></string>
			<comment><![CDATA[implementation of <= operator]]></comment>
		</function>
		<function name="range_lt" id="Function_119f1b1d" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.range_lt(anyrange, anyrange)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$range_lt$function$
]]></string>
			<comment><![CDATA[implementation of < operator]]></comment>
		</function>
		<function name="range_merge" id="Function_5bbc34c" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.range_merge(anyrange, anyrange)
 RETURNS anyrange
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$range_merge$function$
]]></string>
			<comment><![CDATA[the smallest range which includes both of the given ranges]]></comment>
		</function>
		<function name="range_minus" id="Function_5d52235" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.range_minus(anyrange, anyrange)
 RETURNS anyrange
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$range_minus$function$
]]></string>
			<comment><![CDATA[implementation of - operator]]></comment>
		</function>
		<function name="range_ne" id="Function_1e405e3f" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.range_ne(anyrange, anyrange)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$range_ne$function$
]]></string>
			<comment><![CDATA[implementation of <> operator]]></comment>
		</function>
		<function name="range_out" id="Function_12978a30" isSystem="false" >
			<comment><![CDATA[I/O]]></comment>
		</function>
		<function name="range_overlaps" id="Function_30b72eaf" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.range_overlaps(anyrange, anyrange)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$range_overlaps$function$
]]></string>
			<comment><![CDATA[implementation of && operator]]></comment>
		</function>
		<function name="range_overleft" id="Function_38961d04" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.range_overleft(anyrange, anyrange)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$range_overleft$function$
]]></string>
			<comment><![CDATA[implementation of &< operator]]></comment>
		</function>
		<function name="range_overright" id="Function_32a099aa" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.range_overright(anyrange, anyrange)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$range_overright$function$
]]></string>
			<comment><![CDATA[implementation of &> operator]]></comment>
		</function>
		<function name="range_recv" id="Function_228938b4" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.range_recv(internal, oid, integer)
 RETURNS anyrange
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$range_recv$function$
]]></string>
			<comment><![CDATA[I/O]]></comment>
		</function>
		<function name="range_send" id="Function_1c8ca13a" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.range_send(anyrange)
 RETURNS bytea
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$range_send$function$
]]></string>
			<comment><![CDATA[I/O]]></comment>
		</function>
		<function name="range_typanalyze" id="Function_a1178c7" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.range_typanalyze(internal)
 RETURNS boolean
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$range_typanalyze$function$
]]></string>
			<comment><![CDATA[range typanalyze]]></comment>
		</function>
		<function name="range_union" id="Function_26fdc07b" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.range_union(anyrange, anyrange)
 RETURNS anyrange
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$range_union$function$
]]></string>
			<comment><![CDATA[implementation of + operator]]></comment>
		</function>
		<function name="rangesel" id="Function_3abc6ed7" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.rangesel(internal, oid, internal, integer)
 RETURNS double precision
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$rangesel$function$
]]></string>
			<comment><![CDATA[restriction selectivity for range operators]]></comment>
		</function>
		<function name="rank" id="Function_e255475" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.rank()
 RETURNS bigint
 LANGUAGE internal
 WINDOW IMMUTABLE PARALLEL SAFE
AS $function$window_rank$function$
]]></string>
			<comment><![CDATA[integer rank with gaps]]></comment>
		</function>
		<function name="rank_001" id="Function_219586a1" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.rank()
 RETURNS bigint
 LANGUAGE internal
 WINDOW IMMUTABLE PARALLEL SAFE
AS $function$window_rank$function$
]]></string>
			<comment><![CDATA[integer rank with gaps]]></comment>
		</function>
		<function name="rank_final" id="Function_2a0dbaa5" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.rank_final(internal, VARIADIC "any")
 RETURNS bigint
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE
AS $function$hypothetical_rank_final$function$
]]></string>
			<comment><![CDATA[aggregate final function]]></comment>
		</function>
		<function name="record_eq" id="Function_1ce49ca8" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.record_eq(record, record)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$record_eq$function$
]]></string>
			<comment><![CDATA[implementation of = operator]]></comment>
		</function>
		<function name="record_ge" id="Function_1d69d00d" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.record_ge(record, record)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$record_ge$function$
]]></string>
			<comment><![CDATA[implementation of >= operator]]></comment>
		</function>
		<function name="record_gt" id="Function_1d9eb439" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.record_gt(record, record)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$record_gt$function$
]]></string>
			<comment><![CDATA[implementation of > operator]]></comment>
		</function>
		<function name="record_image_eq" id="Function_28ab7d66" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.record_image_eq(record, record)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$record_image_eq$function$
]]></string>
			<comment><![CDATA[implementation of *= operator]]></comment>
		</function>
		<function name="record_image_ge" id="Function_9365767" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.record_image_ge(record, record)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$record_image_ge$function$
]]></string>
			<comment><![CDATA[implementation of *>= operator]]></comment>
		</function>
		<function name="record_image_gt" id="Function_14c5560e" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.record_image_gt(record, record)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$record_image_gt$function$
]]></string>
			<comment><![CDATA[implementation of *> operator]]></comment>
		</function>
		<function name="record_image_le" id="Function_be033a4" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.record_image_le(record, record)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$record_image_le$function$
]]></string>
			<comment><![CDATA[implementation of *<= operator]]></comment>
		</function>
		<function name="record_image_lt" id="Function_15ec6708" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.record_image_lt(record, record)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$record_image_lt$function$
]]></string>
			<comment><![CDATA[implementation of *< operator]]></comment>
		</function>
		<function name="record_image_ne" id="Function_710c83e" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.record_image_ne(record, record)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$record_image_ne$function$
]]></string>
			<comment><![CDATA[implementation of *<> operator]]></comment>
		</function>
		<function name="record_in" id="Function_145b01b5" isSystem="false" >
			<comment><![CDATA[I/O]]></comment>
		</function>
		<function name="record_le" id="Function_d2477ad" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.record_le(record, record)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$record_le$function$
]]></string>
			<comment><![CDATA[implementation of <= operator]]></comment>
		</function>
		<function name="record_lt" id="Function_29b9a4f8" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.record_lt(record, record)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$record_lt$function$
]]></string>
			<comment><![CDATA[implementation of < operator]]></comment>
		</function>
		<function name="record_ne" id="Function_4d4a8" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.record_ne(record, record)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$record_ne$function$
]]></string>
			<comment><![CDATA[implementation of <> operator]]></comment>
		</function>
		<function name="record_out" id="Function_10ab9319" isSystem="false" >
			<comment><![CDATA[I/O]]></comment>
		</function>
		<function name="record_recv" id="Function_dbdc04d" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.record_recv(internal, oid, integer)
 RETURNS record
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$record_recv$function$
]]></string>
			<comment><![CDATA[I/O]]></comment>
		</function>
		<function name="record_send" id="Function_a08284" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.record_send(record)
 RETURNS bytea
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$record_send$function$
]]></string>
			<comment><![CDATA[I/O]]></comment>
		</function>
		<function name="regclass" id="Function_30a985a5" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.regclass(text)
 RETURNS regclass
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$text_regclass$function$
]]></string>
			<comment><![CDATA[convert text to regclass]]></comment>
		</function>
		<function name="regclassin" id="Function_1ca6f738" isSystem="false" >
			<comment><![CDATA[I/O]]></comment>
		</function>
		<function name="regclassout" id="Function_14dc254f" isSystem="false" >
			<comment><![CDATA[I/O]]></comment>
		</function>
		<function name="regclassrecv" id="Function_2f02f7c" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.regclassrecv(internal)
 RETURNS regclass
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$regclassrecv$function$
]]></string>
			<comment><![CDATA[I/O]]></comment>
		</function>
		<function name="regclasssend" id="Function_1bf326f8" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.regclasssend(regclass)
 RETURNS bytea
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$regclasssend$function$
]]></string>
			<comment><![CDATA[I/O]]></comment>
		</function>
		<function name="regconfigin" id="Function_33bfe23e" isSystem="false" >
			<comment><![CDATA[I/O]]></comment>
		</function>
		<function name="regconfigout" id="Function_229e1b98" isSystem="false" >
			<comment><![CDATA[I/O]]></comment>
		</function>
		<function name="regconfigrecv" id="Function_265dd82d" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.regconfigrecv(internal)
 RETURNS regconfig
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$regconfigrecv$function$
]]></string>
			<comment><![CDATA[I/O]]></comment>
		</function>
		<function name="regconfigsend" id="Function_ec7064b" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.regconfigsend(regconfig)
 RETURNS bytea
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$regconfigsend$function$
]]></string>
			<comment><![CDATA[I/O]]></comment>
		</function>
		<function name="regdictionaryin" id="Function_d060607" isSystem="false" >
			<comment><![CDATA[I/O]]></comment>
		</function>
		<function name="regdictionaryout" id="Function_2086ad86" isSystem="false" >
			<comment><![CDATA[I/O]]></comment>
		</function>
		<function name="regdictionaryrecv" id="Function_54895b8" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.regdictionaryrecv(internal)
 RETURNS regdictionary
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$regdictionaryrecv$function$
]]></string>
			<comment><![CDATA[I/O]]></comment>
		</function>
		<function name="regdictionarysend" id="Function_3cdaa8" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.regdictionarysend(regdictionary)
 RETURNS bytea
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$regdictionarysend$function$
]]></string>
			<comment><![CDATA[I/O]]></comment>
		</function>
		<function name="regexeqjoinsel" id="Function_2e924e50" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.regexeqjoinsel(internal, oid, internal, smallint, internal)
 RETURNS double precision
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$regexeqjoinsel$function$
]]></string>
			<comment><![CDATA[join selectivity of regex match]]></comment>
		</function>
		<function name="regexeqsel" id="Function_1325ee4f" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.regexeqsel(internal, oid, internal, integer)
 RETURNS double precision
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$regexeqsel$function$
]]></string>
			<comment><![CDATA[restriction selectivity of regex match]]></comment>
		</function>
		<function name="regexnejoinsel" id="Function_24bb3d23" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.regexnejoinsel(internal, oid, internal, smallint, internal)
 RETURNS double precision
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$regexnejoinsel$function$
]]></string>
			<comment><![CDATA[join selectivity of regex non-match]]></comment>
		</function>
		<function name="regexnesel" id="Function_35afea9f" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.regexnesel(internal, oid, internal, integer)
 RETURNS double precision
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$regexnesel$function$
]]></string>
			<comment><![CDATA[restriction selectivity of regex non-match]]></comment>
		</function>
		<function name="regexp_matches" id="Function_17d6860c" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.regexp_matches(text, text)
 RETURNS SETOF text[]
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT ROWS 1
AS $function$regexp_matches_no_flags$function$
CREATE OR REPLACE FUNCTION pg_catalog.regexp_matches(text, text, text)
 RETURNS SETOF text[]
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT ROWS 10
AS $function$regexp_matches$function$
]]></string>
			<comment><![CDATA[find all match groups for regexp]]></comment>
		</function>
		<function name="regexp_matches_001" id="Function_2c8f179f" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.regexp_matches(text, text)
 RETURNS SETOF text[]
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT ROWS 1
AS $function$regexp_matches_no_flags$function$
CREATE OR REPLACE FUNCTION pg_catalog.regexp_matches(text, text, text)
 RETURNS SETOF text[]
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT ROWS 10
AS $function$regexp_matches$function$
]]></string>
			<comment><![CDATA[find all match groups for regexp]]></comment>
		</function>
		<function name="regexp_replace" id="Function_3619e5b8" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.regexp_replace(text, text, text)
 RETURNS text
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$textregexreplace_noopt$function$
CREATE OR REPLACE FUNCTION pg_catalog.regexp_replace(text, text, text, text)
 RETURNS text
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$textregexreplace$function$
]]></string>
			<comment><![CDATA[replace text using regexp]]></comment>
		</function>
		<function name="regexp_replace_001" id="Function_204e9206" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.regexp_replace(text, text, text)
 RETURNS text
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$textregexreplace_noopt$function$
CREATE OR REPLACE FUNCTION pg_catalog.regexp_replace(text, text, text, text)
 RETURNS text
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$textregexreplace$function$
]]></string>
			<comment><![CDATA[replace text using regexp]]></comment>
		</function>
		<function name="regexp_split_to_array" id="Function_3f4afd3" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.regexp_split_to_array(text, text)
 RETURNS text[]
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$regexp_split_to_array_no_flags$function$
CREATE OR REPLACE FUNCTION pg_catalog.regexp_split_to_array(text, text, text)
 RETURNS text[]
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$regexp_split_to_array$function$
]]></string>
			<comment><![CDATA[split string by pattern]]></comment>
		</function>
		<function name="regexp_split_to_array_001" id="Function_110cf7ab" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.regexp_split_to_array(text, text)
 RETURNS text[]
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$regexp_split_to_array_no_flags$function$
CREATE OR REPLACE FUNCTION pg_catalog.regexp_split_to_array(text, text, text)
 RETURNS text[]
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$regexp_split_to_array$function$
]]></string>
			<comment><![CDATA[split string by pattern]]></comment>
		</function>
		<function name="regexp_split_to_table" id="Function_1a7156ea" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.regexp_split_to_table(text, text)
 RETURNS SETOF text
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$regexp_split_to_table_no_flags$function$
CREATE OR REPLACE FUNCTION pg_catalog.regexp_split_to_table(text, text, text)
 RETURNS SETOF text
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$regexp_split_to_table$function$
]]></string>
			<comment><![CDATA[split string by pattern]]></comment>
		</function>
		<function name="regexp_split_to_table_001" id="Function_37c560e1" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.regexp_split_to_table(text, text)
 RETURNS SETOF text
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$regexp_split_to_table_no_flags$function$
CREATE OR REPLACE FUNCTION pg_catalog.regexp_split_to_table(text, text, text)
 RETURNS SETOF text
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$regexp_split_to_table$function$
]]></string>
			<comment><![CDATA[split string by pattern]]></comment>
		</function>
		<function name="regnamespacein" id="Function_7504808" isSystem="false" >
			<comment><![CDATA[I/O]]></comment>
		</function>
		<function name="regnamespaceout" id="Function_2b153bc2" isSystem="false" >
			<comment><![CDATA[I/O]]></comment>
		</function>
		<function name="regnamespacerecv" id="Function_367c189a" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.regnamespacerecv(internal)
 RETURNS regnamespace
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$regnamespacerecv$function$
]]></string>
			<comment><![CDATA[I/O]]></comment>
		</function>
		<function name="regnamespacesend" id="Function_3182ad3e" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.regnamespacesend(regnamespace)
 RETURNS bytea
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$regnamespacesend$function$
]]></string>
			<comment><![CDATA[I/O]]></comment>
		</function>
		<function name="regoperatorin" id="Function_34b33c98" isSystem="false" >
			<comment><![CDATA[I/O]]></comment>
		</function>
		<function name="regoperatorout" id="Function_38921238" isSystem="false" >
			<comment><![CDATA[I/O]]></comment>
		</function>
		<function name="regoperatorrecv" id="Function_35e1b44f" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.regoperatorrecv(internal)
 RETURNS regoperator
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$regoperatorrecv$function$
]]></string>
			<comment><![CDATA[I/O]]></comment>
		</function>
		<function name="regoperatorsend" id="Function_1beee282" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.regoperatorsend(regoperator)
 RETURNS bytea
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$regoperatorsend$function$
]]></string>
			<comment><![CDATA[I/O]]></comment>
		</function>
		<function name="regoperin" id="Function_28784ed1" isSystem="false" >
			<comment><![CDATA[I/O]]></comment>
		</function>
		<function name="regoperout" id="Function_13cc1250" isSystem="false" >
			<comment><![CDATA[I/O]]></comment>
		</function>
		<function name="regoperrecv" id="Function_1c226995" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.regoperrecv(internal)
 RETURNS regoper
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$regoperrecv$function$
]]></string>
			<comment><![CDATA[I/O]]></comment>
		</function>
		<function name="regopersend" id="Function_351d03f0" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.regopersend(regoper)
 RETURNS bytea
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$regopersend$function$
]]></string>
			<comment><![CDATA[I/O]]></comment>
		</function>
		<function name="regprocedurein" id="Function_2610f501" isSystem="false" >
			<comment><![CDATA[I/O]]></comment>
		</function>
		<function name="regprocedureout" id="Function_14dff889" isSystem="false" >
			<comment><![CDATA[I/O]]></comment>
		</function>
		<function name="regprocedurerecv" id="Function_21fb6bb0" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.regprocedurerecv(internal)
 RETURNS regprocedure
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$regprocedurerecv$function$
]]></string>
			<comment><![CDATA[I/O]]></comment>
		</function>
		<function name="regproceduresend" id="Function_6a8f2fd" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.regproceduresend(regprocedure)
 RETURNS bytea
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$regproceduresend$function$
]]></string>
			<comment><![CDATA[I/O]]></comment>
		</function>
		<function name="regprocin" id="Function_17553696" isSystem="false" >
			<comment><![CDATA[I/O]]></comment>
		</function>
		<function name="regprocout" id="Function_327e8e85" isSystem="false" >
			<comment><![CDATA[I/O]]></comment>
		</function>
		<function name="regprocrecv" id="Function_117dfdd9" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.regprocrecv(internal)
 RETURNS regproc
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$regprocrecv$function$
]]></string>
			<comment><![CDATA[I/O]]></comment>
		</function>
		<function name="regprocsend" id="Function_36fbdb0f" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.regprocsend(regproc)
 RETURNS bytea
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$regprocsend$function$
]]></string>
			<comment><![CDATA[I/O]]></comment>
		</function>
		<function name="regr_avgx" id="Function_2938fc9a" isSystem="false" >
			<comment><![CDATA[average of the independent variable (sum(X)/N)]]></comment>
		</function>
		<function name="regr_avgy" id="Function_348afccb" isSystem="false" >
			<comment><![CDATA[average of the dependent variable (sum(Y)/N)]]></comment>
		</function>
		<function name="regr_count" id="Function_1dbc1b98" isSystem="false" >
			<comment><![CDATA[number of input rows in which both expressions are not null]]></comment>
		</function>
		<function name="regr_intercept" id="Function_324a1ce" isSystem="false" >
			<comment><![CDATA[y-intercept of the least-squares-fit linear equation determined by the (X, Y) pairs]]></comment>
		</function>
		<function name="regr_r2" id="Function_284f07f2" isSystem="false" >
			<comment><![CDATA[square of the correlation coefficient]]></comment>
		</function>
		<function name="regr_slope" id="Function_3ac75295" isSystem="false" >
			<comment><![CDATA[slope of the least-squares-fit linear equation determined by the (X, Y) pairs]]></comment>
		</function>
		<function name="regr_sxx" id="Function_34872ed0" isSystem="false" >
			<comment><![CDATA[sum of squares of the independent variable (sum(X^2) - sum(X)^2/N)]]></comment>
		</function>
		<function name="regr_sxy" id="Function_14e13dd8" isSystem="false" >
			<comment><![CDATA[sum of products of independent times dependent variable (sum(X*Y) - sum(X) * sum(Y)/N)]]></comment>
		</function>
		<function name="regr_syy" id="Function_1c384b64" isSystem="false" >
			<comment><![CDATA[sum of squares of the dependent variable (sum(Y^2) - sum(Y)^2/N)]]></comment>
		</function>
		<function name="regrolein" id="Function_752df88" isSystem="false" >
			<comment><![CDATA[I/O]]></comment>
		</function>
		<function name="regroleout" id="Function_15382232" isSystem="false" >
			<comment><![CDATA[I/O]]></comment>
		</function>
		<function name="regrolerecv" id="Function_177b274c" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.regrolerecv(internal)
 RETURNS regrole
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$regrolerecv$function$
]]></string>
			<comment><![CDATA[I/O]]></comment>
		</function>
		<function name="regrolesend" id="Function_7ed55f6" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.regrolesend(regrole)
 RETURNS bytea
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$regrolesend$function$
]]></string>
			<comment><![CDATA[I/O]]></comment>
		</function>
		<function name="regtypein" id="Function_33bc791c" isSystem="false" >
			<comment><![CDATA[I/O]]></comment>
		</function>
		<function name="regtypeout" id="Function_3252eee7" isSystem="false" >
			<comment><![CDATA[I/O]]></comment>
		</function>
		<function name="regtyperecv" id="Function_bca0b48" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.regtyperecv(internal)
 RETURNS regtype
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$regtyperecv$function$
]]></string>
			<comment><![CDATA[I/O]]></comment>
		</function>
		<function name="regtypesend" id="Function_62d3436" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.regtypesend(regtype)
 RETURNS bytea
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$regtypesend$function$
]]></string>
			<comment><![CDATA[I/O]]></comment>
		</function>
		<function name="reltime" id="Function_248d0d42" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.reltime(interval)
 RETURNS reltime
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$interval_reltime$function$
]]></string>
			<comment><![CDATA[convert interval to reltime]]></comment>
		</function>
		<function name="reltimeeq" id="Function_3047676b" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.reltimeeq(reltime, reltime)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT LEAKPROOF
AS $function$reltimeeq$function$
]]></string>
			<comment><![CDATA[implementation of = operator]]></comment>
		</function>
		<function name="reltimege" id="Function_36b4801a" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.reltimege(reltime, reltime)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT LEAKPROOF
AS $function$reltimege$function$
]]></string>
			<comment><![CDATA[implementation of >= operator]]></comment>
		</function>
		<function name="reltimegt" id="Function_2b6d9652" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.reltimegt(reltime, reltime)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT LEAKPROOF
AS $function$reltimegt$function$
]]></string>
			<comment><![CDATA[implementation of > operator]]></comment>
		</function>
		<function name="reltimein" id="Function_30bc33d3" isSystem="false" >
			<comment><![CDATA[I/O]]></comment>
		</function>
		<function name="reltimele" id="Function_8a1572a" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.reltimele(reltime, reltime)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT LEAKPROOF
AS $function$reltimele$function$
]]></string>
			<comment><![CDATA[implementation of <= operator]]></comment>
		</function>
		<function name="reltimelt" id="Function_2af016dd" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.reltimelt(reltime, reltime)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT LEAKPROOF
AS $function$reltimelt$function$
]]></string>
			<comment><![CDATA[implementation of < operator]]></comment>
		</function>
		<function name="reltimene" id="Function_1cc44b06" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.reltimene(reltime, reltime)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT LEAKPROOF
AS $function$reltimene$function$
]]></string>
			<comment><![CDATA[implementation of <> operator]]></comment>
		</function>
		<function name="reltimeout" id="Function_237f0e2c" isSystem="false" >
			<comment><![CDATA[I/O]]></comment>
		</function>
		<function name="reltimerecv" id="Function_ee6c008" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.reltimerecv(internal)
 RETURNS reltime
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$reltimerecv$function$
]]></string>
			<comment><![CDATA[I/O]]></comment>
		</function>
		<function name="reltimesend" id="Function_d4f8a9e" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.reltimesend(reltime)
 RETURNS bytea
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$reltimesend$function$
]]></string>
			<comment><![CDATA[I/O]]></comment>
		</function>
		<function name="repeat" id="Function_36ff2549" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.repeat(text, integer)
 RETURNS text
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$repeat$function$
]]></string>
			<comment><![CDATA[replicate string n times]]></comment>
		</function>
		<function name="replace" id="Function_a750539" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.replace(text, text, text)
 RETURNS text
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$replace_text$function$
]]></string>
			<comment><![CDATA[replace all occurrences in string of old_substr with new_substr]]></comment>
		</function>
		<function name="reverse" id="Function_18911de5" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.reverse(text)
 RETURNS text
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$text_reverse$function$
]]></string>
			<comment><![CDATA[reverse text]]></comment>
		</function>
		<function name="right" id="Function_a160777" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog."right"(text, integer)
 RETURNS text
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$text_right$function$
]]></string>
			<comment><![CDATA[extract the last n characters]]></comment>
		</function>
		<function name="round" id="Function_30e66585" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.round(double precision)
 RETURNS double precision
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$dround$function$
CREATE OR REPLACE FUNCTION pg_catalog.round(numeric)
 RETURNS numeric
 LANGUAGE sql
 IMMUTABLE PARALLEL SAFE STRICT COST 1
AS $function$select pg_catalog.round($1,0)$function$
CREATE OR REPLACE FUNCTION pg_catalog.round(numeric, integer)
 RETURNS numeric
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$numeric_round$function$
]]></string>
			<comment><![CDATA[round to nearest integer]]></comment>
		</function>
		<function name="round_001" id="Function_ed18ac" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.round(double precision)
 RETURNS double precision
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$dround$function$
CREATE OR REPLACE FUNCTION pg_catalog.round(numeric)
 RETURNS numeric
 LANGUAGE sql
 IMMUTABLE PARALLEL SAFE STRICT COST 1
AS $function$select pg_catalog.round($1,0)$function$
CREATE OR REPLACE FUNCTION pg_catalog.round(numeric, integer)
 RETURNS numeric
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$numeric_round$function$
]]></string>
			<comment><![CDATA[round to nearest integer]]></comment>
		</function>
		<function name="round_002" id="Function_224d8e67" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.round(double precision)
 RETURNS double precision
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$dround$function$
CREATE OR REPLACE FUNCTION pg_catalog.round(numeric)
 RETURNS numeric
 LANGUAGE sql
 IMMUTABLE PARALLEL SAFE STRICT COST 1
AS $function$select pg_catalog.round($1,0)$function$
CREATE OR REPLACE FUNCTION pg_catalog.round(numeric, integer)
 RETURNS numeric
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$numeric_round$function$
]]></string>
			<comment><![CDATA[round to nearest integer]]></comment>
		</function>
		<function name="row_number" id="Function_e65bc5f" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.row_number()
 RETURNS bigint
 LANGUAGE internal
 WINDOW IMMUTABLE PARALLEL SAFE
AS $function$window_row_number$function$
]]></string>
			<comment><![CDATA[row number within partition]]></comment>
		</function>
		<function name="row_security_active" id="Function_246221d7" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.row_security_active(text)
 RETURNS boolean
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$row_security_active_name$function$
CREATE OR REPLACE FUNCTION pg_catalog.row_security_active(oid)
 RETURNS boolean
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$row_security_active$function$
]]></string>
			<comment><![CDATA[row security for current context active on table by table oid]]></comment>
		</function>
		<function name="row_security_active_001" id="Function_df54b34" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.row_security_active(text)
 RETURNS boolean
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$row_security_active_name$function$
CREATE OR REPLACE FUNCTION pg_catalog.row_security_active(oid)
 RETURNS boolean
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$row_security_active$function$
]]></string>
			<comment><![CDATA[row security for current context active on table by table oid]]></comment>
		</function>
		<function name="row_to_json" id="Function_af04b06" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.row_to_json(record)
 RETURNS json
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$row_to_json$function$
CREATE OR REPLACE FUNCTION pg_catalog.row_to_json(record, boolean)
 RETURNS json
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$row_to_json_pretty$function$
]]></string>
			<comment><![CDATA[map row to json]]></comment>
		</function>
		<function name="row_to_json_001" id="Function_310fc7a6" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.row_to_json(record)
 RETURNS json
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$row_to_json$function$
CREATE OR REPLACE FUNCTION pg_catalog.row_to_json(record, boolean)
 RETURNS json
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$row_to_json_pretty$function$
]]></string>
			<comment><![CDATA[map row to json]]></comment>
		</function>
		<function name="rpad" id="Function_105cd0a5" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.rpad(text, integer)
 RETURNS text
 LANGUAGE sql
 IMMUTABLE PARALLEL SAFE STRICT COST 1
AS $function$select pg_catalog.rpad($1, $2, ' ')$function$
CREATE OR REPLACE FUNCTION pg_catalog.rpad(text, integer, text)
 RETURNS text
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$rpad$function$
]]></string>
			<comment><![CDATA[right-pad string to length]]></comment>
		</function>
		<function name="rpad_001" id="Function_170d87e0" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.rpad(text, integer)
 RETURNS text
 LANGUAGE sql
 IMMUTABLE PARALLEL SAFE STRICT COST 1
AS $function$select pg_catalog.rpad($1, $2, ' ')$function$
CREATE OR REPLACE FUNCTION pg_catalog.rpad(text, integer, text)
 RETURNS text
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$rpad$function$
]]></string>
			<comment><![CDATA[right-pad string to length]]></comment>
		</function>
		<function name="rtrim" id="Function_258b3584" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.rtrim(text)
 RETURNS text
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$rtrim1$function$
CREATE OR REPLACE FUNCTION pg_catalog.rtrim(text, text)
 RETURNS text
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$rtrim$function$
]]></string>
			<comment><![CDATA[trim selected characters from right end of string]]></comment>
		</function>
		<function name="rtrim_001" id="Function_102ff5c4" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.rtrim(text)
 RETURNS text
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$rtrim1$function$
CREATE OR REPLACE FUNCTION pg_catalog.rtrim(text, text)
 RETURNS text
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$rtrim$function$
]]></string>
			<comment><![CDATA[trim selected characters from right end of string]]></comment>
		</function>
		<function name="scalargtjoinsel" id="Function_2caad1f4" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.scalargtjoinsel(internal, oid, internal, smallint, internal)
 RETURNS double precision
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$scalargtjoinsel$function$
]]></string>
			<comment><![CDATA[join selectivity of > and related operators on scalar datatypes]]></comment>
		</function>
		<function name="scalargtsel" id="Function_1a125257" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.scalargtsel(internal, oid, internal, integer)
 RETURNS double precision
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$scalargtsel$function$
]]></string>
			<comment><![CDATA[restriction selectivity of > and related operators on scalar datatypes]]></comment>
		</function>
		<function name="scalarltjoinsel" id="Function_2dfdbcf" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.scalarltjoinsel(internal, oid, internal, smallint, internal)
 RETURNS double precision
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$scalarltjoinsel$function$
]]></string>
			<comment><![CDATA[join selectivity of < and related operators on scalar datatypes]]></comment>
		</function>
		<function name="scalarltsel" id="Function_129650a6" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.scalarltsel(internal, oid, internal, integer)
 RETURNS double precision
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$scalarltsel$function$
]]></string>
			<comment><![CDATA[restriction selectivity of < and related operators on scalar datatypes]]></comment>
		</function>
		<function name="scale" id="Function_78be598" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.scale(numeric)
 RETURNS integer
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$numeric_scale$function$
]]></string>
			<comment><![CDATA[number of decimal digits in the fractional part]]></comment>
		</function>
		<function name="schema_to_xml" id="Function_e0f2c1e" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.schema_to_xml(schema name, nulls boolean, tableforest boolean, targetns text)
 RETURNS xml
 LANGUAGE internal
 STABLE PARALLEL RESTRICTED STRICT COST 100
AS $function$schema_to_xml$function$
]]></string>
			<comment><![CDATA[map schema contents to XML]]></comment>
		</function>
		<function name="schema_to_xml_and_xmlschema" id="Function_7950d78" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.schema_to_xml_and_xmlschema(schema name, nulls boolean, tableforest boolean, targetns text)
 RETURNS xml
 LANGUAGE internal
 STABLE PARALLEL RESTRICTED STRICT COST 100
AS $function$schema_to_xml_and_xmlschema$function$
]]></string>
			<comment><![CDATA[map schema contents and structure to XML and XML Schema]]></comment>
		</function>
		<function name="schema_to_xmlschema" id="Function_20800088" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.schema_to_xmlschema(schema name, nulls boolean, tableforest boolean, targetns text)
 RETURNS xml
 LANGUAGE internal
 STABLE PARALLEL RESTRICTED STRICT COST 100
AS $function$schema_to_xmlschema$function$
]]></string>
			<comment><![CDATA[map schema structure to XML Schema]]></comment>
		</function>
		<function name="session_user" id="Function_443d345" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog."session_user"()
 RETURNS name
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$session_user$function$
]]></string>
			<comment><![CDATA[session user name]]></comment>
		</function>
		<function name="set_bit" id="Function_2d97599c" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.set_bit(bytea, integer, integer)
 RETURNS bytea
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$byteaSetBit$function$
CREATE OR REPLACE FUNCTION pg_catalog.set_bit(bit, integer, integer)
 RETURNS bit
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$bitsetbit$function$
]]></string>
			<comment><![CDATA[set bit]]></comment>
		</function>
		<function name="set_bit_001" id="Function_1a1e83d0" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.set_bit(bytea, integer, integer)
 RETURNS bytea
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$byteaSetBit$function$
CREATE OR REPLACE FUNCTION pg_catalog.set_bit(bit, integer, integer)
 RETURNS bit
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$bitsetbit$function$
]]></string>
			<comment><![CDATA[set bit]]></comment>
		</function>
		<function name="set_byte" id="Function_9aba131" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.set_byte(bytea, integer, integer)
 RETURNS bytea
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$byteaSetByte$function$
]]></string>
			<comment><![CDATA[set byte]]></comment>
		</function>
		<function name="set_config" id="Function_418196a" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.set_config(text, text, boolean)
 RETURNS text
 LANGUAGE internal
AS $function$set_config_by_name$function$
]]></string>
			<comment><![CDATA[SET X as a function]]></comment>
		</function>
		<function name="set_masklen" id="Function_27d03511" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.set_masklen(cidr, integer)
 RETURNS cidr
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$cidr_set_masklen$function$
CREATE OR REPLACE FUNCTION pg_catalog.set_masklen(inet, integer)
 RETURNS inet
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$inet_set_masklen$function$
]]></string>
			<comment><![CDATA[change netmask of inet]]></comment>
		</function>
		<function name="set_masklen_001" id="Function_3ac05969" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.set_masklen(cidr, integer)
 RETURNS cidr
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$cidr_set_masklen$function$
CREATE OR REPLACE FUNCTION pg_catalog.set_masklen(inet, integer)
 RETURNS inet
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$inet_set_masklen$function$
]]></string>
			<comment><![CDATA[change netmask of inet]]></comment>
		</function>
		<function name="setseed" id="Function_11a9937b" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.setseed(double precision)
 RETURNS void
 LANGUAGE internal
 PARALLEL RESTRICTED STRICT
AS $function$setseed$function$
]]></string>
			<comment><![CDATA[set random seed]]></comment>
		</function>
		<function name="setval" id="Function_28ead7e5" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.setval(regclass, bigint)
 RETURNS bigint
 LANGUAGE internal
 STRICT
AS $function$setval_oid$function$
CREATE OR REPLACE FUNCTION pg_catalog.setval(regclass, bigint, boolean)
 RETURNS bigint
 LANGUAGE internal
 STRICT
AS $function$setval3_oid$function$
]]></string>
			<comment><![CDATA[set sequence value]]></comment>
		</function>
		<function name="setval_001" id="Function_c9e15e0" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.setval(regclass, bigint)
 RETURNS bigint
 LANGUAGE internal
 STRICT
AS $function$setval_oid$function$
CREATE OR REPLACE FUNCTION pg_catalog.setval(regclass, bigint, boolean)
 RETURNS bigint
 LANGUAGE internal
 STRICT
AS $function$setval3_oid$function$
]]></string>
			<comment><![CDATA[set sequence value]]></comment>
		</function>
		<function name="setweight" id="Function_289d22b2" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.setweight(tsvector, "char")
 RETURNS tsvector
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$tsvector_setweight$function$
CREATE OR REPLACE FUNCTION pg_catalog.setweight(tsvector, "char", text[])
 RETURNS tsvector
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$tsvector_setweight_by_filter$function$
]]></string>
			<comment><![CDATA[set given weight for given lexemes]]></comment>
		</function>
		<function name="setweight_001" id="Function_e1c6895" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.setweight(tsvector, "char")
 RETURNS tsvector
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$tsvector_setweight$function$
CREATE OR REPLACE FUNCTION pg_catalog.setweight(tsvector, "char", text[])
 RETURNS tsvector
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$tsvector_setweight_by_filter$function$
]]></string>
			<comment><![CDATA[set given weight for given lexemes]]></comment>
		</function>
		<function name="shell_in" id="Function_23b6987b" isSystem="false" >
			<comment><![CDATA[I/O]]></comment>
		</function>
		<function name="shell_out" id="Function_327e0fa4" isSystem="false" >
			<comment><![CDATA[I/O]]></comment>
		</function>
		<function name="shift_jis_2004_to_euc_jis_2004" id="Function_dccefbb" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.shift_jis_2004_to_euc_jis_2004(integer, integer, cstring, internal, integer)
 RETURNS void
 LANGUAGE c
 PARALLEL SAFE STRICT
AS '$libdir/euc2004_sjis2004', $function$shift_jis_2004_to_euc_jis_2004$function$
]]></string>
			<comment><![CDATA[internal conversion function for SHIFT_JIS_2004 to EUC_JIS_2004]]></comment>
		</function>
		<function name="shift_jis_2004_to_utf8" id="Function_165199ec" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.shift_jis_2004_to_utf8(integer, integer, cstring, internal, integer)
 RETURNS void
 LANGUAGE c
 PARALLEL SAFE STRICT
AS '$libdir/utf8_and_sjis2004', $function$shift_jis_2004_to_utf8$function$
]]></string>
			<comment><![CDATA[internal conversion function for SHIFT_JIS_2004 to UTF8]]></comment>
		</function>
		<function name="shobj_description" id="Function_36e41d5e" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.shobj_description(oid, name)
 RETURNS text
 LANGUAGE sql
 STABLE PARALLEL SAFE STRICT
AS $function$select description from pg_catalog.pg_shdescription where objoid = $1 and classoid = (select oid from pg_catalog.pg_class where relname = $2 and relnamespace = 11)$function$
]]></string>
			<comment><![CDATA[get description for object id and shared catalog name]]></comment>
		</function>
		<function name="sign" id="Function_1b61b2ed" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.sign(double precision)
 RETURNS double precision
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$dsign$function$
CREATE OR REPLACE FUNCTION pg_catalog.sign(numeric)
 RETURNS numeric
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$numeric_sign$function$
]]></string>
			<comment><![CDATA[sign of value]]></comment>
		</function>
		<function name="sign_001" id="Function_344113f0" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.sign(double precision)
 RETURNS double precision
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$dsign$function$
CREATE OR REPLACE FUNCTION pg_catalog.sign(numeric)
 RETURNS numeric
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$numeric_sign$function$
]]></string>
			<comment><![CDATA[sign of value]]></comment>
		</function>
		<function name="similar_escape" id="Function_3b9f7db" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.similar_escape(text, text)
 RETURNS text
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE
AS $function$similar_escape$function$
]]></string>
			<comment><![CDATA[convert SQL99 regexp pattern to POSIX style]]></comment>
		</function>
		<function name="sin" id="Function_390e8cc2" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.sin(double precision)
 RETURNS double precision
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$dsin$function$
]]></string>
			<comment><![CDATA[sine]]></comment>
		</function>
		<function name="sind" id="Function_8deaadb" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.sind(double precision)
 RETURNS double precision
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$dsind$function$
]]></string>
			<comment><![CDATA[sine, degrees]]></comment>
		</function>
		<function name="sjis_to_euc_jp" id="Function_139f1b22" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.sjis_to_euc_jp(integer, integer, cstring, internal, integer)
 RETURNS void
 LANGUAGE c
 PARALLEL SAFE STRICT
AS '$libdir/euc_jp_and_sjis', $function$sjis_to_euc_jp$function$
]]></string>
			<comment><![CDATA[internal conversion function for SJIS to EUC_JP]]></comment>
		</function>
		<function name="sjis_to_mic" id="Function_15ad0018" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.sjis_to_mic(integer, integer, cstring, internal, integer)
 RETURNS void
 LANGUAGE c
 PARALLEL SAFE STRICT
AS '$libdir/euc_jp_and_sjis', $function$sjis_to_mic$function$
]]></string>
			<comment><![CDATA[internal conversion function for SJIS to MULE_INTERNAL]]></comment>
		</function>
		<function name="sjis_to_utf8" id="Function_39787833" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.sjis_to_utf8(integer, integer, cstring, internal, integer)
 RETURNS void
 LANGUAGE c
 PARALLEL SAFE STRICT
AS '$libdir/utf8_and_sjis', $function$sjis_to_utf8$function$
]]></string>
			<comment><![CDATA[internal conversion function for SJIS to UTF8]]></comment>
		</function>
		<function name="slope" id="Function_2726a9d4" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.slope(point, point)
 RETURNS double precision
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$point_slope$function$
]]></string>
			<comment><![CDATA[slope between points]]></comment>
		</function>
		<function name="smgreq" id="Function_1635d429" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.smgreq(smgr, smgr)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$smgreq$function$
]]></string>
			<comment><![CDATA[storage manager]]></comment>
		</function>
		<function name="smgrin" id="Function_2ea20252" isSystem="false" >
			<comment><![CDATA[I/O]]></comment>
		</function>
		<function name="smgrne" id="Function_9f5bb18" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.smgrne(smgr, smgr)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$smgrne$function$
]]></string>
			<comment><![CDATA[storage manager]]></comment>
		</function>
		<function name="smgrout" id="Function_eb9d955" isSystem="false" >
			<comment><![CDATA[I/O]]></comment>
		</function>
		<function name="spg_box_quad_choose" id="Function_4af9b33" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.spg_box_quad_choose(internal, internal)
 RETURNS void
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$spg_box_quad_choose$function$
]]></string>
			<comment><![CDATA[SP-GiST support for quad tree over box]]></comment>
		</function>
		<function name="spg_box_quad_config" id="Function_dae3920" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.spg_box_quad_config(internal, internal)
 RETURNS void
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$spg_box_quad_config$function$
]]></string>
			<comment><![CDATA[SP-GiST support for quad tree over box]]></comment>
		</function>
		<function name="spg_box_quad_inner_consistent" id="Function_31cb2b0b" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.spg_box_quad_inner_consistent(internal, internal)
 RETURNS void
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$spg_box_quad_inner_consistent$function$
]]></string>
			<comment><![CDATA[SP-GiST support for quad tree over box]]></comment>
		</function>
		<function name="spg_box_quad_leaf_consistent" id="Function_1bbbc12b" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.spg_box_quad_leaf_consistent(internal, internal)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$spg_box_quad_leaf_consistent$function$
]]></string>
			<comment><![CDATA[SP-GiST support for quad tree over box]]></comment>
		</function>
		<function name="spg_box_quad_picksplit" id="Function_2616eba8" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.spg_box_quad_picksplit(internal, internal)
 RETURNS void
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$spg_box_quad_picksplit$function$
]]></string>
			<comment><![CDATA[SP-GiST support for quad tree over box]]></comment>
		</function>
		<function name="spg_kd_choose" id="Function_fe953df" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.spg_kd_choose(internal, internal)
 RETURNS void
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$spg_kd_choose$function$
]]></string>
			<comment><![CDATA[SP-GiST support for k-d tree over point]]></comment>
		</function>
		<function name="spg_kd_config" id="Function_276802f2" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.spg_kd_config(internal, internal)
 RETURNS void
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$spg_kd_config$function$
]]></string>
			<comment><![CDATA[SP-GiST support for k-d tree over point]]></comment>
		</function>
		<function name="spg_kd_inner_consistent" id="Function_12009de6" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.spg_kd_inner_consistent(internal, internal)
 RETURNS void
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$spg_kd_inner_consistent$function$
]]></string>
			<comment><![CDATA[SP-GiST support for k-d tree over point]]></comment>
		</function>
		<function name="spg_kd_picksplit" id="Function_1b037f1c" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.spg_kd_picksplit(internal, internal)
 RETURNS void
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$spg_kd_picksplit$function$
]]></string>
			<comment><![CDATA[SP-GiST support for k-d tree over point]]></comment>
		</function>
		<function name="spg_quad_choose" id="Function_1d04fc5d" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.spg_quad_choose(internal, internal)
 RETURNS void
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$spg_quad_choose$function$
]]></string>
			<comment><![CDATA[SP-GiST support for quad tree over point]]></comment>
		</function>
		<function name="spg_quad_config" id="Function_18ab1852" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.spg_quad_config(internal, internal)
 RETURNS void
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$spg_quad_config$function$
]]></string>
			<comment><![CDATA[SP-GiST support for quad tree over point]]></comment>
		</function>
		<function name="spg_quad_inner_consistent" id="Function_16204767" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.spg_quad_inner_consistent(internal, internal)
 RETURNS void
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$spg_quad_inner_consistent$function$
]]></string>
			<comment><![CDATA[SP-GiST support for quad tree over point]]></comment>
		</function>
		<function name="spg_quad_leaf_consistent" id="Function_1d252674" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.spg_quad_leaf_consistent(internal, internal)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$spg_quad_leaf_consistent$function$
]]></string>
			<comment><![CDATA[SP-GiST support for quad tree and k-d tree over point]]></comment>
		</function>
		<function name="spg_quad_picksplit" id="Function_28e79151" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.spg_quad_picksplit(internal, internal)
 RETURNS void
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$spg_quad_picksplit$function$
]]></string>
			<comment><![CDATA[SP-GiST support for quad tree over point]]></comment>
		</function>
		<function name="spg_range_quad_choose" id="Function_5a606b4" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.spg_range_quad_choose(internal, internal)
 RETURNS void
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$spg_range_quad_choose$function$
]]></string>
			<comment><![CDATA[SP-GiST support for quad tree over range]]></comment>
		</function>
		<function name="spg_range_quad_config" id="Function_12585ad5" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.spg_range_quad_config(internal, internal)
 RETURNS void
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$spg_range_quad_config$function$
]]></string>
			<comment><![CDATA[SP-GiST support for quad tree over range]]></comment>
		</function>
		<function name="spg_range_quad_inner_consistent" id="Function_3288cf69" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.spg_range_quad_inner_consistent(internal, internal)
 RETURNS void
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$spg_range_quad_inner_consistent$function$
]]></string>
			<comment><![CDATA[SP-GiST support for quad tree over range]]></comment>
		</function>
		<function name="spg_range_quad_leaf_consistent" id="Function_2c7e1562" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.spg_range_quad_leaf_consistent(internal, internal)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$spg_range_quad_leaf_consistent$function$
]]></string>
			<comment><![CDATA[SP-GiST support for quad tree over range]]></comment>
		</function>
		<function name="spg_range_quad_picksplit" id="Function_3b71887" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.spg_range_quad_picksplit(internal, internal)
 RETURNS void
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$spg_range_quad_picksplit$function$
]]></string>
			<comment><![CDATA[SP-GiST support for quad tree over range]]></comment>
		</function>
		<function name="spg_text_choose" id="Function_18fcc94a" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.spg_text_choose(internal, internal)
 RETURNS void
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$spg_text_choose$function$
]]></string>
			<comment><![CDATA[SP-GiST support for radix tree over text]]></comment>
		</function>
		<function name="spg_text_config" id="Function_7dde79c" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.spg_text_config(internal, internal)
 RETURNS void
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$spg_text_config$function$
]]></string>
			<comment><![CDATA[SP-GiST support for radix tree over text]]></comment>
		</function>
		<function name="spg_text_inner_consistent" id="Function_1686b08b" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.spg_text_inner_consistent(internal, internal)
 RETURNS void
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$spg_text_inner_consistent$function$
]]></string>
			<comment><![CDATA[SP-GiST support for radix tree over text]]></comment>
		</function>
		<function name="spg_text_leaf_consistent" id="Function_32d14412" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.spg_text_leaf_consistent(internal, internal)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$spg_text_leaf_consistent$function$
]]></string>
			<comment><![CDATA[SP-GiST support for radix tree over text]]></comment>
		</function>
		<function name="spg_text_picksplit" id="Function_343a672c" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.spg_text_picksplit(internal, internal)
 RETURNS void
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$spg_text_picksplit$function$
]]></string>
			<comment><![CDATA[SP-GiST support for radix tree over text]]></comment>
		</function>
		<function name="spghandler" id="Function_1b77e400" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.spghandler(internal)
 RETURNS index_am_handler
 LANGUAGE internal
 PARALLEL SAFE STRICT
AS $function$spghandler$function$
]]></string>
			<comment><![CDATA[spgist index access method handler]]></comment>
		</function>
		<function name="split_part" id="Function_86109a5" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.split_part(text, text, integer)
 RETURNS text
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$split_text$function$
]]></string>
			<comment><![CDATA[split string by field_sep and return field_num]]></comment>
		</function>
		<function name="sqrt" id="Function_3a46e73e" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.sqrt(double precision)
 RETURNS double precision
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$dsqrt$function$
CREATE OR REPLACE FUNCTION pg_catalog.sqrt(numeric)
 RETURNS numeric
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$numeric_sqrt$function$
]]></string>
			<comment><![CDATA[square root]]></comment>
		</function>
		<function name="sqrt_001" id="Function_27b6376e" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.sqrt(double precision)
 RETURNS double precision
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$dsqrt$function$
CREATE OR REPLACE FUNCTION pg_catalog.sqrt(numeric)
 RETURNS numeric
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$numeric_sqrt$function$
]]></string>
			<comment><![CDATA[square root]]></comment>
		</function>
		<function name="statement_timestamp" id="Function_dfbda61" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.statement_timestamp()
 RETURNS timestamp with time zone
 LANGUAGE internal
 STABLE PARALLEL RESTRICTED STRICT
AS $function$statement_timestamp$function$
]]></string>
			<comment><![CDATA[current statement time]]></comment>
		</function>
		<function name="stddev" id="Function_6d41bc2" isSystem="false" >
			<comment><![CDATA[historical alias for stddev_samp]]></comment>
		</function>
		<function name="stddev_001" id="Function_798f833" isSystem="false" >
			<comment><![CDATA[historical alias for stddev_samp]]></comment>
		</function>
		<function name="stddev_002" id="Function_3b2b7d24" isSystem="false" >
			<comment><![CDATA[historical alias for stddev_samp]]></comment>
		</function>
		<function name="stddev_003" id="Function_106593ad" isSystem="false" >
			<comment><![CDATA[historical alias for stddev_samp]]></comment>
		</function>
		<function name="stddev_004" id="Function_2c73ce3a" isSystem="false" >
			<comment><![CDATA[historical alias for stddev_samp]]></comment>
		</function>
		<function name="stddev_005" id="Function_17d28137" isSystem="false" >
			<comment><![CDATA[historical alias for stddev_samp]]></comment>
		</function>
		<function name="stddev_pop" id="Function_9965809" isSystem="false" >
			<comment><![CDATA[population standard deviation of bigint input values]]></comment>
		</function>
		<function name="stddev_pop_001" id="Function_d15b1d5" isSystem="false" >
			<comment><![CDATA[population standard deviation of bigint input values]]></comment>
		</function>
		<function name="stddev_pop_002" id="Function_17eaaeeb" isSystem="false" >
			<comment><![CDATA[population standard deviation of bigint input values]]></comment>
		</function>
		<function name="stddev_pop_003" id="Function_2a5ddf5b" isSystem="false" >
			<comment><![CDATA[population standard deviation of bigint input values]]></comment>
		</function>
		<function name="stddev_pop_004" id="Function_397ee684" isSystem="false" >
			<comment><![CDATA[population standard deviation of bigint input values]]></comment>
		</function>
		<function name="stddev_pop_005" id="Function_233e6beb" isSystem="false" >
			<comment><![CDATA[population standard deviation of bigint input values]]></comment>
		</function>
		<function name="stddev_samp" id="Function_322d02c8" isSystem="false" >
			<comment><![CDATA[sample standard deviation of bigint input values]]></comment>
		</function>
		<function name="stddev_samp_001" id="Function_1cc20305" isSystem="false" >
			<comment><![CDATA[sample standard deviation of bigint input values]]></comment>
		</function>
		<function name="stddev_samp_002" id="Function_60ea156" isSystem="false" >
			<comment><![CDATA[sample standard deviation of bigint input values]]></comment>
		</function>
		<function name="stddev_samp_003" id="Function_31e182f4" isSystem="false" >
			<comment><![CDATA[sample standard deviation of bigint input values]]></comment>
		</function>
		<function name="stddev_samp_004" id="Function_2b060b32" isSystem="false" >
			<comment><![CDATA[sample standard deviation of bigint input values]]></comment>
		</function>
		<function name="stddev_samp_005" id="Function_a6a35cf" isSystem="false" >
			<comment><![CDATA[sample standard deviation of bigint input values]]></comment>
		</function>
		<function name="string_agg" id="Function_1fa69322" isSystem="false" >
			<comment><![CDATA[concatenate aggregate input into a string]]></comment>
		</function>
		<function name="string_agg_001" id="Function_36b6b9e5" isSystem="false" >
			<comment><![CDATA[concatenate aggregate input into a string]]></comment>
		</function>
		<function name="string_agg_finalfn" id="Function_30f914ce" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.string_agg_finalfn(internal)
 RETURNS text
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE
AS $function$string_agg_finalfn$function$
]]></string>
			<comment><![CDATA[aggregate final function]]></comment>
		</function>
		<function name="string_agg_transfn" id="Function_577d7e6" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.string_agg_transfn(internal, text, text)
 RETURNS internal
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE
AS $function$string_agg_transfn$function$
]]></string>
			<comment><![CDATA[aggregate transition function]]></comment>
		</function>
		<function name="string_to_array" id="Function_2a908688" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.string_to_array(text, text)
 RETURNS text[]
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE
AS $function$text_to_array$function$
CREATE OR REPLACE FUNCTION pg_catalog.string_to_array(text, text, text)
 RETURNS text[]
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE
AS $function$text_to_array_null$function$
]]></string>
			<comment><![CDATA[split delimited text into text[], with null string]]></comment>
		</function>
		<function name="string_to_array_001" id="Function_28c341e6" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.string_to_array(text, text)
 RETURNS text[]
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE
AS $function$text_to_array$function$
CREATE OR REPLACE FUNCTION pg_catalog.string_to_array(text, text, text)
 RETURNS text[]
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE
AS $function$text_to_array_null$function$
]]></string>
			<comment><![CDATA[split delimited text into text[], with null string]]></comment>
		</function>
		<function name="strip" id="Function_234f2a3" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.strip(tsvector)
 RETURNS tsvector
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$tsvector_strip$function$
]]></string>
			<comment><![CDATA[strip position information]]></comment>
		</function>
		<function name="strpos" id="Function_2d2e52b9" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.strpos(text, text)
 RETURNS integer
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$textpos$function$
]]></string>
			<comment><![CDATA[position of substring]]></comment>
		</function>
		<function name="substr" id="Function_36f7b9bb" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.substr(text, integer, integer)
 RETURNS text
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$text_substr$function$
CREATE OR REPLACE FUNCTION pg_catalog.substr(text, integer)
 RETURNS text
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$text_substr_no_len$function$
CREATE OR REPLACE FUNCTION pg_catalog.substr(bytea, integer, integer)
 RETURNS bytea
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$bytea_substr$function$
CREATE OR REPLACE FUNCTION pg_catalog.substr(bytea, integer)
 RETURNS bytea
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$bytea_substr_no_len$function$
]]></string>
			<comment><![CDATA[extract portion of string]]></comment>
		</function>
		<function name="substr_001" id="Function_24f832dd" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.substr(text, integer, integer)
 RETURNS text
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$text_substr$function$
CREATE OR REPLACE FUNCTION pg_catalog.substr(text, integer)
 RETURNS text
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$text_substr_no_len$function$
CREATE OR REPLACE FUNCTION pg_catalog.substr(bytea, integer, integer)
 RETURNS bytea
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$bytea_substr$function$
CREATE OR REPLACE FUNCTION pg_catalog.substr(bytea, integer)
 RETURNS bytea
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$bytea_substr_no_len$function$
]]></string>
			<comment><![CDATA[extract portion of string]]></comment>
		</function>
		<function name="substr_002" id="Function_9d5731e" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.substr(text, integer, integer)
 RETURNS text
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$text_substr$function$
CREATE OR REPLACE FUNCTION pg_catalog.substr(text, integer)
 RETURNS text
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$text_substr_no_len$function$
CREATE OR REPLACE FUNCTION pg_catalog.substr(bytea, integer, integer)
 RETURNS bytea
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$bytea_substr$function$
CREATE OR REPLACE FUNCTION pg_catalog.substr(bytea, integer)
 RETURNS bytea
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$bytea_substr_no_len$function$
]]></string>
			<comment><![CDATA[extract portion of string]]></comment>
		</function>
		<function name="substr_003" id="Function_33f2cc00" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.substr(text, integer, integer)
 RETURNS text
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$text_substr$function$
CREATE OR REPLACE FUNCTION pg_catalog.substr(text, integer)
 RETURNS text
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$text_substr_no_len$function$
CREATE OR REPLACE FUNCTION pg_catalog.substr(bytea, integer, integer)
 RETURNS bytea
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$bytea_substr$function$
CREATE OR REPLACE FUNCTION pg_catalog.substr(bytea, integer)
 RETURNS bytea
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$bytea_substr_no_len$function$
]]></string>
			<comment><![CDATA[extract portion of string]]></comment>
		</function>
		<function name="substring" id="Function_efee904" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog."substring"(text, integer, integer)
 RETURNS text
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$text_substr$function$
CREATE OR REPLACE FUNCTION pg_catalog."substring"(text, integer)
 RETURNS text
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$text_substr_no_len$function$
CREATE OR REPLACE FUNCTION pg_catalog."substring"(bit, integer, integer)
 RETURNS bit
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$bitsubstr$function$
CREATE OR REPLACE FUNCTION pg_catalog."substring"(bit, integer)
 RETURNS bit
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$bitsubstr_no_len$function$
CREATE OR REPLACE FUNCTION pg_catalog."substring"(bytea, integer, integer)
 RETURNS bytea
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$bytea_substr$function$
CREATE OR REPLACE FUNCTION pg_catalog."substring"(bytea, integer)
 RETURNS bytea
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$bytea_substr_no_len$function$
CREATE OR REPLACE FUNCTION pg_catalog."substring"(text, text)
 RETURNS text
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$textregexsubstr$function$
CREATE OR REPLACE FUNCTION pg_catalog."substring"(text, text, text)
 RETURNS text
 LANGUAGE sql
 IMMUTABLE PARALLEL SAFE STRICT COST 1
AS $function$select pg_catalog.substring($1, pg_catalog.similar_escape($2, $3))$function$
]]></string>
			<comment><![CDATA[extract portion of bitstring]]></comment>
		</function>
		<function name="substring_001" id="Function_1b27f32c" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog."substring"(text, integer, integer)
 RETURNS text
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$text_substr$function$
CREATE OR REPLACE FUNCTION pg_catalog."substring"(text, integer)
 RETURNS text
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$text_substr_no_len$function$
CREATE OR REPLACE FUNCTION pg_catalog."substring"(bit, integer, integer)
 RETURNS bit
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$bitsubstr$function$
CREATE OR REPLACE FUNCTION pg_catalog."substring"(bit, integer)
 RETURNS bit
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$bitsubstr_no_len$function$
CREATE OR REPLACE FUNCTION pg_catalog."substring"(bytea, integer, integer)
 RETURNS bytea
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$bytea_substr$function$
CREATE OR REPLACE FUNCTION pg_catalog."substring"(bytea, integer)
 RETURNS bytea
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$bytea_substr_no_len$function$
CREATE OR REPLACE FUNCTION pg_catalog."substring"(text, text)
 RETURNS text
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$textregexsubstr$function$
CREATE OR REPLACE FUNCTION pg_catalog."substring"(text, text, text)
 RETURNS text
 LANGUAGE sql
 IMMUTABLE PARALLEL SAFE STRICT COST 1
AS $function$select pg_catalog.substring($1, pg_catalog.similar_escape($2, $3))$function$
]]></string>
			<comment><![CDATA[extract portion of bitstring]]></comment>
		</function>
		<function name="substring_002" id="Function_22da8c1e" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog."substring"(text, integer, integer)
 RETURNS text
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$text_substr$function$
CREATE OR REPLACE FUNCTION pg_catalog."substring"(text, integer)
 RETURNS text
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$text_substr_no_len$function$
CREATE OR REPLACE FUNCTION pg_catalog."substring"(bit, integer, integer)
 RETURNS bit
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$bitsubstr$function$
CREATE OR REPLACE FUNCTION pg_catalog."substring"(bit, integer)
 RETURNS bit
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$bitsubstr_no_len$function$
CREATE OR REPLACE FUNCTION pg_catalog."substring"(bytea, integer, integer)
 RETURNS bytea
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$bytea_substr$function$
CREATE OR REPLACE FUNCTION pg_catalog."substring"(bytea, integer)
 RETURNS bytea
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$bytea_substr_no_len$function$
CREATE OR REPLACE FUNCTION pg_catalog."substring"(text, text)
 RETURNS text
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$textregexsubstr$function$
CREATE OR REPLACE FUNCTION pg_catalog."substring"(text, text, text)
 RETURNS text
 LANGUAGE sql
 IMMUTABLE PARALLEL SAFE STRICT COST 1
AS $function$select pg_catalog.substring($1, pg_catalog.similar_escape($2, $3))$function$
]]></string>
			<comment><![CDATA[extract portion of bitstring]]></comment>
		</function>
		<function name="substring_003" id="Function_374da581" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog."substring"(text, integer, integer)
 RETURNS text
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$text_substr$function$
CREATE OR REPLACE FUNCTION pg_catalog."substring"(text, integer)
 RETURNS text
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$text_substr_no_len$function$
CREATE OR REPLACE FUNCTION pg_catalog."substring"(bit, integer, integer)
 RETURNS bit
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$bitsubstr$function$
CREATE OR REPLACE FUNCTION pg_catalog."substring"(bit, integer)
 RETURNS bit
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$bitsubstr_no_len$function$
CREATE OR REPLACE FUNCTION pg_catalog."substring"(bytea, integer, integer)
 RETURNS bytea
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$bytea_substr$function$
CREATE OR REPLACE FUNCTION pg_catalog."substring"(bytea, integer)
 RETURNS bytea
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$bytea_substr_no_len$function$
CREATE OR REPLACE FUNCTION pg_catalog."substring"(text, text)
 RETURNS text
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$textregexsubstr$function$
CREATE OR REPLACE FUNCTION pg_catalog."substring"(text, text, text)
 RETURNS text
 LANGUAGE sql
 IMMUTABLE PARALLEL SAFE STRICT COST 1
AS $function$select pg_catalog.substring($1, pg_catalog.similar_escape($2, $3))$function$
]]></string>
			<comment><![CDATA[extract portion of bitstring]]></comment>
		</function>
		<function name="substring_004" id="Function_39e512fa" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog."substring"(text, integer, integer)
 RETURNS text
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$text_substr$function$
CREATE OR REPLACE FUNCTION pg_catalog."substring"(text, integer)
 RETURNS text
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$text_substr_no_len$function$
CREATE OR REPLACE FUNCTION pg_catalog."substring"(bit, integer, integer)
 RETURNS bit
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$bitsubstr$function$
CREATE OR REPLACE FUNCTION pg_catalog."substring"(bit, integer)
 RETURNS bit
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$bitsubstr_no_len$function$
CREATE OR REPLACE FUNCTION pg_catalog."substring"(bytea, integer, integer)
 RETURNS bytea
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$bytea_substr$function$
CREATE OR REPLACE FUNCTION pg_catalog."substring"(bytea, integer)
 RETURNS bytea
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$bytea_substr_no_len$function$
CREATE OR REPLACE FUNCTION pg_catalog."substring"(text, text)
 RETURNS text
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$textregexsubstr$function$
CREATE OR REPLACE FUNCTION pg_catalog."substring"(text, text, text)
 RETURNS text
 LANGUAGE sql
 IMMUTABLE PARALLEL SAFE STRICT COST 1
AS $function$select pg_catalog.substring($1, pg_catalog.similar_escape($2, $3))$function$
]]></string>
			<comment><![CDATA[extract portion of bitstring]]></comment>
		</function>
		<function name="substring_005" id="Function_369954fe" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog."substring"(text, integer, integer)
 RETURNS text
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$text_substr$function$
CREATE OR REPLACE FUNCTION pg_catalog."substring"(text, integer)
 RETURNS text
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$text_substr_no_len$function$
CREATE OR REPLACE FUNCTION pg_catalog."substring"(bit, integer, integer)
 RETURNS bit
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$bitsubstr$function$
CREATE OR REPLACE FUNCTION pg_catalog."substring"(bit, integer)
 RETURNS bit
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$bitsubstr_no_len$function$
CREATE OR REPLACE FUNCTION pg_catalog."substring"(bytea, integer, integer)
 RETURNS bytea
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$bytea_substr$function$
CREATE OR REPLACE FUNCTION pg_catalog."substring"(bytea, integer)
 RETURNS bytea
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$bytea_substr_no_len$function$
CREATE OR REPLACE FUNCTION pg_catalog."substring"(text, text)
 RETURNS text
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$textregexsubstr$function$
CREATE OR REPLACE FUNCTION pg_catalog."substring"(text, text, text)
 RETURNS text
 LANGUAGE sql
 IMMUTABLE PARALLEL SAFE STRICT COST 1
AS $function$select pg_catalog.substring($1, pg_catalog.similar_escape($2, $3))$function$
]]></string>
			<comment><![CDATA[extract portion of bitstring]]></comment>
		</function>
		<function name="substring_006" id="Function_35d14352" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog."substring"(text, integer, integer)
 RETURNS text
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$text_substr$function$
CREATE OR REPLACE FUNCTION pg_catalog."substring"(text, integer)
 RETURNS text
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$text_substr_no_len$function$
CREATE OR REPLACE FUNCTION pg_catalog."substring"(bit, integer, integer)
 RETURNS bit
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$bitsubstr$function$
CREATE OR REPLACE FUNCTION pg_catalog."substring"(bit, integer)
 RETURNS bit
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$bitsubstr_no_len$function$
CREATE OR REPLACE FUNCTION pg_catalog."substring"(bytea, integer, integer)
 RETURNS bytea
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$bytea_substr$function$
CREATE OR REPLACE FUNCTION pg_catalog."substring"(bytea, integer)
 RETURNS bytea
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$bytea_substr_no_len$function$
CREATE OR REPLACE FUNCTION pg_catalog."substring"(text, text)
 RETURNS text
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$textregexsubstr$function$
CREATE OR REPLACE FUNCTION pg_catalog."substring"(text, text, text)
 RETURNS text
 LANGUAGE sql
 IMMUTABLE PARALLEL SAFE STRICT COST 1
AS $function$select pg_catalog.substring($1, pg_catalog.similar_escape($2, $3))$function$
]]></string>
			<comment><![CDATA[extract portion of bitstring]]></comment>
		</function>
		<function name="substring_007" id="Function_3329afc7" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog."substring"(text, integer, integer)
 RETURNS text
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$text_substr$function$
CREATE OR REPLACE FUNCTION pg_catalog."substring"(text, integer)
 RETURNS text
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$text_substr_no_len$function$
CREATE OR REPLACE FUNCTION pg_catalog."substring"(bit, integer, integer)
 RETURNS bit
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$bitsubstr$function$
CREATE OR REPLACE FUNCTION pg_catalog."substring"(bit, integer)
 RETURNS bit
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$bitsubstr_no_len$function$
CREATE OR REPLACE FUNCTION pg_catalog."substring"(bytea, integer, integer)
 RETURNS bytea
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$bytea_substr$function$
CREATE OR REPLACE FUNCTION pg_catalog."substring"(bytea, integer)
 RETURNS bytea
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$bytea_substr_no_len$function$
CREATE OR REPLACE FUNCTION pg_catalog."substring"(text, text)
 RETURNS text
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$textregexsubstr$function$
CREATE OR REPLACE FUNCTION pg_catalog."substring"(text, text, text)
 RETURNS text
 LANGUAGE sql
 IMMUTABLE PARALLEL SAFE STRICT COST 1
AS $function$select pg_catalog.substring($1, pg_catalog.similar_escape($2, $3))$function$
]]></string>
			<comment><![CDATA[extract portion of bitstring]]></comment>
		</function>
		<function name="sum" id="Function_26898329" isSystem="false" >
			<comment><![CDATA[sum as numeric across all bigint input values]]></comment>
		</function>
		<function name="sum_001" id="Function_2c62b46c" isSystem="false" >
			<comment><![CDATA[sum as numeric across all bigint input values]]></comment>
		</function>
		<function name="sum_002" id="Function_20f673c9" isSystem="false" >
			<comment><![CDATA[sum as numeric across all bigint input values]]></comment>
		</function>
		<function name="sum_003" id="Function_53eaf48" isSystem="false" >
			<comment><![CDATA[sum as numeric across all bigint input values]]></comment>
		</function>
		<function name="sum_004" id="Function_23160e18" isSystem="false" >
			<comment><![CDATA[sum as numeric across all bigint input values]]></comment>
		</function>
		<function name="sum_005" id="Function_2269e106" isSystem="false" >
			<comment><![CDATA[sum as numeric across all bigint input values]]></comment>
		</function>
		<function name="sum_006" id="Function_69d4e44" isSystem="false" >
			<comment><![CDATA[sum as numeric across all bigint input values]]></comment>
		</function>
		<function name="sum_007" id="Function_2a5e7cc5" isSystem="false" >
			<comment><![CDATA[sum as numeric across all bigint input values]]></comment>
		</function>
		<function name="suppress_redundant_updates_trigger" id="Function_54145ef" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.suppress_redundant_updates_trigger()
 RETURNS trigger
 LANGUAGE internal
 PARALLEL SAFE STRICT
AS $function$suppress_redundant_updates_trigger$function$
]]></string>
			<comment><![CDATA[trigger to suppress updates when new and old records match]]></comment>
		</function>
		<function name="system" id="Function_1dc8d4eb" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.system(internal)
 RETURNS tsm_handler
 LANGUAGE internal
 PARALLEL SAFE STRICT
AS $function$tsm_system_handler$function$
]]></string>
			<comment><![CDATA[SYSTEM tablesample method handler]]></comment>
		</function>
		<function name="table_to_xml" id="Function_d3002dd" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.table_to_xml(tbl regclass, nulls boolean, tableforest boolean, targetns text)
 RETURNS xml
 LANGUAGE internal
 STABLE PARALLEL RESTRICTED STRICT COST 100
AS $function$table_to_xml$function$
]]></string>
			<comment><![CDATA[map table contents to XML]]></comment>
		</function>
		<function name="table_to_xml_and_xmlschema" id="Function_14c3f6d9" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.table_to_xml_and_xmlschema(tbl regclass, nulls boolean, tableforest boolean, targetns text)
 RETURNS xml
 LANGUAGE internal
 STABLE PARALLEL RESTRICTED STRICT COST 100
AS $function$table_to_xml_and_xmlschema$function$
]]></string>
			<comment><![CDATA[map table contents and structure to XML and XML Schema]]></comment>
		</function>
		<function name="table_to_xmlschema" id="Function_21de737e" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.table_to_xmlschema(tbl regclass, nulls boolean, tableforest boolean, targetns text)
 RETURNS xml
 LANGUAGE internal
 STABLE PARALLEL RESTRICTED STRICT COST 100
AS $function$table_to_xmlschema$function$
]]></string>
			<comment><![CDATA[map table structure to XML Schema]]></comment>
		</function>
		<function name="tan" id="Function_a2550e6" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.tan(double precision)
 RETURNS double precision
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$dtan$function$
]]></string>
			<comment><![CDATA[tangent]]></comment>
		</function>
		<function name="tand" id="Function_d976e8" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.tand(double precision)
 RETURNS double precision
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$dtand$function$
]]></string>
			<comment><![CDATA[tangent, degrees]]></comment>
		</function>
		<function name="text" id="Function_24a78310" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.text(character)
 RETURNS text
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$rtrim1$function$
CREATE OR REPLACE FUNCTION pg_catalog.text(name)
 RETURNS text
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$name_text$function$
CREATE OR REPLACE FUNCTION pg_catalog.text("char")
 RETURNS text
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$char_text$function$
CREATE OR REPLACE FUNCTION pg_catalog.text(inet)
 RETURNS text
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$network_show$function$
CREATE OR REPLACE FUNCTION pg_catalog.text(boolean)
 RETURNS text
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$booltext$function$
CREATE OR REPLACE FUNCTION pg_catalog.text(xml)
 RETURNS text
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$xmltotext$function$
]]></string>
			<comment><![CDATA[serialize an XML value to a character string]]></comment>
		</function>
		<function name="text_001" id="Function_2734438a" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.text(character)
 RETURNS text
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$rtrim1$function$
CREATE OR REPLACE FUNCTION pg_catalog.text(name)
 RETURNS text
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$name_text$function$
CREATE OR REPLACE FUNCTION pg_catalog.text("char")
 RETURNS text
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$char_text$function$
CREATE OR REPLACE FUNCTION pg_catalog.text(inet)
 RETURNS text
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$network_show$function$
CREATE OR REPLACE FUNCTION pg_catalog.text(boolean)
 RETURNS text
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$booltext$function$
CREATE OR REPLACE FUNCTION pg_catalog.text(xml)
 RETURNS text
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$xmltotext$function$
]]></string>
			<comment><![CDATA[serialize an XML value to a character string]]></comment>
		</function>
		<function name="text_002" id="Function_e9a98af" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.text(character)
 RETURNS text
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$rtrim1$function$
CREATE OR REPLACE FUNCTION pg_catalog.text(name)
 RETURNS text
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$name_text$function$
CREATE OR REPLACE FUNCTION pg_catalog.text("char")
 RETURNS text
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$char_text$function$
CREATE OR REPLACE FUNCTION pg_catalog.text(inet)
 RETURNS text
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$network_show$function$
CREATE OR REPLACE FUNCTION pg_catalog.text(boolean)
 RETURNS text
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$booltext$function$
CREATE OR REPLACE FUNCTION pg_catalog.text(xml)
 RETURNS text
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$xmltotext$function$
]]></string>
			<comment><![CDATA[serialize an XML value to a character string]]></comment>
		</function>
		<function name="text_003" id="Function_35240536" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.text(character)
 RETURNS text
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$rtrim1$function$
CREATE OR REPLACE FUNCTION pg_catalog.text(name)
 RETURNS text
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$name_text$function$
CREATE OR REPLACE FUNCTION pg_catalog.text("char")
 RETURNS text
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$char_text$function$
CREATE OR REPLACE FUNCTION pg_catalog.text(inet)
 RETURNS text
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$network_show$function$
CREATE OR REPLACE FUNCTION pg_catalog.text(boolean)
 RETURNS text
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$booltext$function$
CREATE OR REPLACE FUNCTION pg_catalog.text(xml)
 RETURNS text
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$xmltotext$function$
]]></string>
			<comment><![CDATA[serialize an XML value to a character string]]></comment>
		</function>
		<function name="text_004" id="Function_2a480f86" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.text(character)
 RETURNS text
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$rtrim1$function$
CREATE OR REPLACE FUNCTION pg_catalog.text(name)
 RETURNS text
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$name_text$function$
CREATE OR REPLACE FUNCTION pg_catalog.text("char")
 RETURNS text
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$char_text$function$
CREATE OR REPLACE FUNCTION pg_catalog.text(inet)
 RETURNS text
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$network_show$function$
CREATE OR REPLACE FUNCTION pg_catalog.text(boolean)
 RETURNS text
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$booltext$function$
CREATE OR REPLACE FUNCTION pg_catalog.text(xml)
 RETURNS text
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$xmltotext$function$
]]></string>
			<comment><![CDATA[serialize an XML value to a character string]]></comment>
		</function>
		<function name="text_005" id="Function_318b309f" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.text(character)
 RETURNS text
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$rtrim1$function$
CREATE OR REPLACE FUNCTION pg_catalog.text(name)
 RETURNS text
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$name_text$function$
CREATE OR REPLACE FUNCTION pg_catalog.text("char")
 RETURNS text
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$char_text$function$
CREATE OR REPLACE FUNCTION pg_catalog.text(inet)
 RETURNS text
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$network_show$function$
CREATE OR REPLACE FUNCTION pg_catalog.text(boolean)
 RETURNS text
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$booltext$function$
CREATE OR REPLACE FUNCTION pg_catalog.text(xml)
 RETURNS text
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$xmltotext$function$
]]></string>
			<comment><![CDATA[serialize an XML value to a character string]]></comment>
		</function>
		<function name="text_ge" id="Function_2ef4d891" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.text_ge(text, text)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$text_ge$function$
]]></string>
			<comment><![CDATA[implementation of >= operator]]></comment>
		</function>
		<function name="text_gt" id="Function_15544a40" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.text_gt(text, text)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$text_gt$function$
]]></string>
			<comment><![CDATA[implementation of > operator]]></comment>
		</function>
		<function name="text_larger" id="Function_f5cc534" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.text_larger(text, text)
 RETURNS text
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$text_larger$function$
]]></string>
			<comment><![CDATA[larger of two]]></comment>
		</function>
		<function name="text_le" id="Function_207fd3bd" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.text_le(text, text)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$text_le$function$
]]></string>
			<comment><![CDATA[implementation of <= operator]]></comment>
		</function>
		<function name="text_lt" id="Function_2e7082ff" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.text_lt(text, text)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$text_lt$function$
]]></string>
			<comment><![CDATA[implementation of < operator]]></comment>
		</function>
		<function name="text_pattern_ge" id="Function_314994c7" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.text_pattern_ge(text, text)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$text_pattern_ge$function$
]]></string>
			<comment><![CDATA[implementation of ~>=~ operator]]></comment>
		</function>
		<function name="text_pattern_gt" id="Function_30f77405" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.text_pattern_gt(text, text)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$text_pattern_gt$function$
]]></string>
			<comment><![CDATA[implementation of ~>~ operator]]></comment>
		</function>
		<function name="text_pattern_le" id="Function_2235ead8" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.text_pattern_le(text, text)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$text_pattern_le$function$
]]></string>
			<comment><![CDATA[implementation of ~<=~ operator]]></comment>
		</function>
		<function name="text_pattern_lt" id="Function_e30528d" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.text_pattern_lt(text, text)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$text_pattern_lt$function$
]]></string>
			<comment><![CDATA[implementation of ~<~ operator]]></comment>
		</function>
		<function name="text_smaller" id="Function_102c2056" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.text_smaller(text, text)
 RETURNS text
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$text_smaller$function$
]]></string>
			<comment><![CDATA[smaller of two]]></comment>
		</function>
		<function name="textanycat" id="Function_70e0aa8" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.textanycat(text, anynonarray)
 RETURNS text
 LANGUAGE sql
 STABLE PARALLEL SAFE STRICT COST 1
AS $function$select $1 || $2::pg_catalog.text$function$
]]></string>
			<comment><![CDATA[implementation of || operator]]></comment>
		</function>
		<function name="textcat" id="Function_29d78908" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.textcat(text, text)
 RETURNS text
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$textcat$function$
]]></string>
			<comment><![CDATA[implementation of || operator]]></comment>
		</function>
		<function name="texteq" id="Function_35ae6146" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.texteq(text, text)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT LEAKPROOF
AS $function$texteq$function$
]]></string>
			<comment><![CDATA[implementation of = operator]]></comment>
		</function>
		<function name="texticlike" id="Function_8459b72" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.texticlike(text, text)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$texticlike$function$
]]></string>
			<comment><![CDATA[implementation of ~~* operator]]></comment>
		</function>
		<function name="texticnlike" id="Function_395cf16a" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.texticnlike(text, text)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$texticnlike$function$
]]></string>
			<comment><![CDATA[implementation of !~~* operator]]></comment>
		</function>
		<function name="texticregexeq" id="Function_2a8540b1" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.texticregexeq(text, text)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$texticregexeq$function$
]]></string>
			<comment><![CDATA[implementation of ~* operator]]></comment>
		</function>
		<function name="texticregexne" id="Function_34777588" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.texticregexne(text, text)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$texticregexne$function$
]]></string>
			<comment><![CDATA[implementation of !~* operator]]></comment>
		</function>
		<function name="textin" id="Function_15e922a4" isSystem="false" >
			<comment><![CDATA[I/O]]></comment>
		</function>
		<function name="textlen" id="Function_11ce5322" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.textlen(text)
 RETURNS integer
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$textlen$function$
]]></string>
			<comment><![CDATA[length]]></comment>
		</function>
		<function name="textlike" id="Function_12654be5" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.textlike(text, text)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$textlike$function$
]]></string>
			<comment><![CDATA[implementation of ~~ operator]]></comment>
		</function>
		<function name="textne" id="Function_348e0569" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.textne(text, text)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT LEAKPROOF
AS $function$textne$function$
]]></string>
			<comment><![CDATA[implementation of <> operator]]></comment>
		</function>
		<function name="textnlike" id="Function_28fce4a1" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.textnlike(text, text)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$textnlike$function$
]]></string>
			<comment><![CDATA[implementation of !~~ operator]]></comment>
		</function>
		<function name="textout" id="Function_7e4668f" isSystem="false" >
			<comment><![CDATA[I/O]]></comment>
		</function>
		<function name="textrecv" id="Function_11ebc877" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.textrecv(internal)
 RETURNS text
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$textrecv$function$
]]></string>
			<comment><![CDATA[I/O]]></comment>
		</function>
		<function name="textregexeq" id="Function_3969d1f3" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.textregexeq(text, text)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$textregexeq$function$
]]></string>
			<comment><![CDATA[implementation of ~ operator]]></comment>
		</function>
		<function name="textregexne" id="Function_1c05951d" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.textregexne(text, text)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$textregexne$function$
]]></string>
			<comment><![CDATA[implementation of !~ operator]]></comment>
		</function>
		<function name="textsend" id="Function_2e0f84b2" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.textsend(text)
 RETURNS bytea
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$textsend$function$
]]></string>
			<comment><![CDATA[I/O]]></comment>
		</function>
		<function name="thesaurus_init" id="Function_3625a181" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.thesaurus_init(internal)
 RETURNS internal
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$thesaurus_init$function$
]]></string>
			<comment><![CDATA[(internal)]]></comment>
		</function>
		<function name="thesaurus_lexize" id="Function_1a751453" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.thesaurus_lexize(internal, internal, internal, internal)
 RETURNS internal
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$thesaurus_lexize$function$
]]></string>
			<comment><![CDATA[(internal)]]></comment>
		</function>
		<function name="tideq" id="Function_110fd601" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.tideq(tid, tid)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT LEAKPROOF
AS $function$tideq$function$
]]></string>
			<comment><![CDATA[implementation of = operator]]></comment>
		</function>
		<function name="tidge" id="Function_6eb0fcd" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.tidge(tid, tid)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT LEAKPROOF
AS $function$tidge$function$
]]></string>
			<comment><![CDATA[implementation of >= operator]]></comment>
		</function>
		<function name="tidgt" id="Function_19d5a8d2" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.tidgt(tid, tid)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT LEAKPROOF
AS $function$tidgt$function$
]]></string>
			<comment><![CDATA[implementation of > operator]]></comment>
		</function>
		<function name="tidin" id="Function_2ff2a900" isSystem="false" >
			<comment><![CDATA[I/O]]></comment>
		</function>
		<function name="tidlarger" id="Function_22e421eb" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.tidlarger(tid, tid)
 RETURNS tid
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$tidlarger$function$
]]></string>
			<comment><![CDATA[larger of two]]></comment>
		</function>
		<function name="tidle" id="Function_37f580e7" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.tidle(tid, tid)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT LEAKPROOF
AS $function$tidle$function$
]]></string>
			<comment><![CDATA[implementation of <= operator]]></comment>
		</function>
		<function name="tidlt" id="Function_32ea7220" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.tidlt(tid, tid)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT LEAKPROOF
AS $function$tidlt$function$
]]></string>
			<comment><![CDATA[implementation of < operator]]></comment>
		</function>
		<function name="tidne" id="Function_2878a7ad" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.tidne(tid, tid)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT LEAKPROOF
AS $function$tidne$function$
]]></string>
			<comment><![CDATA[implementation of <> operator]]></comment>
		</function>
		<function name="tidout" id="Function_913fc25" isSystem="false" >
			<comment><![CDATA[I/O]]></comment>
		</function>
		<function name="tidrecv" id="Function_195091f6" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.tidrecv(internal)
 RETURNS tid
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$tidrecv$function$
]]></string>
			<comment><![CDATA[I/O]]></comment>
		</function>
		<function name="tidsend" id="Function_766e70d" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.tidsend(tid)
 RETURNS bytea
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$tidsend$function$
]]></string>
			<comment><![CDATA[I/O]]></comment>
		</function>
		<function name="tidsmaller" id="Function_10ffa2e9" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.tidsmaller(tid, tid)
 RETURNS tid
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$tidsmaller$function$
]]></string>
			<comment><![CDATA[smaller of two]]></comment>
		</function>
		<function name="time" id="Function_3a8d5cd0" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog."time"(timestamp without time zone)
 RETURNS time without time zone
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$timestamp_time$function$
CREATE OR REPLACE FUNCTION pg_catalog."time"(abstime)
 RETURNS time without time zone
 LANGUAGE sql
 STABLE PARALLEL SAFE STRICT COST 1
AS $function$select cast(cast($1 as timestamp without time zone) as pg_catalog.time)$function$
CREATE OR REPLACE FUNCTION pg_catalog."time"(interval)
 RETURNS time without time zone
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$interval_time$function$
CREATE OR REPLACE FUNCTION pg_catalog."time"(time without time zone, integer)
 RETURNS time without time zone
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$time_scale$function$
CREATE OR REPLACE FUNCTION pg_catalog."time"(timestamp with time zone)
 RETURNS time without time zone
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$timestamptz_time$function$
CREATE OR REPLACE FUNCTION pg_catalog."time"(time with time zone)
 RETURNS time without time zone
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$timetz_time$function$
]]></string>
			<comment><![CDATA[convert timestamp to time]]></comment>
		</function>
		<function name="time_001" id="Function_25f71a09" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog."time"(timestamp without time zone)
 RETURNS time without time zone
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$timestamp_time$function$
CREATE OR REPLACE FUNCTION pg_catalog."time"(abstime)
 RETURNS time without time zone
 LANGUAGE sql
 STABLE PARALLEL SAFE STRICT COST 1
AS $function$select cast(cast($1 as timestamp without time zone) as pg_catalog.time)$function$
CREATE OR REPLACE FUNCTION pg_catalog."time"(interval)
 RETURNS time without time zone
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$interval_time$function$
CREATE OR REPLACE FUNCTION pg_catalog."time"(time without time zone, integer)
 RETURNS time without time zone
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$time_scale$function$
CREATE OR REPLACE FUNCTION pg_catalog."time"(timestamp with time zone)
 RETURNS time without time zone
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$timestamptz_time$function$
CREATE OR REPLACE FUNCTION pg_catalog."time"(time with time zone)
 RETURNS time without time zone
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$timetz_time$function$
]]></string>
			<comment><![CDATA[convert timestamp to time]]></comment>
		</function>
		<function name="time_002" id="Function_35143c7e" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog."time"(timestamp without time zone)
 RETURNS time without time zone
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$timestamp_time$function$
CREATE OR REPLACE FUNCTION pg_catalog."time"(abstime)
 RETURNS time without time zone
 LANGUAGE sql
 STABLE PARALLEL SAFE STRICT COST 1
AS $function$select cast(cast($1 as timestamp without time zone) as pg_catalog.time)$function$
CREATE OR REPLACE FUNCTION pg_catalog."time"(interval)
 RETURNS time without time zone
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$interval_time$function$
CREATE OR REPLACE FUNCTION pg_catalog."time"(time without time zone, integer)
 RETURNS time without time zone
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$time_scale$function$
CREATE OR REPLACE FUNCTION pg_catalog."time"(timestamp with time zone)
 RETURNS time without time zone
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$timestamptz_time$function$
CREATE OR REPLACE FUNCTION pg_catalog."time"(time with time zone)
 RETURNS time without time zone
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$timetz_time$function$
]]></string>
			<comment><![CDATA[convert timestamp to time]]></comment>
		</function>
		<function name="time_003" id="Function_c5ee65a" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog."time"(timestamp without time zone)
 RETURNS time without time zone
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$timestamp_time$function$
CREATE OR REPLACE FUNCTION pg_catalog."time"(abstime)
 RETURNS time without time zone
 LANGUAGE sql
 STABLE PARALLEL SAFE STRICT COST 1
AS $function$select cast(cast($1 as timestamp without time zone) as pg_catalog.time)$function$
CREATE OR REPLACE FUNCTION pg_catalog."time"(interval)
 RETURNS time without time zone
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$interval_time$function$
CREATE OR REPLACE FUNCTION pg_catalog."time"(time without time zone, integer)
 RETURNS time without time zone
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$time_scale$function$
CREATE OR REPLACE FUNCTION pg_catalog."time"(timestamp with time zone)
 RETURNS time without time zone
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$timestamptz_time$function$
CREATE OR REPLACE FUNCTION pg_catalog."time"(time with time zone)
 RETURNS time without time zone
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$timetz_time$function$
]]></string>
			<comment><![CDATA[convert timestamp to time]]></comment>
		</function>
		<function name="time_004" id="Function_17afa7f5" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog."time"(timestamp without time zone)
 RETURNS time without time zone
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$timestamp_time$function$
CREATE OR REPLACE FUNCTION pg_catalog."time"(abstime)
 RETURNS time without time zone
 LANGUAGE sql
 STABLE PARALLEL SAFE STRICT COST 1
AS $function$select cast(cast($1 as timestamp without time zone) as pg_catalog.time)$function$
CREATE OR REPLACE FUNCTION pg_catalog."time"(interval)
 RETURNS time without time zone
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$interval_time$function$
CREATE OR REPLACE FUNCTION pg_catalog."time"(time without time zone, integer)
 RETURNS time without time zone
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$time_scale$function$
CREATE OR REPLACE FUNCTION pg_catalog."time"(timestamp with time zone)
 RETURNS time without time zone
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$timestamptz_time$function$
CREATE OR REPLACE FUNCTION pg_catalog."time"(time with time zone)
 RETURNS time without time zone
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$timetz_time$function$
]]></string>
			<comment><![CDATA[convert timestamp to time]]></comment>
		</function>
		<function name="time_005" id="Function_f263850" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog."time"(timestamp without time zone)
 RETURNS time without time zone
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$timestamp_time$function$
CREATE OR REPLACE FUNCTION pg_catalog."time"(abstime)
 RETURNS time without time zone
 LANGUAGE sql
 STABLE PARALLEL SAFE STRICT COST 1
AS $function$select cast(cast($1 as timestamp without time zone) as pg_catalog.time)$function$
CREATE OR REPLACE FUNCTION pg_catalog."time"(interval)
 RETURNS time without time zone
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$interval_time$function$
CREATE OR REPLACE FUNCTION pg_catalog."time"(time without time zone, integer)
 RETURNS time without time zone
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$time_scale$function$
CREATE OR REPLACE FUNCTION pg_catalog."time"(timestamp with time zone)
 RETURNS time without time zone
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$timestamptz_time$function$
CREATE OR REPLACE FUNCTION pg_catalog."time"(time with time zone)
 RETURNS time without time zone
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$timetz_time$function$
]]></string>
			<comment><![CDATA[convert timestamp to time]]></comment>
		</function>
		<function name="time_cmp" id="Function_8489c30" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.time_cmp(time without time zone, time without time zone)
 RETURNS integer
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$time_cmp$function$
]]></string>
			<comment><![CDATA[less-equal-greater]]></comment>
		</function>
		<function name="time_eq" id="Function_9b1422a" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.time_eq(time without time zone, time without time zone)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT LEAKPROOF
AS $function$time_eq$function$
]]></string>
			<comment><![CDATA[implementation of = operator]]></comment>
		</function>
		<function name="time_ge" id="Function_2e9b0a3b" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.time_ge(time without time zone, time without time zone)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT LEAKPROOF
AS $function$time_ge$function$
]]></string>
			<comment><![CDATA[implementation of >= operator]]></comment>
		</function>
		<function name="time_gt" id="Function_27ef1593" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.time_gt(time without time zone, time without time zone)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT LEAKPROOF
AS $function$time_gt$function$
]]></string>
			<comment><![CDATA[implementation of > operator]]></comment>
		</function>
		<function name="time_hash" id="Function_2640ee06" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.time_hash(time without time zone)
 RETURNS integer
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$time_hash$function$
]]></string>
			<comment><![CDATA[hash]]></comment>
		</function>
		<function name="time_in" id="Function_1ddbdc8a" isSystem="false" >
			<comment><![CDATA[I/O]]></comment>
		</function>
		<function name="time_larger" id="Function_4e18aef" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.time_larger(time without time zone, time without time zone)
 RETURNS time without time zone
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$time_larger$function$
]]></string>
			<comment><![CDATA[larger of two]]></comment>
		</function>
		<function name="time_le" id="Function_2bbb93" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.time_le(time without time zone, time without time zone)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT LEAKPROOF
AS $function$time_le$function$
]]></string>
			<comment><![CDATA[implementation of <= operator]]></comment>
		</function>
		<function name="time_lt" id="Function_55cf03a" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.time_lt(time without time zone, time without time zone)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT LEAKPROOF
AS $function$time_lt$function$
]]></string>
			<comment><![CDATA[implementation of < operator]]></comment>
		</function>
		<function name="time_mi_interval" id="Function_2996f2ce" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.time_mi_interval(time without time zone, interval)
 RETURNS time without time zone
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$time_mi_interval$function$
]]></string>
			<comment><![CDATA[implementation of - operator]]></comment>
		</function>
		<function name="time_mi_time" id="Function_3288ab77" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.time_mi_time(time without time zone, time without time zone)
 RETURNS interval
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$time_mi_time$function$
]]></string>
			<comment><![CDATA[implementation of - operator]]></comment>
		</function>
		<function name="time_ne" id="Function_1570a98d" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.time_ne(time without time zone, time without time zone)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT LEAKPROOF
AS $function$time_ne$function$
]]></string>
			<comment><![CDATA[implementation of <> operator]]></comment>
		</function>
		<function name="time_out" id="Function_329dd44c" isSystem="false" >
			<comment><![CDATA[I/O]]></comment>
		</function>
		<function name="time_pl_interval" id="Function_1f5628ce" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.time_pl_interval(time without time zone, interval)
 RETURNS time without time zone
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$time_pl_interval$function$
]]></string>
			<comment><![CDATA[implementation of + operator]]></comment>
		</function>
		<function name="time_recv" id="Function_1235b8da" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.time_recv(internal, oid, integer)
 RETURNS time without time zone
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$time_recv$function$
]]></string>
			<comment><![CDATA[I/O]]></comment>
		</function>
		<function name="time_send" id="Function_214d3c1d" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.time_send(time without time zone)
 RETURNS bytea
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$time_send$function$
]]></string>
			<comment><![CDATA[I/O]]></comment>
		</function>
		<function name="time_smaller" id="Function_10cdf06a" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.time_smaller(time without time zone, time without time zone)
 RETURNS time without time zone
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$time_smaller$function$
]]></string>
			<comment><![CDATA[smaller of two]]></comment>
		</function>
		<function name="time_transform" id="Function_5f9ae87" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.time_transform(internal)
 RETURNS internal
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$time_transform$function$
]]></string>
			<comment><![CDATA[transform a time length coercion]]></comment>
		</function>
		<function name="timedate_pl" id="Function_3b2e8b79" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.timedate_pl(time without time zone, date)
 RETURNS timestamp without time zone
 LANGUAGE sql
 IMMUTABLE PARALLEL SAFE STRICT COST 1
AS $function$select ($2 + $1)$function$
]]></string>
			<comment><![CDATA[implementation of + operator]]></comment>
		</function>
		<function name="timemi" id="Function_f14e3b3" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.timemi(abstime, reltime)
 RETURNS abstime
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$timemi$function$
]]></string>
			<comment><![CDATA[implementation of - operator]]></comment>
		</function>
		<function name="timenow" id="Function_38bb88c2" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.timenow()
 RETURNS abstime
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$timenow$function$
]]></string>
			<comment><![CDATA[current date and time (abstime)]]></comment>
		</function>
		<function name="timeofday" id="Function_6c5ba3f" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.timeofday()
 RETURNS text
 LANGUAGE internal
 PARALLEL SAFE STRICT
AS $function$timeofday$function$
]]></string>
			<comment><![CDATA[current date and time - increments during transactions]]></comment>
		</function>
		<function name="timepl" id="Function_cfd0fa4" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.timepl(abstime, reltime)
 RETURNS abstime
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$timepl$function$
]]></string>
			<comment><![CDATA[implementation of + operator]]></comment>
		</function>
		<function name="timestamp" id="Function_3370c1db" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog."timestamp"(timestamp without time zone, integer)
 RETURNS timestamp without time zone
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$timestamp_scale$function$
CREATE OR REPLACE FUNCTION pg_catalog."timestamp"(abstime)
 RETURNS timestamp without time zone
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$abstime_timestamp$function$
CREATE OR REPLACE FUNCTION pg_catalog."timestamp"(date)
 RETURNS timestamp without time zone
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$date_timestamp$function$
CREATE OR REPLACE FUNCTION pg_catalog."timestamp"(date, time without time zone)
 RETURNS timestamp without time zone
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$datetime_timestamp$function$
CREATE OR REPLACE FUNCTION pg_catalog."timestamp"(timestamp with time zone)
 RETURNS timestamp without time zone
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$timestamptz_timestamp$function$
]]></string>
			<comment><![CDATA[adjust timestamp precision]]></comment>
		</function>
		<function name="timestamp_001" id="Function_1d07462d" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog."timestamp"(timestamp without time zone, integer)
 RETURNS timestamp without time zone
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$timestamp_scale$function$
CREATE OR REPLACE FUNCTION pg_catalog."timestamp"(abstime)
 RETURNS timestamp without time zone
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$abstime_timestamp$function$
CREATE OR REPLACE FUNCTION pg_catalog."timestamp"(date)
 RETURNS timestamp without time zone
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$date_timestamp$function$
CREATE OR REPLACE FUNCTION pg_catalog."timestamp"(date, time without time zone)
 RETURNS timestamp without time zone
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$datetime_timestamp$function$
CREATE OR REPLACE FUNCTION pg_catalog."timestamp"(timestamp with time zone)
 RETURNS timestamp without time zone
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$timestamptz_timestamp$function$
]]></string>
			<comment><![CDATA[adjust timestamp precision]]></comment>
		</function>
		<function name="timestamp_002" id="Function_113e20ae" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog."timestamp"(timestamp without time zone, integer)
 RETURNS timestamp without time zone
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$timestamp_scale$function$
CREATE OR REPLACE FUNCTION pg_catalog."timestamp"(abstime)
 RETURNS timestamp without time zone
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$abstime_timestamp$function$
CREATE OR REPLACE FUNCTION pg_catalog."timestamp"(date)
 RETURNS timestamp without time zone
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$date_timestamp$function$
CREATE OR REPLACE FUNCTION pg_catalog."timestamp"(date, time without time zone)
 RETURNS timestamp without time zone
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$datetime_timestamp$function$
CREATE OR REPLACE FUNCTION pg_catalog."timestamp"(timestamp with time zone)
 RETURNS timestamp without time zone
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$timestamptz_timestamp$function$
]]></string>
			<comment><![CDATA[adjust timestamp precision]]></comment>
		</function>
		<function name="timestamp_003" id="Function_306e54d7" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog."timestamp"(timestamp without time zone, integer)
 RETURNS timestamp without time zone
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$timestamp_scale$function$
CREATE OR REPLACE FUNCTION pg_catalog."timestamp"(abstime)
 RETURNS timestamp without time zone
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$abstime_timestamp$function$
CREATE OR REPLACE FUNCTION pg_catalog."timestamp"(date)
 RETURNS timestamp without time zone
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$date_timestamp$function$
CREATE OR REPLACE FUNCTION pg_catalog."timestamp"(date, time without time zone)
 RETURNS timestamp without time zone
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$datetime_timestamp$function$
CREATE OR REPLACE FUNCTION pg_catalog."timestamp"(timestamp with time zone)
 RETURNS timestamp without time zone
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$timestamptz_timestamp$function$
]]></string>
			<comment><![CDATA[adjust timestamp precision]]></comment>
		</function>
		<function name="timestamp_004" id="Function_14514c1a" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog."timestamp"(timestamp without time zone, integer)
 RETURNS timestamp without time zone
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$timestamp_scale$function$
CREATE OR REPLACE FUNCTION pg_catalog."timestamp"(abstime)
 RETURNS timestamp without time zone
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$abstime_timestamp$function$
CREATE OR REPLACE FUNCTION pg_catalog."timestamp"(date)
 RETURNS timestamp without time zone
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$date_timestamp$function$
CREATE OR REPLACE FUNCTION pg_catalog."timestamp"(date, time without time zone)
 RETURNS timestamp without time zone
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$datetime_timestamp$function$
CREATE OR REPLACE FUNCTION pg_catalog."timestamp"(timestamp with time zone)
 RETURNS timestamp without time zone
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$timestamptz_timestamp$function$
]]></string>
			<comment><![CDATA[adjust timestamp precision]]></comment>
		</function>
		<function name="timestamp_cmp" id="Function_18cf6279" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.timestamp_cmp(timestamp without time zone, timestamp without time zone)
 RETURNS integer
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$timestamp_cmp$function$
]]></string>
			<comment><![CDATA[less-equal-greater]]></comment>
		</function>
		<function name="timestamp_cmp_date" id="Function_26f0b484" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.timestamp_cmp_date(timestamp without time zone, date)
 RETURNS integer
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$timestamp_cmp_date$function$
]]></string>
			<comment><![CDATA[less-equal-greater]]></comment>
		</function>
		<function name="timestamp_cmp_timestamptz" id="Function_3dd2cb9" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.timestamp_cmp_timestamptz(timestamp without time zone, timestamp with time zone)
 RETURNS integer
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$timestamp_cmp_timestamptz$function$
]]></string>
			<comment><![CDATA[less-equal-greater]]></comment>
		</function>
		<function name="timestamp_eq" id="Function_6940ffd" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.timestamp_eq(timestamp without time zone, timestamp without time zone)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT LEAKPROOF
AS $function$timestamp_eq$function$
]]></string>
			<comment><![CDATA[implementation of = operator]]></comment>
		</function>
		<function name="timestamp_eq_date" id="Function_196f2d9f" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.timestamp_eq_date(timestamp without time zone, date)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$timestamp_eq_date$function$
]]></string>
			<comment><![CDATA[implementation of = operator]]></comment>
		</function>
		<function name="timestamp_eq_timestamptz" id="Function_1c13e778" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.timestamp_eq_timestamptz(timestamp without time zone, timestamp with time zone)
 RETURNS boolean
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$timestamp_eq_timestamptz$function$
]]></string>
			<comment><![CDATA[implementation of = operator]]></comment>
		</function>
		<function name="timestamp_ge" id="Function_4737256" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.timestamp_ge(timestamp without time zone, timestamp without time zone)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT LEAKPROOF
AS $function$timestamp_ge$function$
]]></string>
			<comment><![CDATA[implementation of >= operator]]></comment>
		</function>
		<function name="timestamp_ge_date" id="Function_367b56f9" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.timestamp_ge_date(timestamp without time zone, date)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$timestamp_ge_date$function$
]]></string>
			<comment><![CDATA[implementation of >= operator]]></comment>
		</function>
		<function name="timestamp_ge_timestamptz" id="Function_39f66f45" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.timestamp_ge_timestamptz(timestamp without time zone, timestamp with time zone)
 RETURNS boolean
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$timestamp_ge_timestamptz$function$
]]></string>
			<comment><![CDATA[implementation of >= operator]]></comment>
		</function>
		<function name="timestamp_gt" id="Function_386c865c" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.timestamp_gt(timestamp without time zone, timestamp without time zone)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT LEAKPROOF
AS $function$timestamp_gt$function$
]]></string>
			<comment><![CDATA[implementation of > operator]]></comment>
		</function>
		<function name="timestamp_gt_date" id="Function_2fb610fd" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.timestamp_gt_date(timestamp without time zone, date)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$timestamp_gt_date$function$
]]></string>
			<comment><![CDATA[implementation of > operator]]></comment>
		</function>
		<function name="timestamp_gt_timestamptz" id="Function_145462db" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.timestamp_gt_timestamptz(timestamp without time zone, timestamp with time zone)
 RETURNS boolean
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$timestamp_gt_timestamptz$function$
]]></string>
			<comment><![CDATA[implementation of > operator]]></comment>
		</function>
		<function name="timestamp_hash" id="Function_253dd006" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.timestamp_hash(timestamp without time zone)
 RETURNS integer
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$timestamp_hash$function$
]]></string>
			<comment><![CDATA[hash]]></comment>
		</function>
		<function name="timestamp_in" id="Function_1f1e882" isSystem="false" >
			<comment><![CDATA[I/O]]></comment>
		</function>
		<function name="timestamp_izone_transform" id="Function_5f4242f" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.timestamp_izone_transform(internal)
 RETURNS internal
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$timestamp_izone_transform$function$
]]></string>
			<comment><![CDATA[transform a time zone adjustment]]></comment>
		</function>
		<function name="timestamp_larger" id="Function_ff5dd1c" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.timestamp_larger(timestamp without time zone, timestamp without time zone)
 RETURNS timestamp without time zone
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$timestamp_larger$function$
]]></string>
			<comment><![CDATA[larger of two]]></comment>
		</function>
		<function name="timestamp_le" id="Function_22adf82" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.timestamp_le(timestamp without time zone, timestamp without time zone)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT LEAKPROOF
AS $function$timestamp_le$function$
]]></string>
			<comment><![CDATA[implementation of <= operator]]></comment>
		</function>
		<function name="timestamp_le_date" id="Function_3882a692" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.timestamp_le_date(timestamp without time zone, date)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$timestamp_le_date$function$
]]></string>
			<comment><![CDATA[implementation of <= operator]]></comment>
		</function>
		<function name="timestamp_le_timestamptz" id="Function_55183e2" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.timestamp_le_timestamptz(timestamp without time zone, timestamp with time zone)
 RETURNS boolean
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$timestamp_le_timestamptz$function$
]]></string>
			<comment><![CDATA[implementation of <= operator]]></comment>
		</function>
		<function name="timestamp_lt" id="Function_21056f8b" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.timestamp_lt(timestamp without time zone, timestamp without time zone)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT LEAKPROOF
AS $function$timestamp_lt$function$
]]></string>
			<comment><![CDATA[implementation of < operator]]></comment>
		</function>
		<function name="timestamp_lt_date" id="Function_1f4591e1" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.timestamp_lt_date(timestamp without time zone, date)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$timestamp_lt_date$function$
]]></string>
			<comment><![CDATA[implementation of < operator]]></comment>
		</function>
		<function name="timestamp_lt_timestamptz" id="Function_f0670fc" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.timestamp_lt_timestamptz(timestamp without time zone, timestamp with time zone)
 RETURNS boolean
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$timestamp_lt_timestamptz$function$
]]></string>
			<comment><![CDATA[implementation of < operator]]></comment>
		</function>
		<function name="timestamp_mi" id="Function_1e63459d" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.timestamp_mi(timestamp without time zone, timestamp without time zone)
 RETURNS interval
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$timestamp_mi$function$
]]></string>
			<comment><![CDATA[implementation of - operator]]></comment>
		</function>
		<function name="timestamp_mi_interval" id="Function_2f20210f" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.timestamp_mi_interval(timestamp without time zone, interval)
 RETURNS timestamp without time zone
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$timestamp_mi_interval$function$
]]></string>
			<comment><![CDATA[implementation of - operator]]></comment>
		</function>
		<function name="timestamp_ne" id="Function_821ac47" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.timestamp_ne(timestamp without time zone, timestamp without time zone)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT LEAKPROOF
AS $function$timestamp_ne$function$
]]></string>
			<comment><![CDATA[implementation of <> operator]]></comment>
		</function>
		<function name="timestamp_ne_date" id="Function_2204a570" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.timestamp_ne_date(timestamp without time zone, date)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$timestamp_ne_date$function$
]]></string>
			<comment><![CDATA[implementation of <> operator]]></comment>
		</function>
		<function name="timestamp_ne_timestamptz" id="Function_1a02e219" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.timestamp_ne_timestamptz(timestamp without time zone, timestamp with time zone)
 RETURNS boolean
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$timestamp_ne_timestamptz$function$
]]></string>
			<comment><![CDATA[implementation of <> operator]]></comment>
		</function>
		<function name="timestamp_out" id="Function_323e7ee5" isSystem="false" >
			<comment><![CDATA[I/O]]></comment>
		</function>
		<function name="timestamp_pl_interval" id="Function_3a44ebd0" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.timestamp_pl_interval(timestamp without time zone, interval)
 RETURNS timestamp without time zone
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$timestamp_pl_interval$function$
]]></string>
			<comment><![CDATA[implementation of + operator]]></comment>
		</function>
		<function name="timestamp_recv" id="Function_1362930a" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.timestamp_recv(internal, oid, integer)
 RETURNS timestamp without time zone
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$timestamp_recv$function$
]]></string>
			<comment><![CDATA[I/O]]></comment>
		</function>
		<function name="timestamp_send" id="Function_e26cb75" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.timestamp_send(timestamp without time zone)
 RETURNS bytea
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$timestamp_send$function$
]]></string>
			<comment><![CDATA[I/O]]></comment>
		</function>
		<function name="timestamp_smaller" id="Function_2780bc20" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.timestamp_smaller(timestamp without time zone, timestamp without time zone)
 RETURNS timestamp without time zone
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$timestamp_smaller$function$
]]></string>
			<comment><![CDATA[smaller of two]]></comment>
		</function>
		<function name="timestamp_sortsupport" id="Function_324f0961" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.timestamp_sortsupport(internal)
 RETURNS void
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$timestamp_sortsupport$function$
]]></string>
			<comment><![CDATA[sort support]]></comment>
		</function>
		<function name="timestamp_transform" id="Function_37db625" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.timestamp_transform(internal)
 RETURNS internal
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$timestamp_transform$function$
]]></string>
			<comment><![CDATA[transform a timestamp length coercion]]></comment>
		</function>
		<function name="timestamp_zone_transform" id="Function_387bdbcc" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.timestamp_zone_transform(internal)
 RETURNS internal
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$timestamp_zone_transform$function$
]]></string>
			<comment><![CDATA[transform a time zone adjustment]]></comment>
		</function>
		<function name="timestamptypmodin" id="Function_575a353" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.timestamptypmodin(cstring[])
 RETURNS integer
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$timestamptypmodin$function$
]]></string>
			<comment><![CDATA[I/O typmod]]></comment>
		</function>
		<function name="timestamptypmodout" id="Function_1a21344a" isSystem="false" >
			<comment><![CDATA[I/O typmod]]></comment>
		</function>
		<function name="timestamptz" id="Function_cf6d47e" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.timestamptz(abstime)
 RETURNS timestamp with time zone
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$abstime_timestamptz$function$
CREATE OR REPLACE FUNCTION pg_catalog.timestamptz(date)
 RETURNS timestamp with time zone
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$date_timestamptz$function$
CREATE OR REPLACE FUNCTION pg_catalog.timestamptz(date, time without time zone)
 RETURNS timestamp with time zone
 LANGUAGE sql
 STABLE PARALLEL SAFE STRICT COST 1
AS $function$select cast(($1 + $2) as timestamp with time zone)$function$
CREATE OR REPLACE FUNCTION pg_catalog.timestamptz(date, time with time zone)
 RETURNS timestamp with time zone
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$datetimetz_timestamptz$function$
CREATE OR REPLACE FUNCTION pg_catalog.timestamptz(timestamp with time zone, integer)
 RETURNS timestamp with time zone
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$timestamptz_scale$function$
CREATE OR REPLACE FUNCTION pg_catalog.timestamptz(timestamp without time zone)
 RETURNS timestamp with time zone
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$timestamp_timestamptz$function$
]]></string>
			<comment><![CDATA[convert abstime to timestamp with time zone]]></comment>
		</function>
		<function name="timestamptz_001" id="Function_19597e07" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.timestamptz(abstime)
 RETURNS timestamp with time zone
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$abstime_timestamptz$function$
CREATE OR REPLACE FUNCTION pg_catalog.timestamptz(date)
 RETURNS timestamp with time zone
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$date_timestamptz$function$
CREATE OR REPLACE FUNCTION pg_catalog.timestamptz(date, time without time zone)
 RETURNS timestamp with time zone
 LANGUAGE sql
 STABLE PARALLEL SAFE STRICT COST 1
AS $function$select cast(($1 + $2) as timestamp with time zone)$function$
CREATE OR REPLACE FUNCTION pg_catalog.timestamptz(date, time with time zone)
 RETURNS timestamp with time zone
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$datetimetz_timestamptz$function$
CREATE OR REPLACE FUNCTION pg_catalog.timestamptz(timestamp with time zone, integer)
 RETURNS timestamp with time zone
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$timestamptz_scale$function$
CREATE OR REPLACE FUNCTION pg_catalog.timestamptz(timestamp without time zone)
 RETURNS timestamp with time zone
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$timestamp_timestamptz$function$
]]></string>
			<comment><![CDATA[convert abstime to timestamp with time zone]]></comment>
		</function>
		<function name="timestamptz_002" id="Function_2a325609" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.timestamptz(abstime)
 RETURNS timestamp with time zone
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$abstime_timestamptz$function$
CREATE OR REPLACE FUNCTION pg_catalog.timestamptz(date)
 RETURNS timestamp with time zone
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$date_timestamptz$function$
CREATE OR REPLACE FUNCTION pg_catalog.timestamptz(date, time without time zone)
 RETURNS timestamp with time zone
 LANGUAGE sql
 STABLE PARALLEL SAFE STRICT COST 1
AS $function$select cast(($1 + $2) as timestamp with time zone)$function$
CREATE OR REPLACE FUNCTION pg_catalog.timestamptz(date, time with time zone)
 RETURNS timestamp with time zone
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$datetimetz_timestamptz$function$
CREATE OR REPLACE FUNCTION pg_catalog.timestamptz(timestamp with time zone, integer)
 RETURNS timestamp with time zone
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$timestamptz_scale$function$
CREATE OR REPLACE FUNCTION pg_catalog.timestamptz(timestamp without time zone)
 RETURNS timestamp with time zone
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$timestamp_timestamptz$function$
]]></string>
			<comment><![CDATA[convert abstime to timestamp with time zone]]></comment>
		</function>
		<function name="timestamptz_003" id="Function_2570b2e5" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.timestamptz(abstime)
 RETURNS timestamp with time zone
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$abstime_timestamptz$function$
CREATE OR REPLACE FUNCTION pg_catalog.timestamptz(date)
 RETURNS timestamp with time zone
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$date_timestamptz$function$
CREATE OR REPLACE FUNCTION pg_catalog.timestamptz(date, time without time zone)
 RETURNS timestamp with time zone
 LANGUAGE sql
 STABLE PARALLEL SAFE STRICT COST 1
AS $function$select cast(($1 + $2) as timestamp with time zone)$function$
CREATE OR REPLACE FUNCTION pg_catalog.timestamptz(date, time with time zone)
 RETURNS timestamp with time zone
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$datetimetz_timestamptz$function$
CREATE OR REPLACE FUNCTION pg_catalog.timestamptz(timestamp with time zone, integer)
 RETURNS timestamp with time zone
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$timestamptz_scale$function$
CREATE OR REPLACE FUNCTION pg_catalog.timestamptz(timestamp without time zone)
 RETURNS timestamp with time zone
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$timestamp_timestamptz$function$
]]></string>
			<comment><![CDATA[convert abstime to timestamp with time zone]]></comment>
		</function>
		<function name="timestamptz_004" id="Function_1b97537a" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.timestamptz(abstime)
 RETURNS timestamp with time zone
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$abstime_timestamptz$function$
CREATE OR REPLACE FUNCTION pg_catalog.timestamptz(date)
 RETURNS timestamp with time zone
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$date_timestamptz$function$
CREATE OR REPLACE FUNCTION pg_catalog.timestamptz(date, time without time zone)
 RETURNS timestamp with time zone
 LANGUAGE sql
 STABLE PARALLEL SAFE STRICT COST 1
AS $function$select cast(($1 + $2) as timestamp with time zone)$function$
CREATE OR REPLACE FUNCTION pg_catalog.timestamptz(date, time with time zone)
 RETURNS timestamp with time zone
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$datetimetz_timestamptz$function$
CREATE OR REPLACE FUNCTION pg_catalog.timestamptz(timestamp with time zone, integer)
 RETURNS timestamp with time zone
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$timestamptz_scale$function$
CREATE OR REPLACE FUNCTION pg_catalog.timestamptz(timestamp without time zone)
 RETURNS timestamp with time zone
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$timestamp_timestamptz$function$
]]></string>
			<comment><![CDATA[convert abstime to timestamp with time zone]]></comment>
		</function>
		<function name="timestamptz_005" id="Function_c6f9e54" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.timestamptz(abstime)
 RETURNS timestamp with time zone
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$abstime_timestamptz$function$
CREATE OR REPLACE FUNCTION pg_catalog.timestamptz(date)
 RETURNS timestamp with time zone
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$date_timestamptz$function$
CREATE OR REPLACE FUNCTION pg_catalog.timestamptz(date, time without time zone)
 RETURNS timestamp with time zone
 LANGUAGE sql
 STABLE PARALLEL SAFE STRICT COST 1
AS $function$select cast(($1 + $2) as timestamp with time zone)$function$
CREATE OR REPLACE FUNCTION pg_catalog.timestamptz(date, time with time zone)
 RETURNS timestamp with time zone
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$datetimetz_timestamptz$function$
CREATE OR REPLACE FUNCTION pg_catalog.timestamptz(timestamp with time zone, integer)
 RETURNS timestamp with time zone
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$timestamptz_scale$function$
CREATE OR REPLACE FUNCTION pg_catalog.timestamptz(timestamp without time zone)
 RETURNS timestamp with time zone
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$timestamp_timestamptz$function$
]]></string>
			<comment><![CDATA[convert abstime to timestamp with time zone]]></comment>
		</function>
		<function name="timestamptz_cmp" id="Function_16c3c100" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.timestamptz_cmp(timestamp with time zone, timestamp with time zone)
 RETURNS integer
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$timestamp_cmp$function$
]]></string>
			<comment><![CDATA[less-equal-greater]]></comment>
		</function>
		<function name="timestamptz_cmp_date" id="Function_54dc157" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.timestamptz_cmp_date(timestamp with time zone, date)
 RETURNS integer
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$timestamptz_cmp_date$function$
]]></string>
			<comment><![CDATA[less-equal-greater]]></comment>
		</function>
		<function name="timestamptz_cmp_timestamp" id="Function_2e70353c" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.timestamptz_cmp_timestamp(timestamp with time zone, timestamp without time zone)
 RETURNS integer
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$timestamptz_cmp_timestamp$function$
]]></string>
			<comment><![CDATA[less-equal-greater]]></comment>
		</function>
		<function name="timestamptz_eq" id="Function_f26198e" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.timestamptz_eq(timestamp with time zone, timestamp with time zone)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT LEAKPROOF
AS $function$timestamp_eq$function$
]]></string>
			<comment><![CDATA[implementation of = operator]]></comment>
		</function>
		<function name="timestamptz_eq_date" id="Function_28ea8445" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.timestamptz_eq_date(timestamp with time zone, date)
 RETURNS boolean
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$timestamptz_eq_date$function$
]]></string>
			<comment><![CDATA[implementation of = operator]]></comment>
		</function>
		<function name="timestamptz_eq_timestamp" id="Function_2945d7be" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.timestamptz_eq_timestamp(timestamp with time zone, timestamp without time zone)
 RETURNS boolean
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$timestamptz_eq_timestamp$function$
]]></string>
			<comment><![CDATA[implementation of = operator]]></comment>
		</function>
		<function name="timestamptz_ge" id="Function_1b626937" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.timestamptz_ge(timestamp with time zone, timestamp with time zone)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT LEAKPROOF
AS $function$timestamp_ge$function$
]]></string>
			<comment><![CDATA[implementation of >= operator]]></comment>
		</function>
		<function name="timestamptz_ge_date" id="Function_32786638" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.timestamptz_ge_date(timestamp with time zone, date)
 RETURNS boolean
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$timestamptz_ge_date$function$
]]></string>
			<comment><![CDATA[implementation of >= operator]]></comment>
		</function>
		<function name="timestamptz_ge_timestamp" id="Function_59d2411" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.timestamptz_ge_timestamp(timestamp with time zone, timestamp without time zone)
 RETURNS boolean
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$timestamptz_ge_timestamp$function$
]]></string>
			<comment><![CDATA[implementation of >= operator]]></comment>
		</function>
		<function name="timestamptz_gt" id="Function_2ab1a368" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.timestamptz_gt(timestamp with time zone, timestamp with time zone)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT LEAKPROOF
AS $function$timestamp_gt$function$
]]></string>
			<comment><![CDATA[implementation of > operator]]></comment>
		</function>
		<function name="timestamptz_gt_date" id="Function_303f9761" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.timestamptz_gt_date(timestamp with time zone, date)
 RETURNS boolean
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$timestamptz_gt_date$function$
]]></string>
			<comment><![CDATA[implementation of > operator]]></comment>
		</function>
		<function name="timestamptz_gt_timestamp" id="Function_5217e39" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.timestamptz_gt_timestamp(timestamp with time zone, timestamp without time zone)
 RETURNS boolean
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$timestamptz_gt_timestamp$function$
]]></string>
			<comment><![CDATA[implementation of > operator]]></comment>
		</function>
		<function name="timestamptz_in" id="Function_2b464ddf" isSystem="false" >
			<comment><![CDATA[I/O]]></comment>
		</function>
		<function name="timestamptz_larger" id="Function_24ee8959" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.timestamptz_larger(timestamp with time zone, timestamp with time zone)
 RETURNS timestamp with time zone
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$timestamp_larger$function$
]]></string>
			<comment><![CDATA[larger of two]]></comment>
		</function>
		<function name="timestamptz_le" id="Function_2f70cc99" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.timestamptz_le(timestamp with time zone, timestamp with time zone)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT LEAKPROOF
AS $function$timestamp_le$function$
]]></string>
			<comment><![CDATA[implementation of <= operator]]></comment>
		</function>
		<function name="timestamptz_le_date" id="Function_548ccdb" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.timestamptz_le_date(timestamp with time zone, date)
 RETURNS boolean
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$timestamptz_le_date$function$
]]></string>
			<comment><![CDATA[implementation of <= operator]]></comment>
		</function>
		<function name="timestamptz_le_timestamp" id="Function_bcef962" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.timestamptz_le_timestamp(timestamp with time zone, timestamp without time zone)
 RETURNS boolean
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$timestamptz_le_timestamp$function$
]]></string>
			<comment><![CDATA[implementation of <= operator]]></comment>
		</function>
		<function name="timestamptz_lt" id="Function_324a768e" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.timestamptz_lt(timestamp with time zone, timestamp with time zone)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT LEAKPROOF
AS $function$timestamp_lt$function$
]]></string>
			<comment><![CDATA[implementation of < operator]]></comment>
		</function>
		<function name="timestamptz_lt_date" id="Function_f8da3c4" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.timestamptz_lt_date(timestamp with time zone, date)
 RETURNS boolean
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$timestamptz_lt_date$function$
]]></string>
			<comment><![CDATA[implementation of < operator]]></comment>
		</function>
		<function name="timestamptz_lt_timestamp" id="Function_2c09413f" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.timestamptz_lt_timestamp(timestamp with time zone, timestamp without time zone)
 RETURNS boolean
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$timestamptz_lt_timestamp$function$
]]></string>
			<comment><![CDATA[implementation of < operator]]></comment>
		</function>
		<function name="timestamptz_mi" id="Function_23aa7a4b" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.timestamptz_mi(timestamp with time zone, timestamp with time zone)
 RETURNS interval
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$timestamp_mi$function$
]]></string>
			<comment><![CDATA[implementation of - operator]]></comment>
		</function>
		<function name="timestamptz_mi_interval" id="Function_6e012af" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.timestamptz_mi_interval(timestamp with time zone, interval)
 RETURNS timestamp with time zone
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$timestamptz_mi_interval$function$
]]></string>
			<comment><![CDATA[implementation of - operator]]></comment>
		</function>
		<function name="timestamptz_ne" id="Function_21066397" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.timestamptz_ne(timestamp with time zone, timestamp with time zone)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT LEAKPROOF
AS $function$timestamp_ne$function$
]]></string>
			<comment><![CDATA[implementation of <> operator]]></comment>
		</function>
		<function name="timestamptz_ne_date" id="Function_766a7e1" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.timestamptz_ne_date(timestamp with time zone, date)
 RETURNS boolean
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$timestamptz_ne_date$function$
]]></string>
			<comment><![CDATA[implementation of <> operator]]></comment>
		</function>
		<function name="timestamptz_ne_timestamp" id="Function_e0c1e8d" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.timestamptz_ne_timestamp(timestamp with time zone, timestamp without time zone)
 RETURNS boolean
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$timestamptz_ne_timestamp$function$
]]></string>
			<comment><![CDATA[implementation of <> operator]]></comment>
		</function>
		<function name="timestamptz_out" id="Function_24c4d8da" isSystem="false" >
			<comment><![CDATA[I/O]]></comment>
		</function>
		<function name="timestamptz_pl_interval" id="Function_17591075" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.timestamptz_pl_interval(timestamp with time zone, interval)
 RETURNS timestamp with time zone
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$timestamptz_pl_interval$function$
]]></string>
			<comment><![CDATA[implementation of + operator]]></comment>
		</function>
		<function name="timestamptz_recv" id="Function_4756ac6" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.timestamptz_recv(internal, oid, integer)
 RETURNS timestamp with time zone
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$timestamptz_recv$function$
]]></string>
			<comment><![CDATA[I/O]]></comment>
		</function>
		<function name="timestamptz_send" id="Function_7fe5c9e" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.timestamptz_send(timestamp with time zone)
 RETURNS bytea
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$timestamptz_send$function$
]]></string>
			<comment><![CDATA[I/O]]></comment>
		</function>
		<function name="timestamptz_smaller" id="Function_215723f3" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.timestamptz_smaller(timestamp with time zone, timestamp with time zone)
 RETURNS timestamp with time zone
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$timestamp_smaller$function$
]]></string>
			<comment><![CDATA[smaller of two]]></comment>
		</function>
		<function name="timestamptztypmodin" id="Function_27fd253" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.timestamptztypmodin(cstring[])
 RETURNS integer
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$timestamptztypmodin$function$
]]></string>
			<comment><![CDATA[I/O typmod]]></comment>
		</function>
		<function name="timestamptztypmodout" id="Function_1bc67cf6" isSystem="false" >
			<comment><![CDATA[I/O typmod]]></comment>
		</function>
		<function name="timetypmodin" id="Function_1d834f34" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.timetypmodin(cstring[])
 RETURNS integer
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$timetypmodin$function$
]]></string>
			<comment><![CDATA[I/O typmod]]></comment>
		</function>
		<function name="timetypmodout" id="Function_38313b38" isSystem="false" >
			<comment><![CDATA[I/O typmod]]></comment>
		</function>
		<function name="timetz" id="Function_23c6ea10" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.timetz(time without time zone)
 RETURNS time with time zone
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$time_timetz$function$
CREATE OR REPLACE FUNCTION pg_catalog.timetz(timestamp with time zone)
 RETURNS time with time zone
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$timestamptz_timetz$function$
CREATE OR REPLACE FUNCTION pg_catalog.timetz(time with time zone, integer)
 RETURNS time with time zone
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$timetz_scale$function$
]]></string>
			<comment><![CDATA[convert timestamp with time zone to time with time zone]]></comment>
		</function>
		<function name="timetz_001" id="Function_b9ebdfc" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.timetz(time without time zone)
 RETURNS time with time zone
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$time_timetz$function$
CREATE OR REPLACE FUNCTION pg_catalog.timetz(timestamp with time zone)
 RETURNS time with time zone
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$timestamptz_timetz$function$
CREATE OR REPLACE FUNCTION pg_catalog.timetz(time with time zone, integer)
 RETURNS time with time zone
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$timetz_scale$function$
]]></string>
			<comment><![CDATA[convert timestamp with time zone to time with time zone]]></comment>
		</function>
		<function name="timetz_002" id="Function_ada752f" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.timetz(time without time zone)
 RETURNS time with time zone
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$time_timetz$function$
CREATE OR REPLACE FUNCTION pg_catalog.timetz(timestamp with time zone)
 RETURNS time with time zone
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$timestamptz_timetz$function$
CREATE OR REPLACE FUNCTION pg_catalog.timetz(time with time zone, integer)
 RETURNS time with time zone
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$timetz_scale$function$
]]></string>
			<comment><![CDATA[convert timestamp with time zone to time with time zone]]></comment>
		</function>
		<function name="timetz_cmp" id="Function_20214c20" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.timetz_cmp(time with time zone, time with time zone)
 RETURNS integer
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$timetz_cmp$function$
]]></string>
			<comment><![CDATA[less-equal-greater]]></comment>
		</function>
		<function name="timetz_eq" id="Function_19dab12" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.timetz_eq(time with time zone, time with time zone)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT LEAKPROOF
AS $function$timetz_eq$function$
]]></string>
			<comment><![CDATA[implementation of = operator]]></comment>
		</function>
		<function name="timetz_ge" id="Function_3b1a76eb" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.timetz_ge(time with time zone, time with time zone)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT LEAKPROOF
AS $function$timetz_ge$function$
]]></string>
			<comment><![CDATA[implementation of >= operator]]></comment>
		</function>
		<function name="timetz_gt" id="Function_34402f75" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.timetz_gt(time with time zone, time with time zone)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT LEAKPROOF
AS $function$timetz_gt$function$
]]></string>
			<comment><![CDATA[implementation of > operator]]></comment>
		</function>
		<function name="timetz_hash" id="Function_16d80762" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.timetz_hash(time with time zone)
 RETURNS integer
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$timetz_hash$function$
]]></string>
			<comment><![CDATA[hash]]></comment>
		</function>
		<function name="timetz_in" id="Function_22543a71" isSystem="false" >
			<comment><![CDATA[I/O]]></comment>
		</function>
		<function name="timetz_larger" id="Function_1c386208" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.timetz_larger(time with time zone, time with time zone)
 RETURNS time with time zone
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$timetz_larger$function$
]]></string>
			<comment><![CDATA[larger of two]]></comment>
		</function>
		<function name="timetz_le" id="Function_5e4a513" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.timetz_le(time with time zone, time with time zone)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT LEAKPROOF
AS $function$timetz_le$function$
]]></string>
			<comment><![CDATA[implementation of <= operator]]></comment>
		</function>
		<function name="timetz_lt" id="Function_125182ee" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.timetz_lt(time with time zone, time with time zone)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT LEAKPROOF
AS $function$timetz_lt$function$
]]></string>
			<comment><![CDATA[implementation of < operator]]></comment>
		</function>
		<function name="timetz_mi_interval" id="Function_467f20c" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.timetz_mi_interval(time with time zone, interval)
 RETURNS time with time zone
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$timetz_mi_interval$function$
]]></string>
			<comment><![CDATA[implementation of - operator]]></comment>
		</function>
		<function name="timetz_ne" id="Function_643271a" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.timetz_ne(time with time zone, time with time zone)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT LEAKPROOF
AS $function$timetz_ne$function$
]]></string>
			<comment><![CDATA[implementation of <> operator]]></comment>
		</function>
		<function name="timetz_out" id="Function_388fc162" isSystem="false" >
			<comment><![CDATA[I/O]]></comment>
		</function>
		<function name="timetz_pl_interval" id="Function_1206620f" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.timetz_pl_interval(time with time zone, interval)
 RETURNS time with time zone
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$timetz_pl_interval$function$
]]></string>
			<comment><![CDATA[implementation of + operator]]></comment>
		</function>
		<function name="timetz_recv" id="Function_24d6835" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.timetz_recv(internal, oid, integer)
 RETURNS time with time zone
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$timetz_recv$function$
]]></string>
			<comment><![CDATA[I/O]]></comment>
		</function>
		<function name="timetz_send" id="Function_39eb14e6" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.timetz_send(time with time zone)
 RETURNS bytea
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$timetz_send$function$
]]></string>
			<comment><![CDATA[I/O]]></comment>
		</function>
		<function name="timetz_smaller" id="Function_18478a27" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.timetz_smaller(time with time zone, time with time zone)
 RETURNS time with time zone
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$timetz_smaller$function$
]]></string>
			<comment><![CDATA[smaller of two]]></comment>
		</function>
		<function name="timetzdate_pl" id="Function_2c5cf7a0" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.timetzdate_pl(time with time zone, date)
 RETURNS timestamp with time zone
 LANGUAGE sql
 IMMUTABLE PARALLEL SAFE STRICT COST 1
AS $function$select ($2 + $1)$function$
]]></string>
			<comment><![CDATA[implementation of + operator]]></comment>
		</function>
		<function name="timetztypmodin" id="Function_1aa4ab19" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.timetztypmodin(cstring[])
 RETURNS integer
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$timetztypmodin$function$
]]></string>
			<comment><![CDATA[I/O typmod]]></comment>
		</function>
		<function name="timetztypmodout" id="Function_1f7825c3" isSystem="false" >
			<comment><![CDATA[I/O typmod]]></comment>
		</function>
		<function name="timezone" id="Function_133de5cc" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.timezone(interval, timestamp with time zone)
 RETURNS timestamp without time zone
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$timestamptz_izone$function$
CREATE OR REPLACE FUNCTION pg_catalog.timezone(text, timestamp with time zone)
 RETURNS timestamp without time zone
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$timestamptz_zone$function$
CREATE OR REPLACE FUNCTION pg_catalog.timezone(text, time with time zone)
 RETURNS time with time zone
 LANGUAGE internal
 PARALLEL SAFE STRICT
AS $function$timetz_zone$function$
CREATE OR REPLACE FUNCTION pg_catalog.timezone(interval, time with time zone)
 RETURNS time with time zone
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$timetz_izone$function$
CREATE OR REPLACE FUNCTION pg_catalog.timezone(text, timestamp without time zone)
 RETURNS timestamp with time zone
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$timestamp_zone$function$
CREATE OR REPLACE FUNCTION pg_catalog.timezone(interval, timestamp without time zone)
 RETURNS timestamp with time zone
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$timestamp_izone$function$
]]></string>
			<comment><![CDATA[adjust timestamp to new time zone]]></comment>
		</function>
		<function name="timezone_001" id="Function_2d48a823" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.timezone(interval, timestamp with time zone)
 RETURNS timestamp without time zone
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$timestamptz_izone$function$
CREATE OR REPLACE FUNCTION pg_catalog.timezone(text, timestamp with time zone)
 RETURNS timestamp without time zone
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$timestamptz_zone$function$
CREATE OR REPLACE FUNCTION pg_catalog.timezone(text, time with time zone)
 RETURNS time with time zone
 LANGUAGE internal
 PARALLEL SAFE STRICT
AS $function$timetz_zone$function$
CREATE OR REPLACE FUNCTION pg_catalog.timezone(interval, time with time zone)
 RETURNS time with time zone
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$timetz_izone$function$
CREATE OR REPLACE FUNCTION pg_catalog.timezone(text, timestamp without time zone)
 RETURNS timestamp with time zone
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$timestamp_zone$function$
CREATE OR REPLACE FUNCTION pg_catalog.timezone(interval, timestamp without time zone)
 RETURNS timestamp with time zone
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$timestamp_izone$function$
]]></string>
			<comment><![CDATA[adjust timestamp to new time zone]]></comment>
		</function>
		<function name="timezone_002" id="Function_2b92ae80" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.timezone(interval, timestamp with time zone)
 RETURNS timestamp without time zone
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$timestamptz_izone$function$
CREATE OR REPLACE FUNCTION pg_catalog.timezone(text, timestamp with time zone)
 RETURNS timestamp without time zone
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$timestamptz_zone$function$
CREATE OR REPLACE FUNCTION pg_catalog.timezone(text, time with time zone)
 RETURNS time with time zone
 LANGUAGE internal
 PARALLEL SAFE STRICT
AS $function$timetz_zone$function$
CREATE OR REPLACE FUNCTION pg_catalog.timezone(interval, time with time zone)
 RETURNS time with time zone
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$timetz_izone$function$
CREATE OR REPLACE FUNCTION pg_catalog.timezone(text, timestamp without time zone)
 RETURNS timestamp with time zone
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$timestamp_zone$function$
CREATE OR REPLACE FUNCTION pg_catalog.timezone(interval, timestamp without time zone)
 RETURNS timestamp with time zone
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$timestamp_izone$function$
]]></string>
			<comment><![CDATA[adjust timestamp to new time zone]]></comment>
		</function>
		<function name="timezone_003" id="Function_3781b82b" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.timezone(interval, timestamp with time zone)
 RETURNS timestamp without time zone
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$timestamptz_izone$function$
CREATE OR REPLACE FUNCTION pg_catalog.timezone(text, timestamp with time zone)
 RETURNS timestamp without time zone
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$timestamptz_zone$function$
CREATE OR REPLACE FUNCTION pg_catalog.timezone(text, time with time zone)
 RETURNS time with time zone
 LANGUAGE internal
 PARALLEL SAFE STRICT
AS $function$timetz_zone$function$
CREATE OR REPLACE FUNCTION pg_catalog.timezone(interval, time with time zone)
 RETURNS time with time zone
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$timetz_izone$function$
CREATE OR REPLACE FUNCTION pg_catalog.timezone(text, timestamp without time zone)
 RETURNS timestamp with time zone
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$timestamp_zone$function$
CREATE OR REPLACE FUNCTION pg_catalog.timezone(interval, timestamp without time zone)
 RETURNS timestamp with time zone
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$timestamp_izone$function$
]]></string>
			<comment><![CDATA[adjust timestamp to new time zone]]></comment>
		</function>
		<function name="timezone_004" id="Function_2dbebd01" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.timezone(interval, timestamp with time zone)
 RETURNS timestamp without time zone
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$timestamptz_izone$function$
CREATE OR REPLACE FUNCTION pg_catalog.timezone(text, timestamp with time zone)
 RETURNS timestamp without time zone
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$timestamptz_zone$function$
CREATE OR REPLACE FUNCTION pg_catalog.timezone(text, time with time zone)
 RETURNS time with time zone
 LANGUAGE internal
 PARALLEL SAFE STRICT
AS $function$timetz_zone$function$
CREATE OR REPLACE FUNCTION pg_catalog.timezone(interval, time with time zone)
 RETURNS time with time zone
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$timetz_izone$function$
CREATE OR REPLACE FUNCTION pg_catalog.timezone(text, timestamp without time zone)
 RETURNS timestamp with time zone
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$timestamp_zone$function$
CREATE OR REPLACE FUNCTION pg_catalog.timezone(interval, timestamp without time zone)
 RETURNS timestamp with time zone
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$timestamp_izone$function$
]]></string>
			<comment><![CDATA[adjust timestamp to new time zone]]></comment>
		</function>
		<function name="timezone_005" id="Function_299adfcf" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.timezone(interval, timestamp with time zone)
 RETURNS timestamp without time zone
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$timestamptz_izone$function$
CREATE OR REPLACE FUNCTION pg_catalog.timezone(text, timestamp with time zone)
 RETURNS timestamp without time zone
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$timestamptz_zone$function$
CREATE OR REPLACE FUNCTION pg_catalog.timezone(text, time with time zone)
 RETURNS time with time zone
 LANGUAGE internal
 PARALLEL SAFE STRICT
AS $function$timetz_zone$function$
CREATE OR REPLACE FUNCTION pg_catalog.timezone(interval, time with time zone)
 RETURNS time with time zone
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$timetz_izone$function$
CREATE OR REPLACE FUNCTION pg_catalog.timezone(text, timestamp without time zone)
 RETURNS timestamp with time zone
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$timestamp_zone$function$
CREATE OR REPLACE FUNCTION pg_catalog.timezone(interval, timestamp without time zone)
 RETURNS timestamp with time zone
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$timestamp_izone$function$
]]></string>
			<comment><![CDATA[adjust timestamp to new time zone]]></comment>
		</function>
		<function name="tinterval" id="Function_4d8873c" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.tinterval(abstime, abstime)
 RETURNS tinterval
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$mktinterval$function$
]]></string>
			<comment><![CDATA[convert to tinterval]]></comment>
		</function>
		<function name="tintervalct" id="Function_d0dd066" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.tintervalct(tinterval, tinterval)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$tintervalct$function$
]]></string>
			<comment><![CDATA[implementation of << operator]]></comment>
		</function>
		<function name="tintervalend" id="Function_1bce9057" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.tintervalend(tinterval)
 RETURNS abstime
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$tintervalend$function$
]]></string>
			<comment><![CDATA[end of interval]]></comment>
		</function>
		<function name="tintervaleq" id="Function_29f6dc5c" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.tintervaleq(tinterval, tinterval)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT LEAKPROOF
AS $function$tintervaleq$function$
]]></string>
			<comment><![CDATA[implementation of = operator]]></comment>
		</function>
		<function name="tintervalge" id="Function_c010150" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.tintervalge(tinterval, tinterval)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT LEAKPROOF
AS $function$tintervalge$function$
]]></string>
			<comment><![CDATA[implementation of >= operator]]></comment>
		</function>
		<function name="tintervalgt" id="Function_1a7c717b" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.tintervalgt(tinterval, tinterval)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT LEAKPROOF
AS $function$tintervalgt$function$
]]></string>
			<comment><![CDATA[implementation of > operator]]></comment>
		</function>
		<function name="tintervalin" id="Function_4295c5f" isSystem="false" >
			<comment><![CDATA[I/O]]></comment>
		</function>
		<function name="tintervalle" id="Function_2275ba84" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.tintervalle(tinterval, tinterval)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT LEAKPROOF
AS $function$tintervalle$function$
]]></string>
			<comment><![CDATA[implementation of <= operator]]></comment>
		</function>
		<function name="tintervalleneq" id="Function_7102fe6" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.tintervalleneq(tinterval, reltime)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT LEAKPROOF
AS $function$tintervalleneq$function$
]]></string>
			<comment><![CDATA[implementation of #= operator]]></comment>
		</function>
		<function name="tintervallenge" id="Function_36fecb15" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.tintervallenge(tinterval, reltime)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT LEAKPROOF
AS $function$tintervallenge$function$
]]></string>
			<comment><![CDATA[implementation of #>= operator]]></comment>
		</function>
		<function name="tintervallengt" id="Function_22df902b" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.tintervallengt(tinterval, reltime)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT LEAKPROOF
AS $function$tintervallengt$function$
]]></string>
			<comment><![CDATA[implementation of #> operator]]></comment>
		</function>
		<function name="tintervallenle" id="Function_2ffb2435" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.tintervallenle(tinterval, reltime)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT LEAKPROOF
AS $function$tintervallenle$function$
]]></string>
			<comment><![CDATA[implementation of #<= operator]]></comment>
		</function>
		<function name="tintervallenlt" id="Function_350fcb1e" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.tintervallenlt(tinterval, reltime)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT LEAKPROOF
AS $function$tintervallenlt$function$
]]></string>
			<comment><![CDATA[implementation of #< operator]]></comment>
		</function>
		<function name="tintervallenne" id="Function_67ac81" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.tintervallenne(tinterval, reltime)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT LEAKPROOF
AS $function$tintervallenne$function$
]]></string>
			<comment><![CDATA[implementation of #<> operator]]></comment>
		</function>
		<function name="tintervallt" id="Function_5af46b7" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.tintervallt(tinterval, tinterval)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT LEAKPROOF
AS $function$tintervallt$function$
]]></string>
			<comment><![CDATA[implementation of < operator]]></comment>
		</function>
		<function name="tintervalne" id="Function_22a42606" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.tintervalne(tinterval, tinterval)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT LEAKPROOF
AS $function$tintervalne$function$
]]></string>
			<comment><![CDATA[implementation of <> operator]]></comment>
		</function>
		<function name="tintervalout" id="Function_1e635482" isSystem="false" >
			<comment><![CDATA[I/O]]></comment>
		</function>
		<function name="tintervalov" id="Function_3277d602" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.tintervalov(tinterval, tinterval)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$tintervalov$function$
]]></string>
			<comment><![CDATA[implementation of && operator]]></comment>
		</function>
		<function name="tintervalrecv" id="Function_b9bb89d" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.tintervalrecv(internal)
 RETURNS tinterval
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$tintervalrecv$function$
]]></string>
			<comment><![CDATA[I/O]]></comment>
		</function>
		<function name="tintervalrel" id="Function_29537612" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.tintervalrel(tinterval)
 RETURNS reltime
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$tintervalrel$function$
]]></string>
			<comment><![CDATA[tinterval to reltime]]></comment>
		</function>
		<function name="tintervalsame" id="Function_38fbb3c6" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.tintervalsame(tinterval, tinterval)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$tintervalsame$function$
]]></string>
			<comment><![CDATA[implementation of ~= operator]]></comment>
		</function>
		<function name="tintervalsend" id="Function_1a87292c" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.tintervalsend(tinterval)
 RETURNS bytea
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$tintervalsend$function$
]]></string>
			<comment><![CDATA[I/O]]></comment>
		</function>
		<function name="tintervalstart" id="Function_29e76b8" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.tintervalstart(tinterval)
 RETURNS abstime
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$tintervalstart$function$
]]></string>
			<comment><![CDATA[implementation of | operator]]></comment>
		</function>
		<function name="to_ascii" id="Function_39bc3dd0" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.to_ascii(text)
 RETURNS text
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$to_ascii_default$function$
CREATE OR REPLACE FUNCTION pg_catalog.to_ascii(text, name)
 RETURNS text
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$to_ascii_encname$function$
CREATE OR REPLACE FUNCTION pg_catalog.to_ascii(text, integer)
 RETURNS text
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$to_ascii_enc$function$
]]></string>
			<comment><![CDATA[encode text from DB encoding to ASCII text]]></comment>
		</function>
		<function name="to_ascii_001" id="Function_b0ac18e" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.to_ascii(text)
 RETURNS text
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$to_ascii_default$function$
CREATE OR REPLACE FUNCTION pg_catalog.to_ascii(text, name)
 RETURNS text
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$to_ascii_encname$function$
CREATE OR REPLACE FUNCTION pg_catalog.to_ascii(text, integer)
 RETURNS text
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$to_ascii_enc$function$
]]></string>
			<comment><![CDATA[encode text from DB encoding to ASCII text]]></comment>
		</function>
		<function name="to_ascii_002" id="Function_369846f5" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.to_ascii(text)
 RETURNS text
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$to_ascii_default$function$
CREATE OR REPLACE FUNCTION pg_catalog.to_ascii(text, name)
 RETURNS text
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$to_ascii_encname$function$
CREATE OR REPLACE FUNCTION pg_catalog.to_ascii(text, integer)
 RETURNS text
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$to_ascii_enc$function$
]]></string>
			<comment><![CDATA[encode text from DB encoding to ASCII text]]></comment>
		</function>
		<function name="to_char" id="Function_1c129244" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.to_char(timestamp with time zone, text)
 RETURNS text
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$timestamptz_to_char$function$
CREATE OR REPLACE FUNCTION pg_catalog.to_char(numeric, text)
 RETURNS text
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$numeric_to_char$function$
CREATE OR REPLACE FUNCTION pg_catalog.to_char(integer, text)
 RETURNS text
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$int4_to_char$function$
CREATE OR REPLACE FUNCTION pg_catalog.to_char(bigint, text)
 RETURNS text
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$int8_to_char$function$
CREATE OR REPLACE FUNCTION pg_catalog.to_char(real, text)
 RETURNS text
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$float4_to_char$function$
CREATE OR REPLACE FUNCTION pg_catalog.to_char(double precision, text)
 RETURNS text
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$float8_to_char$function$
CREATE OR REPLACE FUNCTION pg_catalog.to_char(interval, text)
 RETURNS text
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$interval_to_char$function$
CREATE OR REPLACE FUNCTION pg_catalog.to_char(timestamp without time zone, text)
 RETURNS text
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$timestamp_to_char$function$
]]></string>
			<comment><![CDATA[format interval to text]]></comment>
		</function>
		<function name="to_char_001" id="Function_113c1dca" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.to_char(timestamp with time zone, text)
 RETURNS text
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$timestamptz_to_char$function$
CREATE OR REPLACE FUNCTION pg_catalog.to_char(numeric, text)
 RETURNS text
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$numeric_to_char$function$
CREATE OR REPLACE FUNCTION pg_catalog.to_char(integer, text)
 RETURNS text
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$int4_to_char$function$
CREATE OR REPLACE FUNCTION pg_catalog.to_char(bigint, text)
 RETURNS text
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$int8_to_char$function$
CREATE OR REPLACE FUNCTION pg_catalog.to_char(real, text)
 RETURNS text
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$float4_to_char$function$
CREATE OR REPLACE FUNCTION pg_catalog.to_char(double precision, text)
 RETURNS text
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$float8_to_char$function$
CREATE OR REPLACE FUNCTION pg_catalog.to_char(interval, text)
 RETURNS text
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$interval_to_char$function$
CREATE OR REPLACE FUNCTION pg_catalog.to_char(timestamp without time zone, text)
 RETURNS text
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$timestamp_to_char$function$
]]></string>
			<comment><![CDATA[format interval to text]]></comment>
		</function>
		<function name="to_char_002" id="Function_2761eb1b" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.to_char(timestamp with time zone, text)
 RETURNS text
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$timestamptz_to_char$function$
CREATE OR REPLACE FUNCTION pg_catalog.to_char(numeric, text)
 RETURNS text
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$numeric_to_char$function$
CREATE OR REPLACE FUNCTION pg_catalog.to_char(integer, text)
 RETURNS text
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$int4_to_char$function$
CREATE OR REPLACE FUNCTION pg_catalog.to_char(bigint, text)
 RETURNS text
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$int8_to_char$function$
CREATE OR REPLACE FUNCTION pg_catalog.to_char(real, text)
 RETURNS text
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$float4_to_char$function$
CREATE OR REPLACE FUNCTION pg_catalog.to_char(double precision, text)
 RETURNS text
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$float8_to_char$function$
CREATE OR REPLACE FUNCTION pg_catalog.to_char(interval, text)
 RETURNS text
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$interval_to_char$function$
CREATE OR REPLACE FUNCTION pg_catalog.to_char(timestamp without time zone, text)
 RETURNS text
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$timestamp_to_char$function$
]]></string>
			<comment><![CDATA[format interval to text]]></comment>
		</function>
		<function name="to_char_003" id="Function_726a0a8" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.to_char(timestamp with time zone, text)
 RETURNS text
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$timestamptz_to_char$function$
CREATE OR REPLACE FUNCTION pg_catalog.to_char(numeric, text)
 RETURNS text
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$numeric_to_char$function$
CREATE OR REPLACE FUNCTION pg_catalog.to_char(integer, text)
 RETURNS text
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$int4_to_char$function$
CREATE OR REPLACE FUNCTION pg_catalog.to_char(bigint, text)
 RETURNS text
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$int8_to_char$function$
CREATE OR REPLACE FUNCTION pg_catalog.to_char(real, text)
 RETURNS text
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$float4_to_char$function$
CREATE OR REPLACE FUNCTION pg_catalog.to_char(double precision, text)
 RETURNS text
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$float8_to_char$function$
CREATE OR REPLACE FUNCTION pg_catalog.to_char(interval, text)
 RETURNS text
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$interval_to_char$function$
CREATE OR REPLACE FUNCTION pg_catalog.to_char(timestamp without time zone, text)
 RETURNS text
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$timestamp_to_char$function$
]]></string>
			<comment><![CDATA[format interval to text]]></comment>
		</function>
		<function name="to_char_004" id="Function_2b44eb2b" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.to_char(timestamp with time zone, text)
 RETURNS text
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$timestamptz_to_char$function$
CREATE OR REPLACE FUNCTION pg_catalog.to_char(numeric, text)
 RETURNS text
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$numeric_to_char$function$
CREATE OR REPLACE FUNCTION pg_catalog.to_char(integer, text)
 RETURNS text
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$int4_to_char$function$
CREATE OR REPLACE FUNCTION pg_catalog.to_char(bigint, text)
 RETURNS text
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$int8_to_char$function$
CREATE OR REPLACE FUNCTION pg_catalog.to_char(real, text)
 RETURNS text
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$float4_to_char$function$
CREATE OR REPLACE FUNCTION pg_catalog.to_char(double precision, text)
 RETURNS text
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$float8_to_char$function$
CREATE OR REPLACE FUNCTION pg_catalog.to_char(interval, text)
 RETURNS text
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$interval_to_char$function$
CREATE OR REPLACE FUNCTION pg_catalog.to_char(timestamp without time zone, text)
 RETURNS text
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$timestamp_to_char$function$
]]></string>
			<comment><![CDATA[format interval to text]]></comment>
		</function>
		<function name="to_char_005" id="Function_367b69ef" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.to_char(timestamp with time zone, text)
 RETURNS text
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$timestamptz_to_char$function$
CREATE OR REPLACE FUNCTION pg_catalog.to_char(numeric, text)
 RETURNS text
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$numeric_to_char$function$
CREATE OR REPLACE FUNCTION pg_catalog.to_char(integer, text)
 RETURNS text
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$int4_to_char$function$
CREATE OR REPLACE FUNCTION pg_catalog.to_char(bigint, text)
 RETURNS text
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$int8_to_char$function$
CREATE OR REPLACE FUNCTION pg_catalog.to_char(real, text)
 RETURNS text
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$float4_to_char$function$
CREATE OR REPLACE FUNCTION pg_catalog.to_char(double precision, text)
 RETURNS text
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$float8_to_char$function$
CREATE OR REPLACE FUNCTION pg_catalog.to_char(interval, text)
 RETURNS text
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$interval_to_char$function$
CREATE OR REPLACE FUNCTION pg_catalog.to_char(timestamp without time zone, text)
 RETURNS text
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$timestamp_to_char$function$
]]></string>
			<comment><![CDATA[format interval to text]]></comment>
		</function>
		<function name="to_char_006" id="Function_3202e956" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.to_char(timestamp with time zone, text)
 RETURNS text
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$timestamptz_to_char$function$
CREATE OR REPLACE FUNCTION pg_catalog.to_char(numeric, text)
 RETURNS text
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$numeric_to_char$function$
CREATE OR REPLACE FUNCTION pg_catalog.to_char(integer, text)
 RETURNS text
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$int4_to_char$function$
CREATE OR REPLACE FUNCTION pg_catalog.to_char(bigint, text)
 RETURNS text
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$int8_to_char$function$
CREATE OR REPLACE FUNCTION pg_catalog.to_char(real, text)
 RETURNS text
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$float4_to_char$function$
CREATE OR REPLACE FUNCTION pg_catalog.to_char(double precision, text)
 RETURNS text
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$float8_to_char$function$
CREATE OR REPLACE FUNCTION pg_catalog.to_char(interval, text)
 RETURNS text
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$interval_to_char$function$
CREATE OR REPLACE FUNCTION pg_catalog.to_char(timestamp without time zone, text)
 RETURNS text
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$timestamp_to_char$function$
]]></string>
			<comment><![CDATA[format interval to text]]></comment>
		</function>
		<function name="to_char_007" id="Function_2d5c9027" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.to_char(timestamp with time zone, text)
 RETURNS text
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$timestamptz_to_char$function$
CREATE OR REPLACE FUNCTION pg_catalog.to_char(numeric, text)
 RETURNS text
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$numeric_to_char$function$
CREATE OR REPLACE FUNCTION pg_catalog.to_char(integer, text)
 RETURNS text
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$int4_to_char$function$
CREATE OR REPLACE FUNCTION pg_catalog.to_char(bigint, text)
 RETURNS text
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$int8_to_char$function$
CREATE OR REPLACE FUNCTION pg_catalog.to_char(real, text)
 RETURNS text
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$float4_to_char$function$
CREATE OR REPLACE FUNCTION pg_catalog.to_char(double precision, text)
 RETURNS text
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$float8_to_char$function$
CREATE OR REPLACE FUNCTION pg_catalog.to_char(interval, text)
 RETURNS text
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$interval_to_char$function$
CREATE OR REPLACE FUNCTION pg_catalog.to_char(timestamp without time zone, text)
 RETURNS text
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$timestamp_to_char$function$
]]></string>
			<comment><![CDATA[format interval to text]]></comment>
		</function>
		<function name="to_date" id="Function_2e71634d" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.to_date(text, text)
 RETURNS date
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$to_date$function$
]]></string>
			<comment><![CDATA[convert text to date]]></comment>
		</function>
		<function name="to_hex" id="Function_2f43f25b" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.to_hex(bigint)
 RETURNS text
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$to_hex64$function$
CREATE OR REPLACE FUNCTION pg_catalog.to_hex(integer)
 RETURNS text
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$to_hex32$function$
]]></string>
			<comment><![CDATA[convert int4 number to hex]]></comment>
		</function>
		<function name="to_hex_001" id="Function_2b7ea8be" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.to_hex(bigint)
 RETURNS text
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$to_hex64$function$
CREATE OR REPLACE FUNCTION pg_catalog.to_hex(integer)
 RETURNS text
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$to_hex32$function$
]]></string>
			<comment><![CDATA[convert int4 number to hex]]></comment>
		</function>
		<function name="to_json" id="Function_383c5174" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.to_json(anyelement)
 RETURNS json
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$to_json$function$
]]></string>
			<comment><![CDATA[map input to json]]></comment>
		</function>
		<function name="to_jsonb" id="Function_1e99b48d" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.to_jsonb(anyelement)
 RETURNS jsonb
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$to_jsonb$function$
]]></string>
			<comment><![CDATA[map input to jsonb]]></comment>
		</function>
		<function name="to_number" id="Function_340c8b0f" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.to_number(text, text)
 RETURNS numeric
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$numeric_to_number$function$
]]></string>
			<comment><![CDATA[convert text to numeric]]></comment>
		</function>
		<function name="to_regclass" id="Function_3a8ccd9d" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.to_regclass(text)
 RETURNS regclass
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$to_regclass$function$
]]></string>
			<comment><![CDATA[convert classname to regclass]]></comment>
		</function>
		<function name="to_regnamespace" id="Function_300405af" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.to_regnamespace(text)
 RETURNS regnamespace
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$to_regnamespace$function$
]]></string>
			<comment><![CDATA[convert namespace name to regnamespace]]></comment>
		</function>
		<function name="to_regoper" id="Function_a307c45" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.to_regoper(text)
 RETURNS regoper
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$to_regoper$function$
]]></string>
			<comment><![CDATA[convert operator name to regoper]]></comment>
		</function>
		<function name="to_regoperator" id="Function_2f64e04f" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.to_regoperator(text)
 RETURNS regoperator
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$to_regoperator$function$
]]></string>
			<comment><![CDATA[convert operator name to regoperator]]></comment>
		</function>
		<function name="to_regproc" id="Function_3617aa16" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.to_regproc(text)
 RETURNS regproc
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$to_regproc$function$
]]></string>
			<comment><![CDATA[convert proname to regproc]]></comment>
		</function>
		<function name="to_regprocedure" id="Function_16f68785" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.to_regprocedure(text)
 RETURNS regprocedure
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$to_regprocedure$function$
]]></string>
			<comment><![CDATA[convert proname to regprocedure]]></comment>
		</function>
		<function name="to_regrole" id="Function_13a4629f" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.to_regrole(text)
 RETURNS regrole
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$to_regrole$function$
]]></string>
			<comment><![CDATA[convert role name to regrole]]></comment>
		</function>
		<function name="to_regtype" id="Function_4bf9142" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.to_regtype(text)
 RETURNS regtype
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$to_regtype$function$
]]></string>
			<comment><![CDATA[convert type name to regtype]]></comment>
		</function>
		<function name="to_timestamp" id="Function_34d9a699" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.to_timestamp(double precision)
 RETURNS timestamp with time zone
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$float8_timestamptz$function$
CREATE OR REPLACE FUNCTION pg_catalog.to_timestamp(text, text)
 RETURNS timestamp with time zone
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$to_timestamp$function$
]]></string>
			<comment><![CDATA[convert UNIX epoch to timestamptz]]></comment>
		</function>
		<function name="to_timestamp_001" id="Function_127fb184" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.to_timestamp(double precision)
 RETURNS timestamp with time zone
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$float8_timestamptz$function$
CREATE OR REPLACE FUNCTION pg_catalog.to_timestamp(text, text)
 RETURNS timestamp with time zone
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$to_timestamp$function$
]]></string>
			<comment><![CDATA[convert UNIX epoch to timestamptz]]></comment>
		</function>
		<function name="to_tsquery" id="Function_22ead072" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.to_tsquery(text)
 RETURNS tsquery
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT COST 100
AS $function$to_tsquery$function$
CREATE OR REPLACE FUNCTION pg_catalog.to_tsquery(regconfig, text)
 RETURNS tsquery
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT COST 100
AS $function$to_tsquery_byid$function$
]]></string>
			<comment><![CDATA[make tsquery]]></comment>
		</function>
		<function name="to_tsquery_001" id="Function_3405d39c" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.to_tsquery(text)
 RETURNS tsquery
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT COST 100
AS $function$to_tsquery$function$
CREATE OR REPLACE FUNCTION pg_catalog.to_tsquery(regconfig, text)
 RETURNS tsquery
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT COST 100
AS $function$to_tsquery_byid$function$
]]></string>
			<comment><![CDATA[make tsquery]]></comment>
		</function>
		<function name="to_tsvector" id="Function_3a428e4e" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.to_tsvector(text)
 RETURNS tsvector
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT COST 100
AS $function$to_tsvector$function$
CREATE OR REPLACE FUNCTION pg_catalog.to_tsvector(regconfig, text)
 RETURNS tsvector
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT COST 100
AS $function$to_tsvector_byid$function$
]]></string>
			<comment><![CDATA[transform to tsvector]]></comment>
		</function>
		<function name="to_tsvector_001" id="Function_387baf09" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.to_tsvector(text)
 RETURNS tsvector
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT COST 100
AS $function$to_tsvector$function$
CREATE OR REPLACE FUNCTION pg_catalog.to_tsvector(regconfig, text)
 RETURNS tsvector
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT COST 100
AS $function$to_tsvector_byid$function$
]]></string>
			<comment><![CDATA[transform to tsvector]]></comment>
		</function>
		<function name="transaction_timestamp" id="Function_39411af6" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.transaction_timestamp()
 RETURNS timestamp with time zone
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$now$function$
]]></string>
			<comment><![CDATA[current transaction time]]></comment>
		</function>
		<function name="translate" id="Function_ff384b7" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.translate(text, text, text)
 RETURNS text
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$translate$function$
]]></string>
			<comment><![CDATA[map a set of characters appearing in string]]></comment>
		</function>
		<function name="trigger_in" id="Function_26111795" isSystem="false" >
			<comment><![CDATA[I/O]]></comment>
		</function>
		<function name="trigger_out" id="Function_366c4264" isSystem="false" >
			<comment><![CDATA[I/O]]></comment>
		</function>
		<function name="trunc" id="Function_2449a3f7" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.trunc(double precision)
 RETURNS double precision
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$dtrunc$function$
CREATE OR REPLACE FUNCTION pg_catalog.trunc(macaddr)
 RETURNS macaddr
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$macaddr_trunc$function$
CREATE OR REPLACE FUNCTION pg_catalog.trunc(numeric, integer)
 RETURNS numeric
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$numeric_trunc$function$
CREATE OR REPLACE FUNCTION pg_catalog.trunc(numeric)
 RETURNS numeric
 LANGUAGE sql
 IMMUTABLE PARALLEL SAFE STRICT COST 1
AS $function$select pg_catalog.trunc($1,0)$function$
]]></string>
			<comment><![CDATA[truncate to integer]]></comment>
		</function>
		<function name="trunc_001" id="Function_34b17116" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.trunc(double precision)
 RETURNS double precision
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$dtrunc$function$
CREATE OR REPLACE FUNCTION pg_catalog.trunc(macaddr)
 RETURNS macaddr
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$macaddr_trunc$function$
CREATE OR REPLACE FUNCTION pg_catalog.trunc(numeric, integer)
 RETURNS numeric
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$numeric_trunc$function$
CREATE OR REPLACE FUNCTION pg_catalog.trunc(numeric)
 RETURNS numeric
 LANGUAGE sql
 IMMUTABLE PARALLEL SAFE STRICT COST 1
AS $function$select pg_catalog.trunc($1,0)$function$
]]></string>
			<comment><![CDATA[truncate to integer]]></comment>
		</function>
		<function name="trunc_002" id="Function_2a0af147" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.trunc(double precision)
 RETURNS double precision
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$dtrunc$function$
CREATE OR REPLACE FUNCTION pg_catalog.trunc(macaddr)
 RETURNS macaddr
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$macaddr_trunc$function$
CREATE OR REPLACE FUNCTION pg_catalog.trunc(numeric, integer)
 RETURNS numeric
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$numeric_trunc$function$
CREATE OR REPLACE FUNCTION pg_catalog.trunc(numeric)
 RETURNS numeric
 LANGUAGE sql
 IMMUTABLE PARALLEL SAFE STRICT COST 1
AS $function$select pg_catalog.trunc($1,0)$function$
]]></string>
			<comment><![CDATA[truncate to integer]]></comment>
		</function>
		<function name="trunc_003" id="Function_6e17693" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.trunc(double precision)
 RETURNS double precision
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$dtrunc$function$
CREATE OR REPLACE FUNCTION pg_catalog.trunc(macaddr)
 RETURNS macaddr
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$macaddr_trunc$function$
CREATE OR REPLACE FUNCTION pg_catalog.trunc(numeric, integer)
 RETURNS numeric
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$numeric_trunc$function$
CREATE OR REPLACE FUNCTION pg_catalog.trunc(numeric)
 RETURNS numeric
 LANGUAGE sql
 IMMUTABLE PARALLEL SAFE STRICT COST 1
AS $function$select pg_catalog.trunc($1,0)$function$
]]></string>
			<comment><![CDATA[truncate to integer]]></comment>
		</function>
		<function name="ts_debug" id="Function_34a15648" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.ts_debug(document text, OUT alias text, OUT description text, OUT token text, OUT dictionaries regdictionary[], OUT dictionary regdictionary, OUT lexemes text[])
 RETURNS SETOF record
 LANGUAGE sql
 STABLE PARALLEL SAFE STRICT
AS $function$
    SELECT * FROM pg_catalog.ts_debug( pg_catalog.get_current_ts_config(), $1);
$function$
CREATE OR REPLACE FUNCTION pg_catalog.ts_debug(config regconfig, document text, OUT alias text, OUT description text, OUT token text, OUT dictionaries regdictionary[], OUT dictionary regdictionary, OUT lexemes text[])
 RETURNS SETOF record
 LANGUAGE sql
 STABLE PARALLEL SAFE STRICT
AS $function$
SELECT
    tt.alias AS alias,
    tt.description AS description,
    parse.token AS token,
    ARRAY ( SELECT m.mapdict::pg_catalog.regdictionary
            FROM pg_catalog.pg_ts_config_map AS m
            WHERE m.mapcfg = $1 AND m.maptokentype = parse.tokid
            ORDER BY m.mapseqno )
    AS dictionaries,
    ( SELECT mapdict::pg_catalog.regdictionary
      FROM pg_catalog.pg_ts_config_map AS m
      WHERE m.mapcfg = $1 AND m.maptokentype = parse.tokid
      ORDER BY pg_catalog.ts_lexize(mapdict, parse.token) IS NULL, m.mapseqno
      LIMIT 1
    ) AS dictionary,
    ( SELECT pg_catalog.ts_lexize(mapdict, parse.token)
      FROM pg_catalog.pg_ts_config_map AS m
      WHERE m.mapcfg = $1 AND m.maptokentype = parse.tokid
      ORDER BY pg_catalog.ts_lexize(mapdict, parse.token) IS NULL, m.mapseqno
      LIMIT 1
    ) AS lexemes
FROM pg_catalog.ts_parse(
        (SELECT cfgparser FROM pg_catalog.pg_ts_config WHERE oid = $1 ), $2
    ) AS parse,
     pg_catalog.ts_token_type(
        (SELECT cfgparser FROM pg_catalog.pg_ts_config WHERE oid = $1 )
    ) AS tt
WHERE tt.tokid = parse.tokid
$function$
]]></string>
			<comment><![CDATA[debug function for text search configuration]]></comment>
		</function>
		<function name="ts_debug_001" id="Function_17bbe1d5" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.ts_debug(document text, OUT alias text, OUT description text, OUT token text, OUT dictionaries regdictionary[], OUT dictionary regdictionary, OUT lexemes text[])
 RETURNS SETOF record
 LANGUAGE sql
 STABLE PARALLEL SAFE STRICT
AS $function$
    SELECT * FROM pg_catalog.ts_debug( pg_catalog.get_current_ts_config(), $1);
$function$
CREATE OR REPLACE FUNCTION pg_catalog.ts_debug(config regconfig, document text, OUT alias text, OUT description text, OUT token text, OUT dictionaries regdictionary[], OUT dictionary regdictionary, OUT lexemes text[])
 RETURNS SETOF record
 LANGUAGE sql
 STABLE PARALLEL SAFE STRICT
AS $function$
SELECT
    tt.alias AS alias,
    tt.description AS description,
    parse.token AS token,
    ARRAY ( SELECT m.mapdict::pg_catalog.regdictionary
            FROM pg_catalog.pg_ts_config_map AS m
            WHERE m.mapcfg = $1 AND m.maptokentype = parse.tokid
            ORDER BY m.mapseqno )
    AS dictionaries,
    ( SELECT mapdict::pg_catalog.regdictionary
      FROM pg_catalog.pg_ts_config_map AS m
      WHERE m.mapcfg = $1 AND m.maptokentype = parse.tokid
      ORDER BY pg_catalog.ts_lexize(mapdict, parse.token) IS NULL, m.mapseqno
      LIMIT 1
    ) AS dictionary,
    ( SELECT pg_catalog.ts_lexize(mapdict, parse.token)
      FROM pg_catalog.pg_ts_config_map AS m
      WHERE m.mapcfg = $1 AND m.maptokentype = parse.tokid
      ORDER BY pg_catalog.ts_lexize(mapdict, parse.token) IS NULL, m.mapseqno
      LIMIT 1
    ) AS lexemes
FROM pg_catalog.ts_parse(
        (SELECT cfgparser FROM pg_catalog.pg_ts_config WHERE oid = $1 ), $2
    ) AS parse,
     pg_catalog.ts_token_type(
        (SELECT cfgparser FROM pg_catalog.pg_ts_config WHERE oid = $1 )
    ) AS tt
WHERE tt.tokid = parse.tokid
$function$
]]></string>
			<comment><![CDATA[debug function for text search configuration]]></comment>
		</function>
		<function name="ts_delete" id="Function_13027fd0" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.ts_delete(tsvector, text)
 RETURNS tsvector
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$tsvector_delete_str$function$
CREATE OR REPLACE FUNCTION pg_catalog.ts_delete(tsvector, text[])
 RETURNS tsvector
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$tsvector_delete_arr$function$
]]></string>
			<comment><![CDATA[delete lexeme]]></comment>
		</function>
		<function name="ts_delete_001" id="Function_9261dc0" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.ts_delete(tsvector, text)
 RETURNS tsvector
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$tsvector_delete_str$function$
CREATE OR REPLACE FUNCTION pg_catalog.ts_delete(tsvector, text[])
 RETURNS tsvector
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$tsvector_delete_arr$function$
]]></string>
			<comment><![CDATA[delete lexeme]]></comment>
		</function>
		<function name="ts_filter" id="Function_3555f84d" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.ts_filter(tsvector, "char"[])
 RETURNS tsvector
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$tsvector_filter$function$
]]></string>
			<comment><![CDATA[delete lexemes that do not have one of the given weights]]></comment>
		</function>
		<function name="ts_headline" id="Function_3ae1b893" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.ts_headline(regconfig, text, tsquery, text)
 RETURNS text
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT COST 100
AS $function$ts_headline_byid_opt$function$
CREATE OR REPLACE FUNCTION pg_catalog.ts_headline(regconfig, text, tsquery)
 RETURNS text
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT COST 100
AS $function$ts_headline_byid$function$
CREATE OR REPLACE FUNCTION pg_catalog.ts_headline(text, tsquery, text)
 RETURNS text
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT COST 100
AS $function$ts_headline_opt$function$
CREATE OR REPLACE FUNCTION pg_catalog.ts_headline(text, tsquery)
 RETURNS text
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT COST 100
AS $function$ts_headline$function$
]]></string>
			<comment><![CDATA[generate headline]]></comment>
		</function>
		<function name="ts_headline_001" id="Function_31b05cfb" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.ts_headline(regconfig, text, tsquery, text)
 RETURNS text
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT COST 100
AS $function$ts_headline_byid_opt$function$
CREATE OR REPLACE FUNCTION pg_catalog.ts_headline(regconfig, text, tsquery)
 RETURNS text
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT COST 100
AS $function$ts_headline_byid$function$
CREATE OR REPLACE FUNCTION pg_catalog.ts_headline(text, tsquery, text)
 RETURNS text
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT COST 100
AS $function$ts_headline_opt$function$
CREATE OR REPLACE FUNCTION pg_catalog.ts_headline(text, tsquery)
 RETURNS text
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT COST 100
AS $function$ts_headline$function$
]]></string>
			<comment><![CDATA[generate headline]]></comment>
		</function>
		<function name="ts_headline_002" id="Function_b56a94e" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.ts_headline(regconfig, text, tsquery, text)
 RETURNS text
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT COST 100
AS $function$ts_headline_byid_opt$function$
CREATE OR REPLACE FUNCTION pg_catalog.ts_headline(regconfig, text, tsquery)
 RETURNS text
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT COST 100
AS $function$ts_headline_byid$function$
CREATE OR REPLACE FUNCTION pg_catalog.ts_headline(text, tsquery, text)
 RETURNS text
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT COST 100
AS $function$ts_headline_opt$function$
CREATE OR REPLACE FUNCTION pg_catalog.ts_headline(text, tsquery)
 RETURNS text
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT COST 100
AS $function$ts_headline$function$
]]></string>
			<comment><![CDATA[generate headline]]></comment>
		</function>
		<function name="ts_headline_003" id="Function_3b6a3b91" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.ts_headline(regconfig, text, tsquery, text)
 RETURNS text
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT COST 100
AS $function$ts_headline_byid_opt$function$
CREATE OR REPLACE FUNCTION pg_catalog.ts_headline(regconfig, text, tsquery)
 RETURNS text
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT COST 100
AS $function$ts_headline_byid$function$
CREATE OR REPLACE FUNCTION pg_catalog.ts_headline(text, tsquery, text)
 RETURNS text
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT COST 100
AS $function$ts_headline_opt$function$
CREATE OR REPLACE FUNCTION pg_catalog.ts_headline(text, tsquery)
 RETURNS text
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT COST 100
AS $function$ts_headline$function$
]]></string>
			<comment><![CDATA[generate headline]]></comment>
		</function>
		<function name="ts_lexize" id="Function_13b633ff" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.ts_lexize(regdictionary, text)
 RETURNS text[]
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$ts_lexize$function$
]]></string>
			<comment><![CDATA[normalize one word by dictionary]]></comment>
		</function>
		<function name="ts_match_qv" id="Function_376b6144" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.ts_match_qv(tsquery, tsvector)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$ts_match_qv$function$
]]></string>
			<comment><![CDATA[implementation of @@ operator]]></comment>
		</function>
		<function name="ts_match_tq" id="Function_15167b28" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.ts_match_tq(text, tsquery)
 RETURNS boolean
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT COST 100
AS $function$ts_match_tq$function$
]]></string>
			<comment><![CDATA[implementation of @@ operator]]></comment>
		</function>
		<function name="ts_match_tt" id="Function_804c1dc" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.ts_match_tt(text, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT COST 100
AS $function$ts_match_tt$function$
]]></string>
			<comment><![CDATA[implementation of @@ operator]]></comment>
		</function>
		<function name="ts_match_vq" id="Function_1cc7ed7b" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.ts_match_vq(tsvector, tsquery)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$ts_match_vq$function$
]]></string>
			<comment><![CDATA[implementation of @@ operator]]></comment>
		</function>
		<function name="ts_parse" id="Function_1b08f347" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.ts_parse(parser_name text, txt text, OUT tokid integer, OUT token text)
 RETURNS SETOF record
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$ts_parse_byname$function$
CREATE OR REPLACE FUNCTION pg_catalog.ts_parse(parser_oid oid, txt text, OUT tokid integer, OUT token text)
 RETURNS SETOF record
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$ts_parse_byid$function$
]]></string>
			<comment><![CDATA[parse text to tokens]]></comment>
		</function>
		<function name="ts_parse_001" id="Function_347f0dd2" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.ts_parse(parser_name text, txt text, OUT tokid integer, OUT token text)
 RETURNS SETOF record
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$ts_parse_byname$function$
CREATE OR REPLACE FUNCTION pg_catalog.ts_parse(parser_oid oid, txt text, OUT tokid integer, OUT token text)
 RETURNS SETOF record
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$ts_parse_byid$function$
]]></string>
			<comment><![CDATA[parse text to tokens]]></comment>
		</function>
		<function name="ts_rank" id="Function_2f299947" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.ts_rank(real[], tsvector, tsquery, integer)
 RETURNS real
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$ts_rank_wttf$function$
CREATE OR REPLACE FUNCTION pg_catalog.ts_rank(real[], tsvector, tsquery)
 RETURNS real
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$ts_rank_wtt$function$
CREATE OR REPLACE FUNCTION pg_catalog.ts_rank(tsvector, tsquery, integer)
 RETURNS real
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$ts_rank_ttf$function$
CREATE OR REPLACE FUNCTION pg_catalog.ts_rank(tsvector, tsquery)
 RETURNS real
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$ts_rank_tt$function$
]]></string>
			<comment><![CDATA[relevance]]></comment>
		</function>
		<function name="ts_rank_001" id="Function_3e18a6e" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.ts_rank(real[], tsvector, tsquery, integer)
 RETURNS real
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$ts_rank_wttf$function$
CREATE OR REPLACE FUNCTION pg_catalog.ts_rank(real[], tsvector, tsquery)
 RETURNS real
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$ts_rank_wtt$function$
CREATE OR REPLACE FUNCTION pg_catalog.ts_rank(tsvector, tsquery, integer)
 RETURNS real
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$ts_rank_ttf$function$
CREATE OR REPLACE FUNCTION pg_catalog.ts_rank(tsvector, tsquery)
 RETURNS real
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$ts_rank_tt$function$
]]></string>
			<comment><![CDATA[relevance]]></comment>
		</function>
		<function name="ts_rank_002" id="Function_1c93552c" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.ts_rank(real[], tsvector, tsquery, integer)
 RETURNS real
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$ts_rank_wttf$function$
CREATE OR REPLACE FUNCTION pg_catalog.ts_rank(real[], tsvector, tsquery)
 RETURNS real
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$ts_rank_wtt$function$
CREATE OR REPLACE FUNCTION pg_catalog.ts_rank(tsvector, tsquery, integer)
 RETURNS real
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$ts_rank_ttf$function$
CREATE OR REPLACE FUNCTION pg_catalog.ts_rank(tsvector, tsquery)
 RETURNS real
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$ts_rank_tt$function$
]]></string>
			<comment><![CDATA[relevance]]></comment>
		</function>
		<function name="ts_rank_003" id="Function_76a8b4c" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.ts_rank(real[], tsvector, tsquery, integer)
 RETURNS real
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$ts_rank_wttf$function$
CREATE OR REPLACE FUNCTION pg_catalog.ts_rank(real[], tsvector, tsquery)
 RETURNS real
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$ts_rank_wtt$function$
CREATE OR REPLACE FUNCTION pg_catalog.ts_rank(tsvector, tsquery, integer)
 RETURNS real
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$ts_rank_ttf$function$
CREATE OR REPLACE FUNCTION pg_catalog.ts_rank(tsvector, tsquery)
 RETURNS real
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$ts_rank_tt$function$
]]></string>
			<comment><![CDATA[relevance]]></comment>
		</function>
		<function name="ts_rank_cd" id="Function_1c81e9e1" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.ts_rank_cd(real[], tsvector, tsquery, integer)
 RETURNS real
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$ts_rankcd_wttf$function$
CREATE OR REPLACE FUNCTION pg_catalog.ts_rank_cd(real[], tsvector, tsquery)
 RETURNS real
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$ts_rankcd_wtt$function$
CREATE OR REPLACE FUNCTION pg_catalog.ts_rank_cd(tsvector, tsquery, integer)
 RETURNS real
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$ts_rankcd_ttf$function$
CREATE OR REPLACE FUNCTION pg_catalog.ts_rank_cd(tsvector, tsquery)
 RETURNS real
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$ts_rankcd_tt$function$
]]></string>
			<comment><![CDATA[relevance]]></comment>
		</function>
		<function name="ts_rank_cd_001" id="Function_339e1c54" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.ts_rank_cd(real[], tsvector, tsquery, integer)
 RETURNS real
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$ts_rankcd_wttf$function$
CREATE OR REPLACE FUNCTION pg_catalog.ts_rank_cd(real[], tsvector, tsquery)
 RETURNS real
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$ts_rankcd_wtt$function$
CREATE OR REPLACE FUNCTION pg_catalog.ts_rank_cd(tsvector, tsquery, integer)
 RETURNS real
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$ts_rankcd_ttf$function$
CREATE OR REPLACE FUNCTION pg_catalog.ts_rank_cd(tsvector, tsquery)
 RETURNS real
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$ts_rankcd_tt$function$
]]></string>
			<comment><![CDATA[relevance]]></comment>
		</function>
		<function name="ts_rank_cd_002" id="Function_215ffb07" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.ts_rank_cd(real[], tsvector, tsquery, integer)
 RETURNS real
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$ts_rankcd_wttf$function$
CREATE OR REPLACE FUNCTION pg_catalog.ts_rank_cd(real[], tsvector, tsquery)
 RETURNS real
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$ts_rankcd_wtt$function$
CREATE OR REPLACE FUNCTION pg_catalog.ts_rank_cd(tsvector, tsquery, integer)
 RETURNS real
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$ts_rankcd_ttf$function$
CREATE OR REPLACE FUNCTION pg_catalog.ts_rank_cd(tsvector, tsquery)
 RETURNS real
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$ts_rankcd_tt$function$
]]></string>
			<comment><![CDATA[relevance]]></comment>
		</function>
		<function name="ts_rank_cd_003" id="Function_25b2a38" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.ts_rank_cd(real[], tsvector, tsquery, integer)
 RETURNS real
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$ts_rankcd_wttf$function$
CREATE OR REPLACE FUNCTION pg_catalog.ts_rank_cd(real[], tsvector, tsquery)
 RETURNS real
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$ts_rankcd_wtt$function$
CREATE OR REPLACE FUNCTION pg_catalog.ts_rank_cd(tsvector, tsquery, integer)
 RETURNS real
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$ts_rankcd_ttf$function$
CREATE OR REPLACE FUNCTION pg_catalog.ts_rank_cd(tsvector, tsquery)
 RETURNS real
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$ts_rankcd_tt$function$
]]></string>
			<comment><![CDATA[relevance]]></comment>
		</function>
		<function name="ts_rewrite" id="Function_27f017e7" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.ts_rewrite(tsquery, text)
 RETURNS tsquery
 LANGUAGE internal
 PARALLEL SAFE STRICT COST 100
AS $function$tsquery_rewrite_query$function$
CREATE OR REPLACE FUNCTION pg_catalog.ts_rewrite(tsquery, tsquery, tsquery)
 RETURNS tsquery
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$tsquery_rewrite$function$
]]></string>
			<comment><![CDATA[rewrite tsquery]]></comment>
		</function>
		<function name="ts_rewrite_001" id="Function_172f6ee8" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.ts_rewrite(tsquery, text)
 RETURNS tsquery
 LANGUAGE internal
 PARALLEL SAFE STRICT COST 100
AS $function$tsquery_rewrite_query$function$
CREATE OR REPLACE FUNCTION pg_catalog.ts_rewrite(tsquery, tsquery, tsquery)
 RETURNS tsquery
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$tsquery_rewrite$function$
]]></string>
			<comment><![CDATA[rewrite tsquery]]></comment>
		</function>
		<function name="ts_stat" id="Function_fe51312" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.ts_stat(query text, OUT word text, OUT ndoc integer, OUT nentry integer)
 RETURNS SETOF record
 LANGUAGE internal
 PARALLEL SAFE STRICT COST 10 ROWS 10000
AS $function$ts_stat1$function$
CREATE OR REPLACE FUNCTION pg_catalog.ts_stat(query text, weights text, OUT word text, OUT ndoc integer, OUT nentry integer)
 RETURNS SETOF record
 LANGUAGE internal
 PARALLEL SAFE STRICT COST 10 ROWS 10000
AS $function$ts_stat2$function$
]]></string>
			<comment><![CDATA[statistics of tsvector column]]></comment>
		</function>
		<function name="ts_stat_001" id="Function_16a98434" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.ts_stat(query text, OUT word text, OUT ndoc integer, OUT nentry integer)
 RETURNS SETOF record
 LANGUAGE internal
 PARALLEL SAFE STRICT COST 10 ROWS 10000
AS $function$ts_stat1$function$
CREATE OR REPLACE FUNCTION pg_catalog.ts_stat(query text, weights text, OUT word text, OUT ndoc integer, OUT nentry integer)
 RETURNS SETOF record
 LANGUAGE internal
 PARALLEL SAFE STRICT COST 10 ROWS 10000
AS $function$ts_stat2$function$
]]></string>
			<comment><![CDATA[statistics of tsvector column]]></comment>
		</function>
		<function name="ts_token_type" id="Function_3866e0b1" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.ts_token_type(parser_name text, OUT tokid integer, OUT alias text, OUT description text)
 RETURNS SETOF record
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT ROWS 16
AS $function$ts_token_type_byname$function$
CREATE OR REPLACE FUNCTION pg_catalog.ts_token_type(parser_oid oid, OUT tokid integer, OUT alias text, OUT description text)
 RETURNS SETOF record
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT ROWS 16
AS $function$ts_token_type_byid$function$
]]></string>
			<comment><![CDATA[get parser's token types]]></comment>
		</function>
		<function name="ts_token_type_001" id="Function_86dcacb" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.ts_token_type(parser_name text, OUT tokid integer, OUT alias text, OUT description text)
 RETURNS SETOF record
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT ROWS 16
AS $function$ts_token_type_byname$function$
CREATE OR REPLACE FUNCTION pg_catalog.ts_token_type(parser_oid oid, OUT tokid integer, OUT alias text, OUT description text)
 RETURNS SETOF record
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT ROWS 16
AS $function$ts_token_type_byid$function$
]]></string>
			<comment><![CDATA[get parser's token types]]></comment>
		</function>
		<function name="ts_typanalyze" id="Function_75bba4d" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.ts_typanalyze(internal)
 RETURNS boolean
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$ts_typanalyze$function$
]]></string>
			<comment><![CDATA[tsvector typanalyze]]></comment>
		</function>
		<function name="tsm_handler_in" id="Function_3986a24f" isSystem="false" >
			<comment><![CDATA[I/O]]></comment>
		</function>
		<function name="tsm_handler_out" id="Function_2565d03a" isSystem="false" >
			<comment><![CDATA[I/O]]></comment>
		</function>
		<function name="tsmatchjoinsel" id="Function_2b68d42a" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.tsmatchjoinsel(internal, oid, internal, smallint, internal)
 RETURNS double precision
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$tsmatchjoinsel$function$
]]></string>
			<comment><![CDATA[join selectivity of tsvector @@ tsquery]]></comment>
		</function>
		<function name="tsmatchsel" id="Function_b1367bd" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.tsmatchsel(internal, oid, internal, integer)
 RETURNS double precision
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$tsmatchsel$function$
]]></string>
			<comment><![CDATA[restriction selectivity of tsvector @@ tsquery]]></comment>
		</function>
		<function name="tsq_mcontained" id="Function_2c549bca" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.tsq_mcontained(tsquery, tsquery)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$tsq_mcontained$function$
]]></string>
			<comment><![CDATA[implementation of <@ operator]]></comment>
		</function>
		<function name="tsq_mcontains" id="Function_1fe32328" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.tsq_mcontains(tsquery, tsquery)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$tsq_mcontains$function$
]]></string>
			<comment><![CDATA[implementation of @> operator]]></comment>
		</function>
		<function name="tsquery_and" id="Function_34adb4f5" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.tsquery_and(tsquery, tsquery)
 RETURNS tsquery
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$tsquery_and$function$
]]></string>
			<comment><![CDATA[implementation of && operator]]></comment>
		</function>
		<function name="tsquery_cmp" id="Function_b094a6c" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.tsquery_cmp(tsquery, tsquery)
 RETURNS integer
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$tsquery_cmp$function$
]]></string>
			<comment><![CDATA[less-equal-greater]]></comment>
		</function>
		<function name="tsquery_eq" id="Function_e2b2c1e" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.tsquery_eq(tsquery, tsquery)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$tsquery_eq$function$
]]></string>
			<comment><![CDATA[implementation of = operator]]></comment>
		</function>
		<function name="tsquery_ge" id="Function_1c06377e" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.tsquery_ge(tsquery, tsquery)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$tsquery_ge$function$
]]></string>
			<comment><![CDATA[implementation of >= operator]]></comment>
		</function>
		<function name="tsquery_gt" id="Function_1cab85aa" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.tsquery_gt(tsquery, tsquery)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$tsquery_gt$function$
]]></string>
			<comment><![CDATA[implementation of > operator]]></comment>
		</function>
		<function name="tsquery_le" id="Function_24b77f87" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.tsquery_le(tsquery, tsquery)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$tsquery_le$function$
]]></string>
			<comment><![CDATA[implementation of <= operator]]></comment>
		</function>
		<function name="tsquery_lt" id="Function_245be960" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.tsquery_lt(tsquery, tsquery)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$tsquery_lt$function$
]]></string>
			<comment><![CDATA[implementation of < operator]]></comment>
		</function>
		<function name="tsquery_ne" id="Function_300e504c" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.tsquery_ne(tsquery, tsquery)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$tsquery_ne$function$
]]></string>
			<comment><![CDATA[implementation of <> operator]]></comment>
		</function>
		<function name="tsquery_not" id="Function_59b230f" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.tsquery_not(tsquery)
 RETURNS tsquery
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$tsquery_not$function$
]]></string>
			<comment><![CDATA[implementation of !! operator]]></comment>
		</function>
		<function name="tsquery_or" id="Function_1a54f80c" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.tsquery_or(tsquery, tsquery)
 RETURNS tsquery
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$tsquery_or$function$
]]></string>
			<comment><![CDATA[implementation of || operator]]></comment>
		</function>
		<function name="tsquery_phrase" id="Function_2f49d29c" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.tsquery_phrase(tsquery, tsquery)
 RETURNS tsquery
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$tsquery_phrase$function$
CREATE OR REPLACE FUNCTION pg_catalog.tsquery_phrase(tsquery, tsquery, integer)
 RETURNS tsquery
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$tsquery_phrase_distance$function$
]]></string>
			<comment><![CDATA[implementation of <-> operator]]></comment>
		</function>
		<function name="tsquery_phrase_001" id="Function_3a9bdc29" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.tsquery_phrase(tsquery, tsquery)
 RETURNS tsquery
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$tsquery_phrase$function$
CREATE OR REPLACE FUNCTION pg_catalog.tsquery_phrase(tsquery, tsquery, integer)
 RETURNS tsquery
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$tsquery_phrase_distance$function$
]]></string>
			<comment><![CDATA[implementation of <-> operator]]></comment>
		</function>
		<function name="tsqueryin" id="Function_107adb6a" isSystem="false" >
			<comment><![CDATA[I/O]]></comment>
		</function>
		<function name="tsqueryout" id="Function_1a84f28" isSystem="false" >
			<comment><![CDATA[I/O]]></comment>
		</function>
		<function name="tsqueryrecv" id="Function_35b771e3" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.tsqueryrecv(internal)
 RETURNS tsquery
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$tsqueryrecv$function$
]]></string>
			<comment><![CDATA[I/O]]></comment>
		</function>
		<function name="tsquerysend" id="Function_90d2ec0" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.tsquerysend(tsquery)
 RETURNS bytea
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$tsquerysend$function$
]]></string>
			<comment><![CDATA[I/O]]></comment>
		</function>
		<function name="tsrange" id="Function_2d79b89d" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.tsrange(timestamp without time zone, timestamp without time zone)
 RETURNS tsrange
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE
AS $function$range_constructor2$function$
CREATE OR REPLACE FUNCTION pg_catalog.tsrange(timestamp without time zone, timestamp without time zone, text)
 RETURNS tsrange
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE
AS $function$range_constructor3$function$
]]></string>
			<comment><![CDATA[tsrange constructor]]></comment>
		</function>
		<function name="tsrange_001" id="Function_3ae17bd1" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.tsrange(timestamp without time zone, timestamp without time zone)
 RETURNS tsrange
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE
AS $function$range_constructor2$function$
CREATE OR REPLACE FUNCTION pg_catalog.tsrange(timestamp without time zone, timestamp without time zone, text)
 RETURNS tsrange
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE
AS $function$range_constructor3$function$
]]></string>
			<comment><![CDATA[tsrange constructor]]></comment>
		</function>
		<function name="tsrange_subdiff" id="Function_2b75ea6c" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.tsrange_subdiff(timestamp without time zone, timestamp without time zone)
 RETURNS double precision
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$tsrange_subdiff$function$
]]></string>
			<comment><![CDATA[float8 difference of two timestamp values]]></comment>
		</function>
		<function name="tstzrange" id="Function_84b275" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.tstzrange(timestamp with time zone, timestamp with time zone)
 RETURNS tstzrange
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE
AS $function$range_constructor2$function$
CREATE OR REPLACE FUNCTION pg_catalog.tstzrange(timestamp with time zone, timestamp with time zone, text)
 RETURNS tstzrange
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE
AS $function$range_constructor3$function$
]]></string>
			<comment><![CDATA[tstzrange constructor]]></comment>
		</function>
		<function name="tstzrange_001" id="Function_250c2a0c" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.tstzrange(timestamp with time zone, timestamp with time zone)
 RETURNS tstzrange
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE
AS $function$range_constructor2$function$
CREATE OR REPLACE FUNCTION pg_catalog.tstzrange(timestamp with time zone, timestamp with time zone, text)
 RETURNS tstzrange
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE
AS $function$range_constructor3$function$
]]></string>
			<comment><![CDATA[tstzrange constructor]]></comment>
		</function>
		<function name="tstzrange_subdiff" id="Function_39a8bfde" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.tstzrange_subdiff(timestamp with time zone, timestamp with time zone)
 RETURNS double precision
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$tstzrange_subdiff$function$
]]></string>
			<comment><![CDATA[float8 difference of two timestamp with time zone values]]></comment>
		</function>
		<function name="tsvector_cmp" id="Function_9380ae3" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.tsvector_cmp(tsvector, tsvector)
 RETURNS integer
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$tsvector_cmp$function$
]]></string>
			<comment><![CDATA[less-equal-greater]]></comment>
		</function>
		<function name="tsvector_concat" id="Function_b5215f2" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.tsvector_concat(tsvector, tsvector)
 RETURNS tsvector
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$tsvector_concat$function$
]]></string>
			<comment><![CDATA[implementation of || operator]]></comment>
		</function>
		<function name="tsvector_eq" id="Function_257dcbcd" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.tsvector_eq(tsvector, tsvector)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$tsvector_eq$function$
]]></string>
			<comment><![CDATA[implementation of = operator]]></comment>
		</function>
		<function name="tsvector_ge" id="Function_37ad84c1" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.tsvector_ge(tsvector, tsvector)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$tsvector_ge$function$
]]></string>
			<comment><![CDATA[implementation of >= operator]]></comment>
		</function>
		<function name="tsvector_gt" id="Function_bca855d" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.tsvector_gt(tsvector, tsvector)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$tsvector_gt$function$
]]></string>
			<comment><![CDATA[implementation of > operator]]></comment>
		</function>
		<function name="tsvector_le" id="Function_39ea4a4b" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.tsvector_le(tsvector, tsvector)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$tsvector_le$function$
]]></string>
			<comment><![CDATA[implementation of <= operator]]></comment>
		</function>
		<function name="tsvector_lt" id="Function_8a9bfe0" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.tsvector_lt(tsvector, tsvector)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$tsvector_lt$function$
]]></string>
			<comment><![CDATA[implementation of < operator]]></comment>
		</function>
		<function name="tsvector_ne" id="Function_c102a9f" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.tsvector_ne(tsvector, tsvector)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$tsvector_ne$function$
]]></string>
			<comment><![CDATA[implementation of <> operator]]></comment>
		</function>
		<function name="tsvector_to_array" id="Function_17542a15" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.tsvector_to_array(tsvector)
 RETURNS text[]
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$tsvector_to_array$function$
]]></string>
			<comment><![CDATA[convert tsvector to array of lexemes]]></comment>
		</function>
		<function name="tsvector_update_trigger" id="Function_395aae94" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.tsvector_update_trigger()
 RETURNS trigger
 LANGUAGE internal
 PARALLEL SAFE
AS $function$tsvector_update_trigger_byid$function$
]]></string>
			<comment><![CDATA[trigger for automatic update of tsvector column]]></comment>
		</function>
		<function name="tsvector_update_trigger_column" id="Function_38bb7217" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.tsvector_update_trigger_column()
 RETURNS trigger
 LANGUAGE internal
 PARALLEL SAFE
AS $function$tsvector_update_trigger_bycolumn$function$
]]></string>
			<comment><![CDATA[trigger for automatic update of tsvector column]]></comment>
		</function>
		<function name="tsvectorin" id="Function_186b8a58" isSystem="false" >
			<comment><![CDATA[I/O]]></comment>
		</function>
		<function name="tsvectorout" id="Function_27613dd" isSystem="false" >
			<comment><![CDATA[I/O]]></comment>
		</function>
		<function name="tsvectorrecv" id="Function_840267b" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.tsvectorrecv(internal)
 RETURNS tsvector
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$tsvectorrecv$function$
]]></string>
			<comment><![CDATA[I/O]]></comment>
		</function>
		<function name="tsvectorsend" id="Function_f7ddc05" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.tsvectorsend(tsvector)
 RETURNS bytea
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$tsvectorsend$function$
]]></string>
			<comment><![CDATA[I/O]]></comment>
		</function>
		<function name="txid_current" id="Function_1323a021" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.txid_current()
 RETURNS bigint
 LANGUAGE internal
 STABLE STRICT
AS $function$txid_current$function$
]]></string>
			<comment><![CDATA[get current transaction ID]]></comment>
		</function>
		<function name="txid_current_snapshot" id="Function_2b593d72" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.txid_current_snapshot()
 RETURNS txid_snapshot
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$txid_current_snapshot$function$
]]></string>
			<comment><![CDATA[get current snapshot]]></comment>
		</function>
		<function name="txid_snapshot_in" id="Function_256d2cd7" isSystem="false" >
			<comment><![CDATA[I/O]]></comment>
		</function>
		<function name="txid_snapshot_out" id="Function_2baa6bbe" isSystem="false" >
			<comment><![CDATA[I/O]]></comment>
		</function>
		<function name="txid_snapshot_recv" id="Function_349d51fe" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.txid_snapshot_recv(internal)
 RETURNS txid_snapshot
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$txid_snapshot_recv$function$
]]></string>
			<comment><![CDATA[I/O]]></comment>
		</function>
		<function name="txid_snapshot_send" id="Function_1b101674" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.txid_snapshot_send(txid_snapshot)
 RETURNS bytea
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$txid_snapshot_send$function$
]]></string>
			<comment><![CDATA[I/O]]></comment>
		</function>
		<function name="txid_snapshot_xip" id="Function_36e960c2" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.txid_snapshot_xip(txid_snapshot)
 RETURNS SETOF bigint
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT ROWS 50
AS $function$txid_snapshot_xip$function$
]]></string>
			<comment><![CDATA[get set of in-progress txids in snapshot]]></comment>
		</function>
		<function name="txid_snapshot_xmax" id="Function_21d44714" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.txid_snapshot_xmax(txid_snapshot)
 RETURNS bigint
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$txid_snapshot_xmax$function$
]]></string>
			<comment><![CDATA[get xmax of snapshot]]></comment>
		</function>
		<function name="txid_snapshot_xmin" id="Function_17b1e6ca" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.txid_snapshot_xmin(txid_snapshot)
 RETURNS bigint
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$txid_snapshot_xmin$function$
]]></string>
			<comment><![CDATA[get xmin of snapshot]]></comment>
		</function>
		<function name="txid_visible_in_snapshot" id="Function_6bd117a" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.txid_visible_in_snapshot(bigint, txid_snapshot)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$txid_visible_in_snapshot$function$
]]></string>
			<comment><![CDATA[is txid visible in snapshot?]]></comment>
		</function>
		<function name="uhc_to_utf8" id="Function_14c41c74" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.uhc_to_utf8(integer, integer, cstring, internal, integer)
 RETURNS void
 LANGUAGE c
 PARALLEL SAFE STRICT
AS '$libdir/utf8_and_uhc', $function$uhc_to_utf8$function$
]]></string>
			<comment><![CDATA[internal conversion function for UHC to UTF8]]></comment>
		</function>
		<function name="unique_key_recheck" id="Function_30942e63" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.unique_key_recheck()
 RETURNS trigger
 LANGUAGE internal
 PARALLEL SAFE STRICT
AS $function$unique_key_recheck$function$
]]></string>
			<comment><![CDATA[deferred UNIQUE constraint check]]></comment>
		</function>
		<function name="unknownin" id="Function_a2ec47e" isSystem="false" >
			<comment><![CDATA[I/O]]></comment>
		</function>
		<function name="unknownout" id="Function_9d5e573" isSystem="false" >
			<comment><![CDATA[I/O]]></comment>
		</function>
		<function name="unknownrecv" id="Function_116f3259" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.unknownrecv(internal)
 RETURNS unknown
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$unknownrecv$function$
]]></string>
			<comment><![CDATA[I/O]]></comment>
		</function>
		<function name="unknownsend" id="Function_39848ef8" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.unknownsend(unknown)
 RETURNS bytea
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$unknownsend$function$
]]></string>
			<comment><![CDATA[I/O]]></comment>
		</function>
		<function name="unnest" id="Function_29eb9001" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.unnest(anyarray)
 RETURNS SETOF anyelement
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT ROWS 100
AS $function$array_unnest$function$
CREATE OR REPLACE FUNCTION pg_catalog.unnest(tsvector tsvector, OUT lexeme text, OUT positions smallint[], OUT weights text[])
 RETURNS SETOF record
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT ROWS 10
AS $function$tsvector_unnest$function$
]]></string>
			<comment><![CDATA[expand array to set of rows]]></comment>
		</function>
		<function name="unnest_001" id="Function_d4e66db" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.unnest(anyarray)
 RETURNS SETOF anyelement
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT ROWS 100
AS $function$array_unnest$function$
CREATE OR REPLACE FUNCTION pg_catalog.unnest(tsvector tsvector, OUT lexeme text, OUT positions smallint[], OUT weights text[])
 RETURNS SETOF record
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT ROWS 10
AS $function$tsvector_unnest$function$
]]></string>
			<comment><![CDATA[expand array to set of rows]]></comment>
		</function>
		<function name="upper" id="Function_5545116" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.upper(text)
 RETURNS text
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$upper$function$
CREATE OR REPLACE FUNCTION pg_catalog.upper(anyrange)
 RETURNS anyelement
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$range_upper$function$
]]></string>
			<comment><![CDATA[upper bound of range]]></comment>
		</function>
		<function name="upper_001" id="Function_337f1979" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.upper(text)
 RETURNS text
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$upper$function$
CREATE OR REPLACE FUNCTION pg_catalog.upper(anyrange)
 RETURNS anyelement
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$range_upper$function$
]]></string>
			<comment><![CDATA[upper bound of range]]></comment>
		</function>
		<function name="upper_inc" id="Function_36c29aaa" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.upper_inc(anyrange)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$range_upper_inc$function$
]]></string>
			<comment><![CDATA[is the range's upper bound inclusive?]]></comment>
		</function>
		<function name="upper_inf" id="Function_1263a272" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.upper_inf(anyrange)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$range_upper_inf$function$
]]></string>
			<comment><![CDATA[is the range's upper bound infinite?]]></comment>
		</function>
		<function name="utf8_to_ascii" id="Function_6ad330" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.utf8_to_ascii(integer, integer, cstring, internal, integer)
 RETURNS void
 LANGUAGE c
 PARALLEL SAFE STRICT
AS '$libdir/utf8_and_ascii', $function$utf8_to_ascii$function$
]]></string>
			<comment><![CDATA[internal conversion function for UTF8 to SQL_ASCII]]></comment>
		</function>
		<function name="utf8_to_big5" id="Function_46b10bc" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.utf8_to_big5(integer, integer, cstring, internal, integer)
 RETURNS void
 LANGUAGE c
 PARALLEL SAFE STRICT
AS '$libdir/utf8_and_big5', $function$utf8_to_big5$function$
]]></string>
			<comment><![CDATA[internal conversion function for UTF8 to BIG5]]></comment>
		</function>
		<function name="utf8_to_euc_cn" id="Function_241635ac" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.utf8_to_euc_cn(integer, integer, cstring, internal, integer)
 RETURNS void
 LANGUAGE c
 PARALLEL SAFE STRICT
AS '$libdir/utf8_and_euc_cn', $function$utf8_to_euc_cn$function$
]]></string>
			<comment><![CDATA[internal conversion function for UTF8 to EUC_CN]]></comment>
		</function>
		<function name="utf8_to_euc_jis_2004" id="Function_151cc591" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.utf8_to_euc_jis_2004(integer, integer, cstring, internal, integer)
 RETURNS void
 LANGUAGE c
 PARALLEL SAFE STRICT
AS '$libdir/utf8_and_euc2004', $function$utf8_to_euc_jis_2004$function$
]]></string>
			<comment><![CDATA[internal conversion function for UTF8 to EUC_JIS_2004]]></comment>
		</function>
		<function name="utf8_to_euc_jp" id="Function_f96f2e4" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.utf8_to_euc_jp(integer, integer, cstring, internal, integer)
 RETURNS void
 LANGUAGE c
 PARALLEL SAFE STRICT
AS '$libdir/utf8_and_euc_jp', $function$utf8_to_euc_jp$function$
]]></string>
			<comment><![CDATA[internal conversion function for UTF8 to EUC_JP]]></comment>
		</function>
		<function name="utf8_to_euc_kr" id="Function_2b449c68" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.utf8_to_euc_kr(integer, integer, cstring, internal, integer)
 RETURNS void
 LANGUAGE c
 PARALLEL SAFE STRICT
AS '$libdir/utf8_and_euc_kr', $function$utf8_to_euc_kr$function$
]]></string>
			<comment><![CDATA[internal conversion function for UTF8 to EUC_KR]]></comment>
		</function>
		<function name="utf8_to_euc_tw" id="Function_24c5ca1c" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.utf8_to_euc_tw(integer, integer, cstring, internal, integer)
 RETURNS void
 LANGUAGE c
 PARALLEL SAFE STRICT
AS '$libdir/utf8_and_euc_tw', $function$utf8_to_euc_tw$function$
]]></string>
			<comment><![CDATA[internal conversion function for UTF8 to EUC_TW]]></comment>
		</function>
		<function name="utf8_to_gb18030" id="Function_282c8018" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.utf8_to_gb18030(integer, integer, cstring, internal, integer)
 RETURNS void
 LANGUAGE c
 PARALLEL SAFE STRICT
AS '$libdir/utf8_and_gb18030', $function$utf8_to_gb18030$function$
]]></string>
			<comment><![CDATA[internal conversion function for UTF8 to GB18030]]></comment>
		</function>
		<function name="utf8_to_gbk" id="Function_26efcb97" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.utf8_to_gbk(integer, integer, cstring, internal, integer)
 RETURNS void
 LANGUAGE c
 PARALLEL SAFE STRICT
AS '$libdir/utf8_and_gbk', $function$utf8_to_gbk$function$
]]></string>
			<comment><![CDATA[internal conversion function for UTF8 to GBK]]></comment>
		</function>
		<function name="utf8_to_iso8859" id="Function_2f1334b5" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.utf8_to_iso8859(integer, integer, cstring, internal, integer)
 RETURNS void
 LANGUAGE c
 PARALLEL SAFE STRICT
AS '$libdir/utf8_and_iso8859', $function$utf8_to_iso8859$function$
]]></string>
			<comment><![CDATA[internal conversion function for UTF8 to ISO-8859-8]]></comment>
		</function>
		<function name="utf8_to_iso8859_1" id="Function_dcca5d7" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.utf8_to_iso8859_1(integer, integer, cstring, internal, integer)
 RETURNS void
 LANGUAGE c
 PARALLEL SAFE STRICT
AS '$libdir/utf8_and_iso8859_1', $function$utf8_to_iso8859_1$function$
]]></string>
			<comment><![CDATA[internal conversion function for UTF8 to LATIN1]]></comment>
		</function>
		<function name="utf8_to_johab" id="Function_2cb91572" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.utf8_to_johab(integer, integer, cstring, internal, integer)
 RETURNS void
 LANGUAGE c
 PARALLEL SAFE STRICT
AS '$libdir/utf8_and_johab', $function$utf8_to_johab$function$
]]></string>
			<comment><![CDATA[internal conversion function for UTF8 to JOHAB]]></comment>
		</function>
		<function name="utf8_to_koi8r" id="Function_19de236f" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.utf8_to_koi8r(integer, integer, cstring, internal, integer)
 RETURNS void
 LANGUAGE c
 PARALLEL SAFE STRICT
AS '$libdir/utf8_and_cyrillic', $function$utf8_to_koi8r$function$
]]></string>
			<comment><![CDATA[internal conversion function for UTF8 to KOI8R]]></comment>
		</function>
		<function name="utf8_to_koi8u" id="Function_9a1c123" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.utf8_to_koi8u(integer, integer, cstring, internal, integer)
 RETURNS void
 LANGUAGE c
 PARALLEL SAFE STRICT
AS '$libdir/utf8_and_cyrillic', $function$utf8_to_koi8u$function$
]]></string>
			<comment><![CDATA[internal conversion function for UTF8 to KOI8U]]></comment>
		</function>
		<function name="utf8_to_shift_jis_2004" id="Function_1a0e83ac" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.utf8_to_shift_jis_2004(integer, integer, cstring, internal, integer)
 RETURNS void
 LANGUAGE c
 PARALLEL SAFE STRICT
AS '$libdir/utf8_and_sjis2004', $function$utf8_to_shift_jis_2004$function$
]]></string>
			<comment><![CDATA[internal conversion function for UTF8 to SHIFT_JIS_2004]]></comment>
		</function>
		<function name="utf8_to_sjis" id="Function_31c13e32" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.utf8_to_sjis(integer, integer, cstring, internal, integer)
 RETURNS void
 LANGUAGE c
 PARALLEL SAFE STRICT
AS '$libdir/utf8_and_sjis', $function$utf8_to_sjis$function$
]]></string>
			<comment><![CDATA[internal conversion function for UTF8 to SJIS]]></comment>
		</function>
		<function name="utf8_to_uhc" id="Function_267e2510" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.utf8_to_uhc(integer, integer, cstring, internal, integer)
 RETURNS void
 LANGUAGE c
 PARALLEL SAFE STRICT
AS '$libdir/utf8_and_uhc', $function$utf8_to_uhc$function$
]]></string>
			<comment><![CDATA[internal conversion function for UTF8 to UHC]]></comment>
		</function>
		<function name="utf8_to_win" id="Function_318b702a" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.utf8_to_win(integer, integer, cstring, internal, integer)
 RETURNS void
 LANGUAGE c
 PARALLEL SAFE STRICT
AS '$libdir/utf8_and_win', $function$utf8_to_win$function$
]]></string>
			<comment><![CDATA[internal conversion function for UTF8 to WIN1258]]></comment>
		</function>
		<function name="uuid_cmp" id="Function_23c36ee7" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.uuid_cmp(uuid, uuid)
 RETURNS integer
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$uuid_cmp$function$
]]></string>
			<comment><![CDATA[less-equal-greater]]></comment>
		</function>
		<function name="uuid_eq" id="Function_275a8bdf" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.uuid_eq(uuid, uuid)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT LEAKPROOF
AS $function$uuid_eq$function$
]]></string>
			<comment><![CDATA[implementation of = operator]]></comment>
		</function>
		<function name="uuid_ge" id="Function_2b8da8a7" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.uuid_ge(uuid, uuid)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT LEAKPROOF
AS $function$uuid_ge$function$
]]></string>
			<comment><![CDATA[implementation of >= operator]]></comment>
		</function>
		<function name="uuid_gt" id="Function_1459c5d3" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.uuid_gt(uuid, uuid)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT LEAKPROOF
AS $function$uuid_gt$function$
]]></string>
			<comment><![CDATA[implementation of > operator]]></comment>
		</function>
		<function name="uuid_hash" id="Function_16e02089" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.uuid_hash(uuid)
 RETURNS integer
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$uuid_hash$function$
]]></string>
			<comment><![CDATA[hash]]></comment>
		</function>
		<function name="uuid_in" id="Function_27118131" isSystem="false" >
			<comment><![CDATA[I/O]]></comment>
		</function>
		<function name="uuid_le" id="Function_2749e10f" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.uuid_le(uuid, uuid)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT LEAKPROOF
AS $function$uuid_le$function$
]]></string>
			<comment><![CDATA[implementation of <= operator]]></comment>
		</function>
		<function name="uuid_lt" id="Function_2f89b0a1" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.uuid_lt(uuid, uuid)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT LEAKPROOF
AS $function$uuid_lt$function$
]]></string>
			<comment><![CDATA[implementation of < operator]]></comment>
		</function>
		<function name="uuid_ne" id="Function_1eded272" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.uuid_ne(uuid, uuid)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT LEAKPROOF
AS $function$uuid_ne$function$
]]></string>
			<comment><![CDATA[implementation of <> operator]]></comment>
		</function>
		<function name="uuid_out" id="Function_30f13771" isSystem="false" >
			<comment><![CDATA[I/O]]></comment>
		</function>
		<function name="uuid_recv" id="Function_11de3010" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.uuid_recv(internal)
 RETURNS uuid
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$uuid_recv$function$
]]></string>
			<comment><![CDATA[I/O]]></comment>
		</function>
		<function name="uuid_send" id="Function_2a82bce7" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.uuid_send(uuid)
 RETURNS bytea
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$uuid_send$function$
]]></string>
			<comment><![CDATA[I/O]]></comment>
		</function>
		<function name="uuid_sortsupport" id="Function_f9e6069" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.uuid_sortsupport(internal)
 RETURNS void
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$uuid_sortsupport$function$
]]></string>
			<comment><![CDATA[sort support]]></comment>
		</function>
		<function name="var_pop" id="Function_2509e47a" isSystem="false" >
			<comment><![CDATA[population variance of bigint input values (square of the population standard deviation)]]></comment>
		</function>
		<function name="var_pop_001" id="Function_38c02648" isSystem="false" >
			<comment><![CDATA[population variance of bigint input values (square of the population standard deviation)]]></comment>
		</function>
		<function name="var_pop_002" id="Function_279aedfc" isSystem="false" >
			<comment><![CDATA[population variance of bigint input values (square of the population standard deviation)]]></comment>
		</function>
		<function name="var_pop_003" id="Function_d89ea1c" isSystem="false" >
			<comment><![CDATA[population variance of bigint input values (square of the population standard deviation)]]></comment>
		</function>
		<function name="var_pop_004" id="Function_2e0d7c" isSystem="false" >
			<comment><![CDATA[population variance of bigint input values (square of the population standard deviation)]]></comment>
		</function>
		<function name="var_pop_005" id="Function_28756c43" isSystem="false" >
			<comment><![CDATA[population variance of bigint input values (square of the population standard deviation)]]></comment>
		</function>
		<function name="var_samp" id="Function_2afd6830" isSystem="false" >
			<comment><![CDATA[sample variance of bigint input values (square of the sample standard deviation)]]></comment>
		</function>
		<function name="var_samp_001" id="Function_99660d0" isSystem="false" >
			<comment><![CDATA[sample variance of bigint input values (square of the sample standard deviation)]]></comment>
		</function>
		<function name="var_samp_002" id="Function_1a2ab281" isSystem="false" >
			<comment><![CDATA[sample variance of bigint input values (square of the sample standard deviation)]]></comment>
		</function>
		<function name="var_samp_003" id="Function_35174d65" isSystem="false" >
			<comment><![CDATA[sample variance of bigint input values (square of the sample standard deviation)]]></comment>
		</function>
		<function name="var_samp_004" id="Function_395ca0d3" isSystem="false" >
			<comment><![CDATA[sample variance of bigint input values (square of the sample standard deviation)]]></comment>
		</function>
		<function name="var_samp_005" id="Function_1c64e21b" isSystem="false" >
			<comment><![CDATA[sample variance of bigint input values (square of the sample standard deviation)]]></comment>
		</function>
		<function name="varbit" id="Function_17a71a61" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.varbit(bit varying, integer, boolean)
 RETURNS bit varying
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$varbit$function$
]]></string>
			<comment><![CDATA[adjust varbit() to typmod length]]></comment>
		</function>
		<function name="varbit_in" id="Function_2badf18d" isSystem="false" >
			<comment><![CDATA[I/O]]></comment>
		</function>
		<function name="varbit_out" id="Function_22d99fe5" isSystem="false" >
			<comment><![CDATA[I/O]]></comment>
		</function>
		<function name="varbit_recv" id="Function_2175b868" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.varbit_recv(internal, oid, integer)
 RETURNS bit varying
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$varbit_recv$function$
]]></string>
			<comment><![CDATA[I/O]]></comment>
		</function>
		<function name="varbit_send" id="Function_15c054fd" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.varbit_send(bit varying)
 RETURNS bytea
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$varbit_send$function$
]]></string>
			<comment><![CDATA[I/O]]></comment>
		</function>
		<function name="varbit_transform" id="Function_37f394a2" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.varbit_transform(internal)
 RETURNS internal
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$varbit_transform$function$
]]></string>
			<comment><![CDATA[transform a varbit length coercion]]></comment>
		</function>
		<function name="varbitcmp" id="Function_2a459b98" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.varbitcmp(bit varying, bit varying)
 RETURNS integer
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$bitcmp$function$
]]></string>
			<comment><![CDATA[less-equal-greater]]></comment>
		</function>
		<function name="varbiteq" id="Function_21e78dd9" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.varbiteq(bit varying, bit varying)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT LEAKPROOF
AS $function$biteq$function$
]]></string>
			<comment><![CDATA[implementation of = operator]]></comment>
		</function>
		<function name="varbitge" id="Function_3550c5f0" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.varbitge(bit varying, bit varying)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT LEAKPROOF
AS $function$bitge$function$
]]></string>
			<comment><![CDATA[implementation of >= operator]]></comment>
		</function>
		<function name="varbitgt" id="Function_266af74d" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.varbitgt(bit varying, bit varying)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT LEAKPROOF
AS $function$bitgt$function$
]]></string>
			<comment><![CDATA[implementation of > operator]]></comment>
		</function>
		<function name="varbitle" id="Function_2c268c" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.varbitle(bit varying, bit varying)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT LEAKPROOF
AS $function$bitle$function$
]]></string>
			<comment><![CDATA[implementation of <= operator]]></comment>
		</function>
		<function name="varbitlt" id="Function_2c0baed8" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.varbitlt(bit varying, bit varying)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT LEAKPROOF
AS $function$bitlt$function$
]]></string>
			<comment><![CDATA[implementation of < operator]]></comment>
		</function>
		<function name="varbitne" id="Function_110b5253" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.varbitne(bit varying, bit varying)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT LEAKPROOF
AS $function$bitne$function$
]]></string>
			<comment><![CDATA[implementation of <> operator]]></comment>
		</function>
		<function name="varbittypmodin" id="Function_34a4999a" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.varbittypmodin(cstring[])
 RETURNS integer
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$varbittypmodin$function$
]]></string>
			<comment><![CDATA[I/O typmod]]></comment>
		</function>
		<function name="varbittypmodout" id="Function_75c20c1" isSystem="false" >
			<comment><![CDATA[I/O typmod]]></comment>
		</function>
		<function name="varchar" id="Function_3a6c4714" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog."varchar"(name)
 RETURNS character varying
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$name_text$function$
CREATE OR REPLACE FUNCTION pg_catalog."varchar"(character varying, integer, boolean)
 RETURNS character varying
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$varchar$function$
]]></string>
			<comment><![CDATA[convert name to varchar]]></comment>
		</function>
		<function name="varchar_001" id="Function_2f587cc" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog."varchar"(name)
 RETURNS character varying
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$name_text$function$
CREATE OR REPLACE FUNCTION pg_catalog."varchar"(character varying, integer, boolean)
 RETURNS character varying
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$varchar$function$
]]></string>
			<comment><![CDATA[convert name to varchar]]></comment>
		</function>
		<function name="varchar_transform" id="Function_1ab59238" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.varchar_transform(internal)
 RETURNS internal
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$varchar_transform$function$
]]></string>
			<comment><![CDATA[transform a varchar length coercion]]></comment>
		</function>
		<function name="varcharin" id="Function_2ac00584" isSystem="false" >
			<comment><![CDATA[I/O]]></comment>
		</function>
		<function name="varcharout" id="Function_b9c8f9" isSystem="false" >
			<comment><![CDATA[I/O]]></comment>
		</function>
		<function name="varcharrecv" id="Function_32bef545" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.varcharrecv(internal, oid, integer)
 RETURNS character varying
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$varcharrecv$function$
]]></string>
			<comment><![CDATA[I/O]]></comment>
		</function>
		<function name="varcharsend" id="Function_c27be0a" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.varcharsend(character varying)
 RETURNS bytea
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$varcharsend$function$
]]></string>
			<comment><![CDATA[I/O]]></comment>
		</function>
		<function name="varchartypmodin" id="Function_33e55306" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.varchartypmodin(cstring[])
 RETURNS integer
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$varchartypmodin$function$
]]></string>
			<comment><![CDATA[I/O typmod]]></comment>
		</function>
		<function name="varchartypmodout" id="Function_2f886b39" isSystem="false" >
			<comment><![CDATA[I/O typmod]]></comment>
		</function>
		<function name="variance" id="Function_39852769" isSystem="false" >
			<comment><![CDATA[historical alias for var_samp]]></comment>
		</function>
		<function name="variance_001" id="Function_20f34a83" isSystem="false" >
			<comment><![CDATA[historical alias for var_samp]]></comment>
		</function>
		<function name="variance_002" id="Function_10fecffe" isSystem="false" >
			<comment><![CDATA[historical alias for var_samp]]></comment>
		</function>
		<function name="variance_003" id="Function_3b98995a" isSystem="false" >
			<comment><![CDATA[historical alias for var_samp]]></comment>
		</function>
		<function name="variance_004" id="Function_24aa4d09" isSystem="false" >
			<comment><![CDATA[historical alias for var_samp]]></comment>
		</function>
		<function name="variance_005" id="Function_1ea17abe" isSystem="false" >
			<comment><![CDATA[historical alias for var_samp]]></comment>
		</function>
		<function name="version" id="Function_ca8ae9f" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.version()
 RETURNS text
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$pgsql_version$function$
]]></string>
			<comment><![CDATA[PostgreSQL version string]]></comment>
		</function>
		<function name="void_in" id="Function_25bca755" isSystem="false" >
			<comment><![CDATA[I/O]]></comment>
		</function>
		<function name="void_out" id="Function_31fbb7bf" isSystem="false" >
			<comment><![CDATA[I/O]]></comment>
		</function>
		<function name="void_recv" id="Function_3ae204fd" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.void_recv(internal)
 RETURNS void
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$void_recv$function$
]]></string>
			<comment><![CDATA[I/O]]></comment>
		</function>
		<function name="void_send" id="Function_1976db2c" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.void_send(void)
 RETURNS bytea
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$void_send$function$
]]></string>
			<comment><![CDATA[I/O]]></comment>
		</function>
		<function name="width" id="Function_cd9aba9" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.width(box)
 RETURNS double precision
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$box_width$function$
]]></string>
			<comment><![CDATA[box width]]></comment>
		</function>
		<function name="width_bucket" id="Function_2ef26923" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.width_bucket(anyelement, anyarray)
 RETURNS integer
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$width_bucket_array$function$
CREATE OR REPLACE FUNCTION pg_catalog.width_bucket(double precision, double precision, double precision, integer)
 RETURNS integer
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$width_bucket_float8$function$
CREATE OR REPLACE FUNCTION pg_catalog.width_bucket(numeric, numeric, numeric, integer)
 RETURNS integer
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$width_bucket_numeric$function$
]]></string>
			<comment><![CDATA[bucket number of operand in equal-width histogram]]></comment>
		</function>
		<function name="width_bucket_001" id="Function_34ded53b" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.width_bucket(anyelement, anyarray)
 RETURNS integer
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$width_bucket_array$function$
CREATE OR REPLACE FUNCTION pg_catalog.width_bucket(double precision, double precision, double precision, integer)
 RETURNS integer
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$width_bucket_float8$function$
CREATE OR REPLACE FUNCTION pg_catalog.width_bucket(numeric, numeric, numeric, integer)
 RETURNS integer
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$width_bucket_numeric$function$
]]></string>
			<comment><![CDATA[bucket number of operand in equal-width histogram]]></comment>
		</function>
		<function name="width_bucket_002" id="Function_14056bd3" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.width_bucket(anyelement, anyarray)
 RETURNS integer
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$width_bucket_array$function$
CREATE OR REPLACE FUNCTION pg_catalog.width_bucket(double precision, double precision, double precision, integer)
 RETURNS integer
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$width_bucket_float8$function$
CREATE OR REPLACE FUNCTION pg_catalog.width_bucket(numeric, numeric, numeric, integer)
 RETURNS integer
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$width_bucket_numeric$function$
]]></string>
			<comment><![CDATA[bucket number of operand in equal-width histogram]]></comment>
		</function>
		<function name="win1250_to_latin2" id="Function_19731ee" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.win1250_to_latin2(integer, integer, cstring, internal, integer)
 RETURNS void
 LANGUAGE c
 PARALLEL SAFE STRICT
AS '$libdir/latin2_and_win1250', $function$win1250_to_latin2$function$
]]></string>
			<comment><![CDATA[internal conversion function for WIN1250 to LATIN2]]></comment>
		</function>
		<function name="win1250_to_mic" id="Function_3fd8b06" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.win1250_to_mic(integer, integer, cstring, internal, integer)
 RETURNS void
 LANGUAGE c
 PARALLEL SAFE STRICT
AS '$libdir/latin2_and_win1250', $function$win1250_to_mic$function$
]]></string>
			<comment><![CDATA[internal conversion function for WIN1250 to MULE_INTERNAL]]></comment>
		</function>
		<function name="win1251_to_iso" id="Function_3949b7f2" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.win1251_to_iso(integer, integer, cstring, internal, integer)
 RETURNS void
 LANGUAGE c
 PARALLEL SAFE STRICT
AS '$libdir/cyrillic_and_mic', $function$win1251_to_iso$function$
]]></string>
			<comment><![CDATA[internal conversion function for WIN1251 to ISO-8859-5]]></comment>
		</function>
		<function name="win1251_to_koi8r" id="Function_9138a3d" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.win1251_to_koi8r(integer, integer, cstring, internal, integer)
 RETURNS void
 LANGUAGE c
 PARALLEL SAFE STRICT
AS '$libdir/cyrillic_and_mic', $function$win1251_to_koi8r$function$
]]></string>
			<comment><![CDATA[internal conversion function for WIN1251 to KOI8R]]></comment>
		</function>
		<function name="win1251_to_mic" id="Function_35836f16" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.win1251_to_mic(integer, integer, cstring, internal, integer)
 RETURNS void
 LANGUAGE c
 PARALLEL SAFE STRICT
AS '$libdir/cyrillic_and_mic', $function$win1251_to_mic$function$
]]></string>
			<comment><![CDATA[internal conversion function for WIN1251 to MULE_INTERNAL]]></comment>
		</function>
		<function name="win1251_to_win866" id="Function_84a85e1" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.win1251_to_win866(integer, integer, cstring, internal, integer)
 RETURNS void
 LANGUAGE c
 PARALLEL SAFE STRICT
AS '$libdir/cyrillic_and_mic', $function$win1251_to_win866$function$
]]></string>
			<comment><![CDATA[internal conversion function for WIN1251 to WIN866]]></comment>
		</function>
		<function name="win866_to_iso" id="Function_1297e63a" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.win866_to_iso(integer, integer, cstring, internal, integer)
 RETURNS void
 LANGUAGE c
 PARALLEL SAFE STRICT
AS '$libdir/cyrillic_and_mic', $function$win866_to_iso$function$
]]></string>
			<comment><![CDATA[internal conversion function for WIN866 to ISO-8859-5]]></comment>
		</function>
		<function name="win866_to_koi8r" id="Function_29b27f09" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.win866_to_koi8r(integer, integer, cstring, internal, integer)
 RETURNS void
 LANGUAGE c
 PARALLEL SAFE STRICT
AS '$libdir/cyrillic_and_mic', $function$win866_to_koi8r$function$
]]></string>
			<comment><![CDATA[internal conversion function for WIN866 to KOI8R]]></comment>
		</function>
		<function name="win866_to_mic" id="Function_7844640" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.win866_to_mic(integer, integer, cstring, internal, integer)
 RETURNS void
 LANGUAGE c
 PARALLEL SAFE STRICT
AS '$libdir/cyrillic_and_mic', $function$win866_to_mic$function$
]]></string>
			<comment><![CDATA[internal conversion function for WIN866 to MULE_INTERNAL]]></comment>
		</function>
		<function name="win866_to_win1251" id="Function_3b72450e" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.win866_to_win1251(integer, integer, cstring, internal, integer)
 RETURNS void
 LANGUAGE c
 PARALLEL SAFE STRICT
AS '$libdir/cyrillic_and_mic', $function$win866_to_win1251$function$
]]></string>
			<comment><![CDATA[internal conversion function for WIN866 to WIN1251]]></comment>
		</function>
		<function name="win_to_utf8" id="Function_15305948" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.win_to_utf8(integer, integer, cstring, internal, integer)
 RETURNS void
 LANGUAGE c
 PARALLEL SAFE STRICT
AS '$libdir/utf8_and_win', $function$win_to_utf8$function$
]]></string>
			<comment><![CDATA[internal conversion function for WIN1258 to UTF8]]></comment>
		</function>
		<function name="xideq" id="Function_3778aa99" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.xideq(xid, xid)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT LEAKPROOF
AS $function$xideq$function$
]]></string>
			<comment><![CDATA[implementation of = operator]]></comment>
		</function>
		<function name="xideqint4" id="Function_15914b26" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.xideqint4(xid, integer)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT LEAKPROOF
AS $function$xideq$function$
]]></string>
			<comment><![CDATA[implementation of = operator]]></comment>
		</function>
		<function name="xidin" id="Function_129112f4" isSystem="false" >
			<comment><![CDATA[I/O]]></comment>
		</function>
		<function name="xidneq" id="Function_68cb2d9" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.xidneq(xid, xid)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT LEAKPROOF
AS $function$xidneq$function$
]]></string>
			<comment><![CDATA[implementation of <> operator]]></comment>
		</function>
		<function name="xidneqint4" id="Function_241ec608" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.xidneqint4(xid, integer)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT LEAKPROOF
AS $function$xidneq$function$
]]></string>
			<comment><![CDATA[implementation of <> operator]]></comment>
		</function>
		<function name="xidout" id="Function_32cb6bf2" isSystem="false" >
			<comment><![CDATA[I/O]]></comment>
		</function>
		<function name="xidrecv" id="Function_9717df7" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.xidrecv(internal)
 RETURNS xid
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$xidrecv$function$
]]></string>
			<comment><![CDATA[I/O]]></comment>
		</function>
		<function name="xidsend" id="Function_1cbd4647" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.xidsend(xid)
 RETURNS bytea
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$xidsend$function$
]]></string>
			<comment><![CDATA[I/O]]></comment>
		</function>
		<function name="xml" id="Function_17e286a6" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.xml(text)
 RETURNS xml
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$texttoxml$function$
]]></string>
			<comment><![CDATA[perform a non-validating parse of a character string to produce an XML value]]></comment>
		</function>
		<function name="xml_in" id="Function_1733f43b" isSystem="false" >
			<comment><![CDATA[I/O]]></comment>
		</function>
		<function name="xml_is_well_formed" id="Function_18675ca5" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.xml_is_well_formed(text)
 RETURNS boolean
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$xml_is_well_formed$function$
]]></string>
			<comment><![CDATA[determine if a string is well formed XML]]></comment>
		</function>
		<function name="xml_is_well_formed_content" id="Function_19a39e3" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.xml_is_well_formed_content(text)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$xml_is_well_formed_content$function$
]]></string>
			<comment><![CDATA[determine if a string is well formed XML content]]></comment>
		</function>
		<function name="xml_is_well_formed_document" id="Function_12b75164" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.xml_is_well_formed_document(text)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$xml_is_well_formed_document$function$
]]></string>
			<comment><![CDATA[determine if a string is well formed XML document]]></comment>
		</function>
		<function name="xml_out" id="Function_2160f3c5" isSystem="false" >
			<comment><![CDATA[I/O]]></comment>
		</function>
		<function name="xml_recv" id="Function_1cc717ae" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.xml_recv(internal)
 RETURNS xml
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$xml_recv$function$
]]></string>
			<comment><![CDATA[I/O]]></comment>
		</function>
		<function name="xml_send" id="Function_3596cebd" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.xml_send(xml)
 RETURNS bytea
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$xml_send$function$
]]></string>
			<comment><![CDATA[I/O]]></comment>
		</function>
		<function name="xmlagg" id="Function_7017ce1" isSystem="false" >
			<comment><![CDATA[concatenate XML values]]></comment>
		</function>
		<function name="xmlcomment" id="Function_8a95a35" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.xmlcomment(text)
 RETURNS xml
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$xmlcomment$function$
]]></string>
			<comment><![CDATA[generate XML comment]]></comment>
		</function>
		<function name="xmlconcat2" id="Function_33fa9ec8" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.xmlconcat2(xml, xml)
 RETURNS xml
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE
AS $function$xmlconcat2$function$
]]></string>
			<comment><![CDATA[aggregate transition function]]></comment>
		</function>
		<function name="xmlexists" id="Function_3a12a43a" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog."xmlexists"(text, xml)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$xmlexists$function$
]]></string>
			<comment><![CDATA[test XML value against XPath expression]]></comment>
		</function>
		<function name="xmlvalidate" id="Function_168c62b7" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.xmlvalidate(xml, text)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$xmlvalidate$function$
]]></string>
			<comment><![CDATA[validate an XML value]]></comment>
		</function>
		<function name="xpath" id="Function_68744c7" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.xpath(text, xml)
 RETURNS xml[]
 LANGUAGE sql
 IMMUTABLE PARALLEL SAFE STRICT COST 1
AS $function$select pg_catalog.xpath($1, $2, '{}'::pg_catalog.text[])$function$
CREATE OR REPLACE FUNCTION pg_catalog.xpath(text, xml, text[])
 RETURNS xml[]
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$xpath$function$
]]></string>
			<comment><![CDATA[evaluate XPath expression, with namespaces support]]></comment>
		</function>
		<function name="xpath_001" id="Function_2db2ade6" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.xpath(text, xml)
 RETURNS xml[]
 LANGUAGE sql
 IMMUTABLE PARALLEL SAFE STRICT COST 1
AS $function$select pg_catalog.xpath($1, $2, '{}'::pg_catalog.text[])$function$
CREATE OR REPLACE FUNCTION pg_catalog.xpath(text, xml, text[])
 RETURNS xml[]
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$xpath$function$
]]></string>
			<comment><![CDATA[evaluate XPath expression, with namespaces support]]></comment>
		</function>
		<function name="xpath_exists" id="Function_321ca373" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.xpath_exists(text, xml)
 RETURNS boolean
 LANGUAGE sql
 IMMUTABLE PARALLEL SAFE STRICT COST 1
AS $function$select pg_catalog.xpath_exists($1, $2, '{}'::pg_catalog.text[])$function$
CREATE OR REPLACE FUNCTION pg_catalog.xpath_exists(text, xml, text[])
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$xpath_exists$function$
]]></string>
			<comment><![CDATA[test XML value against XPath expression, with namespace support]]></comment>
		</function>
		<function name="xpath_exists_001" id="Function_155c8688" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.xpath_exists(text, xml)
 RETURNS boolean
 LANGUAGE sql
 IMMUTABLE PARALLEL SAFE STRICT COST 1
AS $function$select pg_catalog.xpath_exists($1, $2, '{}'::pg_catalog.text[])$function$
CREATE OR REPLACE FUNCTION pg_catalog.xpath_exists(text, xml, text[])
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$xpath_exists$function$
]]></string>
			<comment><![CDATA[test XML value against XPath expression, with namespace support]]></comment>
		</function>
	</schema>
	<schema name="plate" catalogname="labman" schemaname="plate" />
	<schema name="pm" catalogname="labman" schemaname="pm" >
		<table name="condensed_plates" >
			<column name="shotgun_plate_id" type="bigint" length="19" decimal="0" jt="-5" mandatory="y" />
			<column name="dna_plate_id" type="bigint" length="19" decimal="0" jt="-5" mandatory="y" />
			<column name="position" type="integer" length="10" decimal="0" jt="4" mandatory="y" />
			<index name="condensed_plates_pkey" unique="PRIMARY_KEY" >
				<column name="shotgun_plate_id" />
				<column name="dna_plate_id" />
				<column name="position" />
			</index>
			<index name="idx_condensed_plates_0" unique="NORMAL" >
				<column name="shotgun_plate_id" />
			</index>
			<index name="idx_condensed_plates_1" unique="NORMAL" >
				<column name="dna_plate_id" />
			</index>
			<fk name="fk_condensed_plates_dna_plate" to_schema="pm" to_table="dna_plate" >
				<fk_column name="dna_plate_id" pk="dna_plate_id" />
			</fk>
			<fk name="fk_condensed_plates" to_schema="pm" to_table="shotgun_plate" >
				<fk_column name="shotgun_plate_id" pk="shotgun_plate_id" />
			</fk>
		</table>
		<table name="dna_plate" >
			<column name="dna_plate_id" type="bigserial" length="19" decimal="0" jt="-5" mandatory="y" />
			<column name="name" type="varchar" decimal="0" jt="12" mandatory="y" />
			<column name="user_id" type="bigint" jt="-5" mandatory="y" />
			<column name="created_on" type="timestamp" length="29" decimal="6" jt="93" />
			<column name="sample_plate_id" type="bigint" length="19" decimal="0" jt="-5" mandatory="y" />
			<column name="extraction_robot_id" type="bigint" length="19" decimal="0" jt="-5" mandatory="y" />
			<column name="extraction_kit_lot_id" type="bigint" length="19" decimal="0" jt="-5" mandatory="y" />
			<column name="extraction_tool_id" type="bigint" length="19" decimal="0" jt="-5" mandatory="y" />
			<column name="notes" type="varchar" decimal="0" jt="12" />
			<index name="pk_dna_plate" unique="PRIMARY_KEY" >
				<column name="dna_plate_id" />
			</index>
			<index name="uq_dna_plate_name" unique="UNIQUE" >
				<column name="name" />
			</index>
			<index name="idx_dna_plate_extraction_kit_lot_id" unique="NORMAL" >
				<column name="extraction_kit_lot_id" />
			</index>
			<index name="idx_dna_plate_extraction_robot_id" unique="NORMAL" >
				<column name="extraction_robot_id" />
			</index>
			<index name="idx_dna_plate_extraction_tool_id" unique="NORMAL" >
				<column name="extraction_tool_id" />
			</index>
			<index name="idx_dna_plate_sample_plate_id" unique="NORMAL" >
				<column name="sample_plate_id" />
			</index>
			<index name="idx_dna_plate" unique="NORMAL" >
				<column name="user_id" />
			</index>
			<fk name="fk_dna_plate" to_schema="pm" to_table="extraction_kit_lot" >
				<fk_column name="extraction_kit_lot_id" pk="extraction_kit_lot_id" />
			</fk>
			<fk name="fk_dna_plate_extraction_robot" to_schema="pm" to_table="extraction_robot" >
				<fk_column name="extraction_robot_id" pk="extraction_robot_id" />
			</fk>
			<fk name="fk_dna_plate_extraction_tool" to_schema="pm" to_table="extraction_tool" >
				<fk_column name="extraction_tool_id" pk="extraction_tool_id" />
			</fk>
			<fk name="fk_dna_plate_sample_plate" to_schema="pm" to_table="sample_plate" >
				<fk_column name="sample_plate_id" pk="sample_plate_id" />
			</fk>
			<fk name="fk_dna_plate_user" to_schema="users" to_table="user" >
				<fk_column name="user_id" pk="user_id" />
			</fk>
		</table>
		<table name="dna_plate_well_values" >
			<column name="dna_plate_id" type="bigint" length="19" decimal="0" jt="-5" mandatory="y" />
			<column name="row" type="integer" length="10" decimal="0" jt="4" mandatory="y" />
			<column name="col" type="integer" length="10" decimal="0" jt="4" mandatory="y" />
			<column name="dna_concentration" type="real" length="8" decimal="8" jt="7" mandatory="y" />
			<index name="idx_dna_plate_well_values" unique="NORMAL" >
				<column name="dna_plate_id" />
			</index>
			<fk name="fk_dna_plate_well_values" to_schema="pm" to_table="dna_plate" >
				<fk_column name="dna_plate_id" pk="dna_plate_id" />
			</fk>
		</table>
		<table name="echo" >
			<column name="echo_id" type="bigserial" length="19" decimal="0" jt="-5" mandatory="y" />
			<column name="name" type="varchar" decimal="0" jt="12" mandatory="y" />
			<column name="notes" type="varchar" decimal="0" jt="12" />
			<index name="pk_echo" unique="PRIMARY_KEY" >
				<column name="echo_id" />
			</index>
			<index name="idx_echo" unique="UNIQUE" >
				<column name="name" />
			</index>
		</table>
		<table name="extraction_kit_lot" >
			<column name="extraction_kit_lot_id" type="bigserial" length="19" decimal="0" jt="-5" mandatory="y" />
			<column name="name" type="varchar" decimal="0" jt="12" mandatory="y" />
			<column name="notes" type="varchar" decimal="0" jt="12" />
			<index name="pk_extraction_kit_lot" unique="PRIMARY_KEY" >
				<column name="extraction_kit_lot_id" />
			</index>
			<index name="uq_extraction_kit_lot_name" unique="UNIQUE" >
				<column name="name" />
			</index>
		</table>
		<table name="extraction_robot" >
			<column name="extraction_robot_id" type="bigserial" length="19" decimal="0" jt="-5" mandatory="y" />
			<column name="name" type="varchar" decimal="0" jt="12" mandatory="y" />
			<column name="notes" type="varchar" decimal="0" jt="12" />
			<index name="pk_extraction_robot" unique="PRIMARY_KEY" >
				<column name="extraction_robot_id" />
			</index>
			<index name="uq_extraction_robot_name" unique="UNIQUE" >
				<column name="name" />
			</index>
		</table>
		<table name="extraction_tool" >
			<comment>TM1000-8 tools</comment>
			<column name="extraction_tool_id" type="bigserial" length="19" decimal="0" jt="-5" mandatory="y" />
			<column name="name" type="varchar" decimal="0" jt="12" mandatory="y" />
			<column name="notes" type="varchar" decimal="0" jt="12" />
			<index name="pk_extraction_tool" unique="PRIMARY_KEY" >
				<column name="extraction_tool_id" />
			</index>
			<index name="uq_extraction_tool_name" unique="UNIQUE" >
				<column name="name" />
			</index>
		</table>
		<table name="master_mix_lot" >
			<column name="master_mix_lot_id" type="bigserial" length="19" decimal="0" jt="-5" mandatory="y" />
			<column name="name" type="varchar" decimal="0" jt="12" mandatory="y" />
			<column name="notes" type="varchar" decimal="0" jt="12" />
			<index name="pk_master_mix_lot" unique="PRIMARY_KEY" >
				<column name="master_mix_lot_id" />
			</index>
			<index name="uq_master_mix_lot_name" unique="UNIQUE" >
				<column name="name" />
			</index>
		</table>
		<table name="mosquito" >
			<column name="mosquito_id" type="bigserial" length="19" decimal="0" jt="-5" mandatory="y" />
			<column name="name" type="varchar" decimal="0" jt="12" mandatory="y" />
			<column name="notes" type="varchar" decimal="0" jt="12" />
			<index name="pk_mosquito" unique="PRIMARY_KEY" >
				<column name="mosquito_id" />
			</index>
			<index name="idx_mosquito" unique="UNIQUE" >
				<column name="name" />
			</index>
		</table>
		<table name="plate_reader" >
			<column name="plate_reader_id" type="bigserial" length="19" decimal="0" jt="-5" mandatory="y" />
			<column name="name" type="varchar" decimal="0" jt="12" mandatory="y" />
			<column name="notes" type="varchar" decimal="0" jt="12" />
			<index name="pk_plate_reader" unique="PRIMARY_KEY" >
				<column name="plate_reader_id" />
			</index>
			<index name="idx_plate_reader" unique="UNIQUE" >
				<column name="name" />
			</index>
		</table>
		<table name="plate_type" >
			<column name="plate_type_id" type="bigserial" length="19" decimal="0" jt="-5" mandatory="y" />
			<column name="name" type="varchar" decimal="0" jt="12" mandatory="y" />
			<column name="cols" type="smallint" length="5" decimal="0" jt="5" mandatory="y" />
			<column name="rows" type="smallint" length="5" decimal="0" jt="5" mandatory="y" />
			<column name="notes" type="varchar" decimal="0" jt="12" />
			<index name="pk_plate_type" unique="PRIMARY_KEY" >
				<column name="plate_type_id" />
			</index>
			<index name="uq_plate_type_name" unique="UNIQUE" >
				<column name="name" />
			</index>
		</table>
		<table name="processing_robot" >
			<column name="processing_robot_id" type="bigserial" length="19" decimal="0" jt="-5" mandatory="y" />
			<column name="name" type="varchar" decimal="0" jt="12" mandatory="y" />
			<column name="notes" type="varchar" decimal="0" jt="12" />
			<index name="pk_processing_robot" unique="PRIMARY_KEY" >
				<column name="processing_robot_id" />
			</index>
			<index name="uq_processing_robot_name" unique="UNIQUE" >
				<column name="name" />
			</index>
		</table>
		<table name="protocol_run_pool" >
			<column name="run_pool_id" type="bigint" length="19" decimal="0" jt="-5" mandatory="y" />
			<column name="shotgun_pool_id" type="bigint" length="19" decimal="0" jt="-5" />
			<column name="targeted_pool_id" type="bigint" length="19" decimal="0" jt="-5" />
			<column name="percentage" type="real" length="8" decimal="8" jt="7" />
			<index name="idx_protocol_run_pool" unique="NORMAL" >
				<column name="shotgun_pool_id" />
			</index>
			<index name="idx_protocol_run_pool_0" unique="NORMAL" >
				<column name="targeted_pool_id" />
			</index>
			<index name="idx_protocol_run_pool_1" unique="NORMAL" >
				<column name="run_pool_id" />
			</index>
			<fk name="fk_protocol_run_pool_run_pool" to_schema="pm" to_table="run_pool" >
				<fk_column name="run_pool_id" pk="run_pool_id" />
			</fk>
			<fk name="fk_protocol_run_pool_shotgun_pool" to_schema="pm" to_table="shotgun_pool" >
				<fk_column name="shotgun_pool_id" pk="shotgun_pool_id" />
			</fk>
			<fk name="fk_protocol_run_pool_targeted_pool_tg" to_schema="pm" to_table="targeted_pool" >
				<fk_column name="targeted_pool_id" pk="targeted_pool_id" />
			</fk>
		</table>
		<table name="qpcr" >
			<column name="qpcr_id" type="bigserial" length="19" decimal="0" jt="-5" mandatory="y" />
			<column name="name" type="varchar" decimal="0" jt="12" mandatory="y" />
			<column name="notes" type="varchar" decimal="0" jt="12" />
			<index name="pk_qpcr" unique="PRIMARY_KEY" >
				<column name="qpcr_id" />
			</index>
			<index name="idx_qpcr" unique="UNIQUE" >
				<column name="name" />
			</index>
		</table>
		<table name="run_pool" >
			<column name="run_pool_id" type="bigserial" length="19" decimal="0" jt="-5" mandatory="y" />
			<column name="name" type="varchar" decimal="0" jt="12" mandatory="y" />
			<column name="volume" type="real" length="8" decimal="8" jt="7" mandatory="y" />
			<column name="notes" type="varchar" decimal="0" jt="12" />
			<index name="pk_run_pool" unique="PRIMARY_KEY" >
				<column name="run_pool_id" />
			</index>
			<index name="idx_run_pool" unique="UNIQUE" >
				<column name="name" />
			</index>
		</table>
		<table name="sample" >
			<column name="sample_id" type="varchar" decimal="0" jt="12" mandatory="y" />
			<column name="is_blank" type="bool" length="1" decimal="0" jt="-7" mandatory="y" >
				<defo>false</defo>
			</column>
			<column name="details" type="varchar" decimal="0" jt="12" />
			<index name="pk_sample" unique="PRIMARY_KEY" >
				<column name="sample_id" />
			</index>
		</table>
		<table name="sample_plate" >
			<comment>Holds the information about the initial plate that the wet lab creates.</comment>
			<column name="sample_plate_id" type="bigserial" length="19" decimal="0" jt="-5" mandatory="y" />
			<column name="name" type="varchar" decimal="0" jt="12" mandatory="y" />
			<column name="created_on" type="timestamp" length="29" decimal="6" jt="93" />
			<column name="user_id" type="bigint" jt="-5" mandatory="y" />
			<column name="plate_type_id" type="bigint" length="19" decimal="0" jt="-5" mandatory="y" />
			<column name="notes" type="varchar" decimal="0" jt="12" />
			<column name="discarded" type="bool" length="1" decimal="0" jt="-7" mandatory="y" >
				<defo>false</defo>
			</column>
			<index name="pk_sample_plate" unique="PRIMARY_KEY" >
				<column name="sample_plate_id" />
			</index>
			<index name="uq_sample_plate_name" unique="UNIQUE" >
				<column name="name" />
			</index>
			<index name="idx_sample_plate_plate_type_id" unique="NORMAL" >
				<column name="plate_type_id" />
			</index>
			<index name="idx_sample_plate" unique="NORMAL" >
				<column name="user_id" />
			</index>
			<fk name="fk_sample_plate_plate_type" to_schema="pm" to_table="plate_type" >
				<fk_column name="plate_type_id" pk="plate_type_id" />
			</fk>
			<fk name="fk_sample_plate_user" to_schema="users" to_table="user" >
				<fk_column name="user_id" pk="user_id" />
			</fk>
		</table>
		<table name="sample_plate_layout" >
			<column name="sample_plate_id" type="bigint" length="19" decimal="0" jt="-5" mandatory="y" />
			<column name="sample_id" type="varchar" decimal="0" jt="12" />
			<column name="col" type="smallint" length="5" decimal="0" jt="5" mandatory="y" />
			<column name="row" type="smallint" length="5" decimal="0" jt="5" mandatory="y" />
			<column name="name" type="varchar" decimal="0" jt="12" >
				<comment><![CDATA[The name of the sample in this plate in case that needs to be changed (e.g. if the sample has been plated twice)]]></comment>
			</column>
			<column name="notes" type="varchar" decimal="0" jt="12" />
			<index name="idx_sample_plate_layout_sample_id" unique="NORMAL" >
				<column name="sample_id" />
			</index>
			<index name="idx_sample_plate_layout_sample_plate_id" unique="NORMAL" >
				<column name="sample_plate_id" />
			</index>
			<fk name="fk_plate_map_sample" to_schema="pm" to_table="sample" >
				<fk_column name="sample_id" pk="sample_id" />
			</fk>
			<fk name="fk_plate_map_sample_plate" to_schema="pm" to_table="sample_plate" >
				<fk_column name="sample_plate_id" pk="sample_plate_id" />
			</fk>
		</table>
		<table name="sample_plate_study" >
			<column name="sample_plate_id" type="bigint" length="19" decimal="0" jt="-5" mandatory="y" />
			<column name="study_id" type="bigint" length="19" decimal="0" jt="-5" mandatory="y" />
			<index name="idx_sample_plate_study_sample_plate" unique="NORMAL" >
				<column name="sample_plate_id" />
			</index>
			<index name="idx_sample_plate_study_study_id" unique="NORMAL" >
				<column name="study_id" />
			</index>
			<fk name="fk_sample_plate_study" to_schema="pm" to_table="sample_plate" >
				<fk_column name="sample_plate_id" pk="sample_plate_id" />
			</fk>
			<fk name="fk_sample_plate_study_study" to_schema="pm" to_table="study" >
				<fk_column name="study_id" pk="study_id" />
			</fk>
		</table>
		<table name="shotgun_adapter_aliquot" >
			<column name="shotgun_adapter_aliquot_id" type="bigserial" length="19" decimal="0" jt="-5" mandatory="y" />
			<column name="name" type="varchar" decimal="0" jt="12" mandatory="y" />
			<column name="notes" type="varchar" decimal="0" jt="12" />
			<column name="limit_freeze_thaw_cycles" type="integer" length="10" decimal="0" jt="4" mandatory="y" />
			<index name="pk_shotgun_adapter_aliquot" unique="PRIMARY_KEY" >
				<column name="shotgun_adapter_aliquot_id" />
			</index>
			<index name="idx_adapter_aliquot" unique="UNIQUE" >
				<column name="name" />
			</index>
		</table>
		<table name="shotgun_index" >
			<column name="shotgun_index_id" type="bigserial" length="19" decimal="0" jt="-5" mandatory="y" />
			<column name="i7_name" type="varchar" decimal="0" jt="12" />
			<column name="i7_bases" type="varchar" decimal="0" jt="12" />
			<column name="i7_row" type="integer" length="10" decimal="0" jt="4" />
			<column name="i7_col" type="integer" length="10" decimal="0" jt="4" />
			<column name="i5_name" type="varchar" decimal="0" jt="12" />
			<column name="i5_bases" type="varchar" decimal="0" jt="12" />
			<column name="i5_row" type="integer" length="10" decimal="0" jt="4" />
			<column name="i5_col" type="integer" length="10" decimal="0" jt="4" />
			<column name="shotgun_index_tech_id" type="bigint" length="19" decimal="0" jt="-5" />
			<index name="idx_shotgun_index" unique="PRIMARY_KEY" >
				<column name="shotgun_index_id" />
			</index>
			<index name="idx_shotgun_index_0" unique="NORMAL" >
				<column name="shotgun_index_tech_id" />
			</index>
			<fk name="fk_shotgun_index_shotgun_index_tech" to_schema="pm" to_table="shotgun_index_tech" >
				<fk_column name="shotgun_index_tech_id" pk="shotgun_index_tech_id" />
			</fk>
		</table>
		<table name="shotgun_index_aliquot" >
			<column name="shotgun_index_aliquot_id" type="bigserial" length="19" decimal="0" jt="-5" mandatory="y" />
			<column name="name" type="varchar" decimal="0" jt="12" mandatory="y" />
			<column name="notes" type="varchar" decimal="0" jt="12" />
			<column name="limit_freeze_thaw_cycles" type="bigint" length="19" decimal="0" jt="-5" mandatory="y" />
			<index name="pk_index_aliquot" unique="PRIMARY_KEY" >
				<column name="shotgun_index_aliquot_id" />
			</index>
			<index name="idx_index_aliquot" unique="UNIQUE" >
				<column name="name" />
			</index>
		</table>
		<table name="shotgun_index_tech" >
			<column name="shotgun_index_tech_id" type="bigserial" length="19" decimal="0" jt="-5" mandatory="y" />
			<column name="name" type="varchar" length="100" decimal="0" jt="12" />
			<column name="dual_index" type="bool" length="1" decimal="0" jt="-7" />
			<column name="i5_i7_sameplate" type="bool" length="1" decimal="0" jt="-7" />
			<column name="last_index_idx" type="integer" length="10" decimal="0" jt="4" />
			<index name="pk_shotgun_index_tech" unique="PRIMARY_KEY" >
				<column name="shotgun_index_tech_id" />
			</index>
		</table>
		<table name="shotgun_library_prep_kit" >
			<column name="shotgun_library_prep_kit_id" type="bigserial" length="19" decimal="0" jt="-5" mandatory="y" />
			<column name="name" type="varchar" decimal="0" jt="12" mandatory="y" />
			<column name="notes" type="varchar" decimal="0" jt="12" />
			<index name="pk_shotgun_library_prep_kit" unique="PRIMARY_KEY" >
				<column name="shotgun_library_prep_kit_id" />
			</index>
			<index name="idx_shotgun_library_prep_kit" unique="UNIQUE" >
				<column name="name" />
			</index>
		</table>
		<table name="shotgun_normalized_plate" >
			<column name="shotgun_normalized_plate_id" type="bigserial" length="19" decimal="0" jt="-5" mandatory="y" />
			<column name="shotgun_plate_id" type="bigint" length="19" decimal="0" jt="-5" mandatory="y" />
			<column name="created_on" type="timestamp" length="29" decimal="6" jt="93" mandatory="y" />
			<column name="email" type="varchar" decimal="0" jt="12" mandatory="y" />
			<column name="echo_id" type="bigint" length="19" decimal="0" jt="-5" mandatory="y" />
			<column name="lp_date" type="timestamp" length="29" decimal="6" jt="93" />
			<column name="lp_email" type="varchar" decimal="0" jt="12" />
			<column name="mosquito" type="bigint" length="19" decimal="0" jt="-5" />
			<column name="shotgun_library_prep_kit_id" type="bigint" length="19" decimal="0" jt="-5" />
			<column name="shotgun_adapter_aliquot_id" type="bigint" length="19" decimal="0" jt="-5" />
			<column name="qpcr_date" type="timestamp" length="29" decimal="6" jt="93" />
			<column name="qpcr_email" type="varchar" decimal="0" jt="12" />
			<column name="qpcr_std_ladder" type="varchar" decimal="0" jt="12" />
			<column name="qpcr_id" type="bigint" length="19" decimal="0" jt="-5" />
			<column name="discarded" type="bool" length="1" decimal="0" jt="-7" mandatory="y" >
				<defo>false</defo>
			</column>
			<index name="pk_shotgun_normalized_plate" unique="PRIMARY_KEY" >
				<column name="shotgun_normalized_plate_id" />
			</index>
			<index name="idx_shotgun_normalized_plate" unique="NORMAL" >
				<column name="shotgun_plate_id" />
			</index>
			<index name="idx_shotgun_normalized_plate_0" unique="NORMAL" >
				<column name="email" />
			</index>
			<index name="idx_shotgun_normalized_plate_1" unique="NORMAL" >
				<column name="echo_id" />
			</index>
			<index name="idx_shotgun_normalized_plate_2" unique="NORMAL" >
				<column name="lp_email" />
			</index>
			<index name="idx_shotgun_normalized_plate_3" unique="NORMAL" >
				<column name="mosquito" />
			</index>
			<index name="idx_shotgun_normalized_plate_4" unique="NORMAL" >
				<column name="shotgun_library_prep_kit_id" />
			</index>
			<index name="idx_shotgun_normalized_plate_5" unique="NORMAL" >
				<column name="shotgun_adapter_aliquot_id" />
			</index>
			<index name="idx_shotgun_normalized_plate_6" unique="NORMAL" >
				<column name="qpcr_email" />
			</index>
			<index name="idx_shotgun_normalized_plate_7" unique="NORMAL" >
				<column name="qpcr_id" />
			</index>
			<fk name="fk_shotgun_normalized_plate_echo" to_schema="pm" to_table="echo" >
				<fk_column name="echo_id" pk="echo_id" />
			</fk>
			<fk name="fk_shotgun_normalized_plate_mosquito" to_schema="pm" to_table="mosquito" >
				<fk_column name="mosquito" pk="mosquito_id" />
			</fk>
			<fk name="fk_shotgun_normalized_plate_qpcr" to_schema="pm" to_table="qpcr" >
				<fk_column name="qpcr_id" pk="qpcr_id" />
			</fk>
			<fk name="fk_shotgun_normalized_plate_adapter" to_schema="pm" to_table="shotgun_adapter_aliquot" >
				<fk_column name="shotgun_adapter_aliquot_id" pk="shotgun_adapter_aliquot_id" />
			</fk>
			<fk name="fk_shotgun_normalized_plate_kit" to_schema="pm" to_table="shotgun_library_prep_kit" >
				<fk_column name="shotgun_library_prep_kit_id" pk="shotgun_library_prep_kit_id" />
			</fk>
			<fk name="fk_shotgun_normalized_plate" to_schema="pm" to_table="shotgun_plate" >
				<fk_column name="shotgun_plate_id" pk="shotgun_plate_id" />
			</fk>
		</table>
		<table name="shotgun_normalized_plate_well_values" >
			<column name="shotgun_normalized_plate_id" type="bigint" length="19" decimal="0" jt="-5" mandatory="y" />
			<column name="row" type="integer" length="10" decimal="0" jt="4" mandatory="y" />
			<column name="col" type="integer" length="10" decimal="0" jt="4" mandatory="y" />
			<column name="sample_volume_nl" type="real" length="8" decimal="8" jt="7" mandatory="y" />
			<column name="water_volume_nl" type="real" length="8" decimal="8" jt="7" mandatory="y" />
			<column name="qpcr_concentration" type="real" length="8" decimal="8" jt="7" />
			<column name="qpcr_cp" type="real" length="8" decimal="8" jt="7" />
			<column name="shotgun_index_id" type="bigint" length="19" decimal="0" jt="-5" />
			<column name="shotgun_index_aliquot" type="bigint" length="19" decimal="0" jt="-5" />
			<index name="idx_shotgun_normalized_plate_well_values" unique="NORMAL" >
				<column name="shotgun_index_aliquot" />
			</index>
			<index name="idx_shotgun_normalized_plate_well_values_0" unique="NORMAL" >
				<column name="shotgun_index_id" />
			</index>
			<index name="idx_wgs_normalized_plate_well_values" unique="NORMAL" >
				<column name="shotgun_normalized_plate_id" />
			</index>
			<fk name="fk_shotgun_normalized_plate_well_values" to_schema="pm" to_table="shotgun_index" >
				<fk_column name="shotgun_index_id" pk="shotgun_index_id" />
			</fk>
			<fk name="fk_shotgun_normalized_plate_well_values_aliquot" to_schema="pm" to_table="shotgun_index_aliquot" >
				<fk_column name="shotgun_index_aliquot" pk="shotgun_index_aliquot_id" />
			</fk>
			<fk name="fk_wgs_normalized_plate_well_values" to_schema="pm" to_table="shotgun_normalized_plate" >
				<fk_column name="shotgun_normalized_plate_id" pk="shotgun_normalized_plate_id" />
			</fk>
		</table>
		<table name="shotgun_plate" >
			<column name="shotgun_plate_id" type="bigserial" length="19" decimal="0" jt="-5" mandatory="y" />
			<column name="name" type="varchar" decimal="0" jt="12" mandatory="y" />
			<column name="created_on" type="timestamp" length="29" decimal="6" jt="93" mandatory="y" />
			<column name="user_id" type="bigint" jt="-5" mandatory="y" />
			<column name="processing_robot_id" type="bigint" length="19" decimal="0" jt="-5" mandatory="y" />
			<column name="plate_type_id" type="bigint" length="19" decimal="0" jt="-5" mandatory="y" />
			<column name="volume" type="real" length="8" decimal="8" jt="7" mandatory="y" />
			<column name="dna_quantification_date" type="timestamp" length="29" decimal="6" jt="93" />
			<column name="dna_quantification_email" type="varchar" decimal="0" jt="12" />
			<column name="dna_quantification_volume" type="real" length="8" decimal="8" jt="7" />
			<column name="plate_reader_id" type="bigint" length="19" decimal="0" jt="-5" />
			<index name="pk_shotgun_plate" unique="PRIMARY_KEY" >
				<column name="shotgun_plate_id" />
			</index>
			<index name="idx_shotgun_plate" unique="UNIQUE" >
				<column name="name" />
			</index>
			<index name="idx_shotgun_plate_1" unique="NORMAL" >
				<column name="processing_robot_id" />
			</index>
			<index name="idx_shotgun_plate_2" unique="NORMAL" >
				<column name="plate_type_id" />
			</index>
			<index name="idx_shotgun_plate_3" unique="NORMAL" >
				<column name="dna_quantification_email" />
			</index>
			<index name="idx_shotgun_plate_4" unique="NORMAL" >
				<column name="plate_reader_id" />
			</index>
			<index name="idx_shotgun_plate_5" unique="NORMAL" >
				<column name="user_id" />
			</index>
			<fk name="fk_shotgun_plate_reader" to_schema="pm" to_table="plate_reader" >
				<fk_column name="plate_reader_id" pk="plate_reader_id" />
			</fk>
			<fk name="fk_shotgun_plate_type" to_schema="pm" to_table="plate_type" >
				<fk_column name="plate_type_id" pk="plate_type_id" />
			</fk>
			<fk name="fk_shotgun_plate_prc_robot" to_schema="pm" to_table="processing_robot" >
				<fk_column name="processing_robot_id" pk="processing_robot_id" />
			</fk>
			<fk name="fk_shotgun_plate_user" to_schema="users" to_table="user" >
				<fk_column name="user_id" pk="user_id" />
			</fk>
		</table>
		<table name="shotgun_plate_layout" >
			<column name="shotgun_plate_id" type="bigint" length="19" decimal="0" jt="-5" mandatory="y" />
			<column name="sample_id" type="varchar" decimal="0" jt="12" mandatory="y" />
			<column name="row" type="integer" length="10" decimal="0" jt="4" mandatory="y" />
			<column name="col" type="integer" length="10" decimal="0" jt="4" mandatory="y" />
			<column name="name" type="varchar" decimal="0" jt="12" />
			<column name="notes" type="varchar" decimal="0" jt="12" />
			<column name="dna_concentration" type="real" length="8" decimal="8" jt="7" />
			<index name="idx_shotgun_plate_layout" unique="NORMAL" >
				<column name="shotgun_plate_id" />
			</index>
			<index name="idx_shotgun_plate_layout_0" unique="NORMAL" >
				<column name="sample_id" />
			</index>
			<fk name="fk_shotgun_plate_layout_sample" to_schema="pm" to_table="sample" >
				<fk_column name="sample_id" pk="sample_id" />
			</fk>
			<fk name="fk_shotgun_plate_layout" to_schema="pm" to_table="shotgun_plate" >
				<fk_column name="shotgun_plate_id" pk="shotgun_plate_id" />
			</fk>
		</table>
		<table name="shotgun_pool" >
			<column name="shotgun_pool_id" type="bigserial" length="19" decimal="0" jt="-5" mandatory="y" />
			<column name="name" type="varchar" decimal="0" jt="12" mandatory="y" />
			<column name="echo_id" type="bigint" length="19" decimal="0" jt="-5" mandatory="y" />
			<column name="discarded" type="bool" length="1" decimal="0" jt="-7" mandatory="y" >
				<defo>false</defo>
			</column>
			<index name="pk_shotgun_pool" unique="PRIMARY_KEY" >
				<column name="shotgun_pool_id" />
			</index>
			<index name="idx_shotgun_pool" unique="UNIQUE" >
				<column name="name" />
			</index>
			<index name="idx_shotgun_pool_0" unique="NORMAL" >
				<column name="echo_id" />
			</index>
			<fk name="fk_shotgun_pool_echo" to_schema="pm" to_table="echo" >
				<fk_column name="echo_id" pk="echo_id" />
			</fk>
		</table>
		<table name="shotgun_pool_plate" >
			<column name="shotgun_pool_plate_id" type="bigserial" length="19" decimal="0" jt="-5" mandatory="y" />
			<column name="shotgun_pool_id" type="bigint" length="19" decimal="0" jt="-5" mandatory="y" />
			<column name="shotgun_normalized_plate_id" type="bigint" length="19" decimal="0" jt="-5" mandatory="y" />
			<index name="pk_shotgun_pool_plate" unique="PRIMARY_KEY" >
				<column name="shotgun_pool_plate_id" />
			</index>
			<index name="idx_shotgun_pool_plate" unique="UNIQUE" >
				<column name="shotgun_pool_id" />
				<column name="shotgun_normalized_plate_id" />
			</index>
			<index name="idx_shotgun_pool_plate_0" unique="NORMAL" >
				<column name="shotgun_pool_id" />
			</index>
			<index name="idx_shotgun_pool_plate_1" unique="NORMAL" >
				<column name="shotgun_normalized_plate_id" />
			</index>
			<fk name="fk_shotgun_pool_plate" to_schema="pm" to_table="shotgun_normalized_plate" >
				<fk_column name="shotgun_normalized_plate_id" pk="shotgun_normalized_plate_id" />
			</fk>
			<fk name="fk_shotgun_pool_plate_shotgun_pool" to_schema="pm" to_table="shotgun_pool" >
				<fk_column name="shotgun_pool_id" pk="shotgun_pool_id" />
			</fk>
		</table>
		<table name="shotgun_pool_plate_well_values" >
			<column name="shotgun_pool_plate_id" type="bigint" length="19" decimal="0" jt="-5" mandatory="y" />
			<column name="row" type="integer" length="10" decimal="0" jt="4" mandatory="y" />
			<column name="col" type="integer" length="10" decimal="0" jt="4" mandatory="y" />
			<column name="sample_volume_nl" type="real" length="8" decimal="8" jt="7" mandatory="y" />
			<index name="idx_shotgun_pool_plate_well_values" unique="NORMAL" >
				<column name="shotgun_pool_plate_id" />
			</index>
			<fk name="fk_shotgun_pool_plate_well_values" to_schema="pm" to_table="shotgun_pool_plate" >
				<fk_column name="shotgun_pool_plate_id" pk="shotgun_pool_plate_id" />
			</fk>
		</table>
		<table name="study" >
			<column name="study_id" type="bigint" length="19" decimal="0" jt="-5" mandatory="y" />
			<column name="title" type="varchar" decimal="0" jt="12" mandatory="y" />
			<column name="alias" type="varchar" decimal="0" jt="12" mandatory="y" />
			<column name="jira_id" type="varchar" decimal="0" jt="12" mandatory="y" />
			<index name="pk_study" unique="PRIMARY_KEY" >
				<column name="study_id" />
			</index>
			<index name="uq_jira_id" unique="UNIQUE" >
				<column name="jira_id" />
			</index>
			<index name="uq_study_title" unique="UNIQUE" >
				<column name="title" />
			</index>
		</table>
		<table name="study_sample" >
			<column name="study_id" type="bigint" length="19" decimal="0" jt="-5" mandatory="y" />
			<column name="sample_id" type="varchar" decimal="0" jt="12" mandatory="y" />
			<index name="idx_study_sample_sample_id" unique="NORMAL" >
				<column name="sample_id" />
			</index>
			<index name="idx_study_sample_study_id" unique="NORMAL" >
				<column name="study_id" />
			</index>
			<fk name="fk_study_sample_sample_id" to_schema="pm" to_table="sample" >
				<fk_column name="sample_id" pk="sample_id" />
			</fk>
			<fk name="fk_study_sample_study_id" to_schema="pm" to_table="study" >
				<fk_column name="study_id" pk="study_id" />
			</fk>
		</table>
		<table name="targeted_plate" >
			<column name="targeted_plate_id" type="bigserial" length="19" decimal="0" jt="-5" mandatory="y" />
			<column name="name" type="varchar" decimal="0" jt="12" mandatory="y" />
			<column name="created_on" type="timestamp" length="29" decimal="6" jt="93" mandatory="y" />
			<column name="user_id" type="bigint" jt="-5" mandatory="y" />
			<column name="dna_plate_id" type="bigint" length="19" decimal="0" jt="-5" mandatory="y" />
			<column name="targeted_primer_plate_id" type="bigint" length="19" decimal="0" jt="-5" mandatory="y" />
			<column name="master_mix_lot_id" type="bigint" length="19" decimal="0" jt="-5" mandatory="y" />
			<column name="tm300_8_tool_id" type="bigint" length="19" decimal="0" jt="-5" mandatory="y" />
			<column name="tm50_8_tool_id" type="bigint" length="19" decimal="0" jt="-5" mandatory="y" />
			<column name="water_lot_id" type="bigint" length="19" decimal="0" jt="-5" mandatory="y" />
			<column name="processing_robot_id" type="bigint" length="19" decimal="0" jt="-5" mandatory="y" />
			<column name="discarded" type="bool" length="1" decimal="0" jt="-7" mandatory="y" >
				<defo>false</defo>
			</column>
			<index name="pk_targeted_plate" unique="PRIMARY_KEY" >
				<column name="targeted_plate_id" />
			</index>
			<index name="idx_targeted_plate" unique="UNIQUE" >
				<column name="name" />
			</index>
			<index name="idx_targeted_plate_1" unique="NORMAL" >
				<column name="dna_plate_id" />
			</index>
			<index name="idx_targeted_plate_2" unique="NORMAL" >
				<column name="targeted_primer_plate_id" />
			</index>
			<index name="idx_targeted_plate_3" unique="NORMAL" >
				<column name="master_mix_lot_id" />
			</index>
			<index name="idx_targeted_plate_4" unique="NORMAL" >
				<column name="tm300_8_tool_id" />
			</index>
			<index name="idx_targeted_plate_5" unique="NORMAL" >
				<column name="tm50_8_tool_id" />
			</index>
			<index name="idx_targeted_plate_6" unique="NORMAL" >
				<column name="water_lot_id" />
			</index>
			<index name="idx_targeted_plate_7" unique="NORMAL" >
				<column name="processing_robot_id" />
			</index>
			<index name="idx_targeted_plate_8" unique="NORMAL" >
				<column name="user_id" />
			</index>
			<fk name="fk_targeted_plate_dna_plate" to_schema="pm" to_table="dna_plate" >
				<fk_column name="dna_plate_id" pk="dna_plate_id" />
			</fk>
			<fk name="fk_target_gene_master_mix" to_schema="pm" to_table="master_mix_lot" >
				<fk_column name="master_mix_lot_id" pk="master_mix_lot_id" />
			</fk>
			<fk name="fk_targeted_plate_robot" to_schema="pm" to_table="processing_robot" >
				<fk_column name="processing_robot_id" pk="processing_robot_id" />
			</fk>
			<fk name="fk_target_gene_tm300_tool" to_schema="pm" to_table="tm300_8_tool" >
				<fk_column name="tm300_8_tool_id" pk="tm300_8_tool_id" />
			</fk>
			<fk name="fk_targeted_plate_tm50_8_tool" to_schema="pm" to_table="tm50_8_tool" >
				<fk_column name="tm50_8_tool_id" pk="tm50_8_tool_id" />
			</fk>
			<fk name="fk_targeted_plate_water_lot" to_schema="pm" to_table="water_lot" >
				<fk_column name="water_lot_id" pk="water_lot_id" />
			</fk>
			<fk name="fk_target_gene_barcode" to_schema="pm" to_table="targeted_primer_plate" >
				<fk_column name="targeted_primer_plate_id" pk="targeted_primer_plate_id" />
			</fk>
			<fk name="user_id" to_schema="users" to_table="user" >
				<fk_column name="user_id" pk="user_id" />
			</fk>
		</table>
		<table name="targeted_plate_well_values" >
			<column name="targeted_plate_id" type="bigint" length="19" decimal="0" jt="-5" />
			<column name="row" type="integer" length="10" decimal="0" jt="4" mandatory="y" />
			<column name="col" type="integer" length="10" decimal="0" jt="4" mandatory="y" />
			<column name="raw_concentration" type="real" length="8" decimal="8" jt="7" mandatory="y" />
			<column name="mod_concentration" type="real" length="8" decimal="8" jt="7" />
			<index name="idx_targeted_plate_well_values" unique="NORMAL" >
				<column name="targeted_plate_id" />
			</index>
			<fk name="fk_fadfasf_targeted_plate" to_schema="pm" to_table="targeted_plate" >
				<fk_column name="targeted_plate_id" pk="targeted_plate_id" />
			</fk>
		</table>
		<table name="targeted_pool" >
			<column name="targeted_pool_id" type="bigserial" length="19" decimal="0" jt="-5" mandatory="y" />
			<column name="name" type="varchar" decimal="0" jt="12" mandatory="y" />
			<column name="targeted_plate_id" type="bigint" length="19" decimal="0" jt="-5" mandatory="y" />
			<column name="volume" type="real" length="8" decimal="8" jt="7" mandatory="y" />
			<column name="discarded" type="bool" length="1" decimal="0" jt="-7" mandatory="y" >
				<defo>false</defo>
			</column>
			<index name="pk_targeted_pool" unique="PRIMARY_KEY" >
				<column name="targeted_pool_id" />
			</index>
			<index name="idx_targeted_pool" unique="UNIQUE" >
				<column name="name" />
			</index>
			<index name="idx_target_gene_pool_0" unique="NORMAL" >
				<column name="targeted_plate_id" />
			</index>
			<fk name="fk_target_gene_pool" to_schema="pm" to_table="targeted_plate" >
				<fk_column name="targeted_plate_id" pk="targeted_plate_id" />
			</fk>
		</table>
		<table name="targeted_primer_plate" >
			<column name="targeted_primer_plate_id" type="bigserial" length="19" decimal="0" jt="-5" mandatory="y" />
			<column name="name" type="varchar" decimal="0" jt="12" mandatory="y" />
			<column name="plate_type_id" type="bigint" length="19" decimal="0" jt="-5" mandatory="y" />
			<column name="notes" type="varchar" decimal="0" jt="12" />
			<column name="linker_primer_sequence" type="varchar" decimal="0" jt="12" mandatory="y" />
			<column name="target_gene" type="&quot;pm&quot;.&quot;target_region&quot;" decimal="0" jt="12" mandatory="y" />
			<column name="target_subfragment" type="&quot;pm&quot;.&quot;target_subfragment&quot;" decimal="0" jt="12" mandatory="y" />
			<index name="pk_targeted_primer_plate" unique="PRIMARY_KEY" >
				<column name="targeted_primer_plate_id" />
			</index>
			<index name="uq_targeted_primer_plate_name" unique="UNIQUE" >
				<column name="name" />
			</index>
			<index name="idx_targeted_primer_plate_plate_type_id" unique="NORMAL" >
				<column name="plate_type_id" />
			</index>
			<fk name="fk_template_plate_type_id" to_schema="pm" to_table="plate_type" >
				<fk_column name="plate_type_id" pk="plate_type_id" />
			</fk>
		</table>
		<table name="targeted_primer_plate_layout" >
			<column name="targeted_primer_plate_id" type="bigint" length="19" decimal="0" jt="-5" mandatory="y" />
			<column name="col" type="smallint" length="5" decimal="0" jt="5" mandatory="y" />
			<column name="row" type="smallint" length="5" decimal="0" jt="5" mandatory="y" />
			<column name="barcode_sequence" type="varchar" decimal="0" jt="12" mandatory="y" />
			<index name="idx_targeted_primer_plate_layout_targeted_primer_plate_id" unique="NORMAL" >
				<column name="targeted_primer_plate_id" />
			</index>
			<fk name="fk_template_barcode_seq_template_id" to_schema="pm" to_table="targeted_primer_plate" >
				<fk_column name="targeted_primer_plate_id" pk="targeted_primer_plate_id" />
			</fk>
		</table>
		<table name="tm300_8_tool" >
			<column name="tm300_8_tool_id" type="bigserial" length="19" decimal="0" jt="-5" mandatory="y" />
			<column name="name" type="varchar" decimal="0" jt="12" mandatory="y" />
			<column name="notes" type="varchar" decimal="0" jt="12" />
			<index name="pk_tm300_8_tool" unique="PRIMARY_KEY" >
				<column name="tm300_8_tool_id" />
			</index>
			<index name="uq_tm300_8_tool_name" unique="UNIQUE" >
				<column name="name" />
			</index>
		</table>
		<table name="tm50_8_tool" >
			<column name="tm50_8_tool_id" type="bigserial" length="19" decimal="0" jt="-5" mandatory="y" />
			<column name="name" type="varchar" decimal="0" jt="12" mandatory="y" />
			<column name="notes" type="varchar" decimal="0" jt="12" />
			<index name="pk_tm50_8_tool" unique="PRIMARY_KEY" >
				<column name="tm50_8_tool_id" />
			</index>
			<index name="uq_tm50_8_tool_name" unique="UNIQUE" >
				<column name="name" />
			</index>
		</table>
		<table name="water_lot" >
			<column name="water_lot_id" type="bigserial" length="19" decimal="0" jt="-5" mandatory="y" />
			<column name="name" type="varchar" decimal="0" jt="12" mandatory="y" />
			<column name="notes" type="varchar" decimal="0" jt="12" />
			<index name="pk_water_lot" unique="PRIMARY_KEY" >
				<column name="water_lot_id" />
			</index>
			<index name="uq_water_lot_name" unique="UNIQUE" >
				<column name="name" />
			</index>
		</table>
		<sequence name="dna_plate_dna_plate_id_seq" start="1" />
		<sequence name="dna_plate_dna_plate_id_seq1" start="1" />
		<sequence name="echo_echo_id_seq" start="1" />
		<sequence name="echo_echo_id_seq1" start="1" />
		<sequence name="extraction_kit_lot_extraction_kit_lot_id_seq" start="1" />
		<sequence name="extraction_kit_lot_extraction_kit_lot_id_seq1" start="1" />
		<sequence name="extraction_robot_extraction_robot_id_seq" start="1" />
		<sequence name="extraction_robot_extraction_robot_id_seq1" start="1" />
		<sequence name="extraction_tool_extraction_tool_id_seq" start="1" />
		<sequence name="extraction_tool_extraction_tool_id_seq1" start="1" />
		<sequence name="master_mix_lot_master_mix_lot_id_seq" start="1" />
		<sequence name="master_mix_lot_master_mix_lot_id_seq1" start="1" />
		<sequence name="mosquito_mosquito_id_seq" start="1" />
		<sequence name="mosquito_mosquito_id_seq1" start="1" />
		<sequence name="plate_reader_plate_reader_id_seq" start="1" />
		<sequence name="plate_reader_plate_reader_id_seq1" start="1" />
		<sequence name="plate_type_plate_type_id_seq" start="1" />
		<sequence name="plate_type_plate_type_id_seq1" start="1" />
		<sequence name="processing_robot_processing_robot_id_seq" start="1" />
		<sequence name="processing_robot_processing_robot_id_seq1" start="1" />
		<sequence name="qpcr_qpcr_id_seq" start="1" />
		<sequence name="qpcr_qpcr_id_seq1" start="1" />
		<sequence name="run_pool_run_pool_id_seq" start="1" />
		<sequence name="run_pool_run_pool_id_seq1" start="1" />
		<sequence name="sample_plate_sample_plate_id_seq" start="1" />
		<sequence name="sample_plate_sample_plate_id_seq1" start="1" />
		<sequence name="shotgun_adapter_aliquot_shotgun_adapter_aliquot_id_seq" start="1" />
		<sequence name="shotgun_adapter_aliquot_shotgun_adapter_aliquot_id_seq1" start="1" />
		<sequence name="shotgun_index_aliquot_shotgun_index_aliquot_id_seq" start="1" />
		<sequence name="shotgun_index_aliquot_shotgun_index_aliquot_id_seq1" start="1" />
		<sequence name="shotgun_index_shotgun_index_id_seq" start="1" />
		<sequence name="shotgun_index_shotgun_index_id_seq1" start="1" />
		<sequence name="shotgun_index_tech_shotgun_index_tech_id_seq" start="1" />
		<sequence name="shotgun_index_tech_shotgun_index_tech_id_seq1" start="1" />
		<sequence name="shotgun_library_prep_kit_shotgun_library_prep_kit_id_seq" start="1" />
		<sequence name="shotgun_library_prep_kit_shotgun_library_prep_kit_id_seq1" start="1" />
		<sequence name="shotgun_normalized_plate_shotgun_normalized_plate_id_seq" start="1" />
		<sequence name="shotgun_normalized_plate_shotgun_normalized_plate_id_seq1" start="1" />
		<sequence name="shotgun_plate_shotgun_plate_id_seq" start="1" />
		<sequence name="shotgun_plate_shotgun_plate_id_seq1" start="1" />
		<sequence name="shotgun_pool_plate_shotgun_pool_plate_id_seq" start="1" />
		<sequence name="shotgun_pool_plate_shotgun_pool_plate_id_seq1" start="1" />
		<sequence name="shotgun_pool_shotgun_pool_id_seq" start="1" />
		<sequence name="shotgun_pool_shotgun_pool_id_seq1" start="1" />
		<sequence name="targeted_plate_targeted_plate_id_seq" start="1" />
		<sequence name="targeted_plate_targeted_plate_id_seq1" start="1" />
		<sequence name="targeted_pool_targeted_pool_id_seq" start="1" />
		<sequence name="targeted_pool_targeted_pool_id_seq1" start="1" />
		<sequence name="targeted_primer_plate_targeted_primer_plate_id_seq" start="1" />
		<sequence name="targeted_primer_plate_targeted_primer_plate_id_seq1" start="1" />
		<sequence name="tm300_8_tool_tm300_8_tool_id_seq" start="1" />
		<sequence name="tm300_8_tool_tm300_8_tool_id_seq1" start="1" />
		<sequence name="tm50_8_tool_tm50_8_tool_id_seq" start="1" />
		<sequence name="tm50_8_tool_tm50_8_tool_id_seq1" start="1" />
		<sequence name="water_lot_water_lot_id_seq" start="1" />
		<sequence name="water_lot_water_lot_id_seq1" start="1" />
		<function name="plate_sample_test" id="Function_34f84be1" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pm.plate_sample_test()
 RETURNS trigger
 LANGUAGE plpgsql
AS $function$
BEGIN
    -- Check that the sample being plated actually belongs to a study
    -- linked to the plate
    IF (SELECT study_id FROM pm.study_sample WHERE sample_id = NEW.sample_id) NOT IN (SELECT DISTINCT study_id FROM pm.sample_plate_study WHERE sample_plate_id = NEW.sample_plate_id) THEN
        RAISE EXCEPTION 'Sample % does not belong to a study being plated in %', NEW.sample_id, NEW.sample_plate_id;
    END IF;
    RETURN NEW;
END;
$function$
]]></string>
		</function>
	</schema>
	<schema name="public" catalogname="labman" schemaname="public" >
		<table name="settings" >
			<column name="test" type="bool" jt="-7" mandatory="y" >
				<defo>&#039;True&#039;</defo>
			</column>
			<column name="current_patch" type="varchar" jt="12" mandatory="y" >
				<defo>&#039;unpatched&#039;</defo>
			</column>
		</table>
	</schema>
	<schema name="shotgun" catalogname="labman" schemaname="shotgun" />
	<schema name="study" catalogname="labman" schemaname="study" >
		<table name="sample" >
			<column name="sample_id" type="varchar" decimal="0" jt="12" mandatory="y" />
			<column name="physical_name" type="varchar" decimal="0" jt="12" />
			<column name="is_blank" type="bool" length="1" decimal="0" jt="-7" mandatory="y" >
				<defo>false</defo>
			</column>
			<column name="details" type="varchar" decimal="0" jt="12" />
			<column name="notes" type="varchar" decimal="0" jt="12" />
			<index name="sample_pkey" unique="PRIMARY_KEY" >
				<column name="sample_id" />
			</index>
		</table>
		<table name="service" >
			<column name="service_id" type="bigserial" length="19" decimal="0" jt="-5" mandatory="y" />
			<column name="name" type="varchar" decimal="0" jt="12" mandatory="y" />
			<column name="url" type="varchar" decimal="0" jt="12" mandatory="y" />
			<column name="credentials" type="json" decimal="0" jt="2000" mandatory="y" />
			<index name="service_pkey" unique="PRIMARY_KEY" >
				<column name="service_id" />
			</index>
		</table>
		<table name="study" >
			<column name="study_id" type="bigserial" length="19" decimal="0" jt="-5" mandatory="y" />
			<column name="title" type="varchar" decimal="0" jt="12" mandatory="y" />
			<column name="creator" type="varchar" decimal="0" jt="12" mandatory="y" />
			<column name="created_timestamp" type="timestamp" length="29" decimal="6" jt="93" mandatory="y" />
			<column name="qiita_study_id" type="bigint" length="19" decimal="0" jt="-5" />
			<column name="jira_key" type="varchar" decimal="0" jt="12" />
			<index name="study_pkey" unique="PRIMARY_KEY" >
				<column name="study_id" />
			</index>
		</table>
		<table name="study_communication_backlog" >
			<comment>field status is enum field of pending or error</comment>
			<column name="study_id" type="bigserial" length="19" decimal="0" jt="-5" mandatory="y" />
			<column name="service_id" type="bigserial" length="19" decimal="0" jt="-5" mandatory="y" />
			<column name="action" type="varchar" decimal="0" jt="12" mandatory="y" />
			<column name="attributes" type="json" decimal="0" jt="2000" mandatory="y" />
			<column name="status" type="varchar" decimal="0" jt="12" mandatory="y" />
			<column name="error_message" type="varchar" decimal="0" jt="12" />
			<fk name="service_id" to_schema="study" to_table="service" >
				<fk_column name="service_id" pk="service_id" />
			</fk>
			<fk name="study_id" to_schema="study" to_table="study" >
				<fk_column name="study_id" pk="study_id" />
			</fk>
		</table>
		<table name="study_sample" >
			<column name="study_id" type="bigserial" length="19" decimal="0" jt="-5" mandatory="y" />
			<column name="sample_id" type="varchar" decimal="0" jt="12" mandatory="y" />
			<fk name="sample_id" to_schema="study" to_table="sample" >
				<fk_column name="sample_id" pk="sample_id" />
			</fk>
			<fk name="study_id" to_schema="study" to_table="study" >
				<fk_column name="study_id" pk="study_id" />
			</fk>
		</table>
		<sequence name="service_service_id_seq" start="1" />
		<sequence name="study_communication_backlog_service_id_seq" start="1" />
		<sequence name="study_communication_backlog_study_id_seq" start="1" />
		<sequence name="study_sample_study_id_seq" start="1" />
		<sequence name="study_study_id_seq" start="1" />
	</schema>
	<schema name="tgene" catalogname="labman" schemaname="tgene" />
	<schema name="users" catalogname="labman" schemaname="users" >
		<table name="access_level" >
			<column name="access_level_id" type="bigserial" length="19" decimal="0" jt="-5" mandatory="y" />
			<column name="access_level" type="varchar" decimal="0" jt="12" mandatory="y" />
			<column name="description" type="varchar" decimal="0" jt="12" mandatory="y" />
			<index name="access_level_pkey" unique="PRIMARY_KEY" >
				<column name="access_level_id" />
			</index>
		</table>
		<table name="user" >
			<column name="user_id" type="bigserial" length="19" decimal="0" jt="-5" mandatory="y" />
			<column name="name" type="varchar" decimal="0" jt="12" mandatory="y" />
			<column name="email" type="varchar" decimal="0" jt="12" mandatory="y" />
			<column name="password" type="bytea" jt="-2" mandatory="y" />
			<index name="user_pkey" unique="PRIMARY_KEY" >
				<column name="user_id" />
			</index>
		</table>
		<table name="user_access_level" >
			<column name="access_level_id" type="integer" length="10" decimal="0" jt="4" mandatory="y" />
			<column name="user_id" type="integer" length="10" decimal="0" jt="4" mandatory="y" />
			<index name="user_access_level_pkey" unique="PRIMARY_KEY" >
				<column name="access_level_id" />
			</index>
			<fk name="access_level_id" to_schema="users" to_table="access_level" >
				<fk_column name="access_level_id" pk="access_level_id" />
			</fk>
			<fk name="user_id" to_schema="users" to_table="user" >
				<fk_column name="user_id" pk="user_id" />
			</fk>
		</table>
		<sequence name="access_level_access_level_id_seq" start="1" />
		<sequence name="user_user_id_seq" start="1" />
	</schema>
	<connector name="ag_test" database="PostgreSQL" driver_class="org.postgresql.Driver" driver_jar="postgresql-9.2-1003.jdbc3.jar" host="localhost" port="5432" instance="ag_test" user="postgres" schema_mapping="" />
	<connector name="lab_manager" database="PostgreSQL" driver_class="org.postgresql.Driver" driver_jar="postgresql-9.2-1003.jdbc3.jar" host="localhost" port="5432" instance="labman" user="postgres" schema_mapping="" />
	<layout id="Layout_8e78843" name="pm" >
		<entity schema="pm" name="condensed_plates" color="c8f5bf" x="900" y="1020" />
		<entity schema="pm" name="dna_plate" color="bfd4f5" x="165" y="1020" />
		<entity schema="pm" name="dna_plate_well_values" color="bfd4f5" x="390" y="1275" />
		<entity schema="pm" name="echo" color="f5ddbf" x="1575" y="255" />
		<entity schema="pm" name="extraction_kit_lot" color="bfd4f5" x="390" y="1020" />
		<entity schema="pm" name="extraction_robot" color="d2bff5" x="1605" y="480" />
		<entity schema="pm" name="extraction_tool" color="bfd4f5" x="165" y="1275" />
		<entity schema="pm" name="master_mix_lot" color="bfbff5" x="885" y="780" />
		<entity schema="pm" name="mosquito" color="bfd4f5" x="1395" y="480" />
		<entity schema="pm" name="plate_reader" color="c8f5bf" x="900" y="1305" />
		<entity schema="pm" name="plate_type" color="bfbff5" x="420" y="480" />
		<entity schema="pm" name="processing_robot" color="bfbff5" x="885" y="480" />
		<entity schema="pm" name="protocol_run_pool" color="c8f5bf" x="645" y="75" />
		<entity schema="pm" name="qpcr" color="bfd4f5" x="1395" y="825" />
		<entity schema="pm" name="run_pool" color="c8f5bf" x="645" y="255" />
		<entity schema="pm" name="sample" color="f5ddbf" x="255" y="45" />
		<entity schema="pm" name="sample_plate" color="bfbff5" x="225" y="480" />
		<entity schema="pm" name="sample_plate_layout" color="f5ddbf" x="420" y="45" />
		<entity schema="pm" name="sample_plate_study" color="bfbff5" x="420" y="705" />
		<entity schema="pm" name="shotgun_adapter_aliquot" color="bfd4f5" x="1125" y="825" />
		<entity schema="pm" name="shotgun_index" color="d2bff5" x="1665" y="1515" />
		<entity schema="pm" name="shotgun_index_aliquot" color="d2bff5" x="1125" y="1770" />
		<entity schema="pm" name="shotgun_index_tech" color="d2bff5" x="1365" y="1770" />
		<entity schema="pm" name="shotgun_library_prep_kit" color="bfd4f5" x="1770" y="1050" />
		<entity schema="pm" name="shotgun_normalized_plate" color="bfd4f5" x="1125" y="480" />
		<entity schema="pm" name="shotgun_normalized_plate_well_values" color="d2bff5" x="1365" y="1515" />
		<entity schema="pm" name="shotgun_plate" color="c8f5bf" x="645" y="1020" />
		<entity schema="pm" name="shotgun_plate_layout" color="f5ddbf" x="45" y="210" />
		<entity schema="pm" name="shotgun_pool" color="f5ddbf" x="1380" y="75" />
		<entity schema="pm" name="shotgun_pool_plate" color="f5ddbf" x="1575" y="75" />
		<entity schema="pm" name="shotgun_pool_plate_well_values" color="f5ddbf" x="1125" y="255" />
		<entity schema="pm" name="study" color="bfbff5" x="225" y="705" />
		<entity schema="pm" name="study_sample" color="f5ddbf" x="255" y="210" />
		<entity schema="pm" name="targeted_plate" color="bfbff5" x="645" y="480" />
		<entity schema="pm" name="targeted_plate_well_values" color="bfbff5" x="645" y="780" />
		<entity schema="pm" name="targeted_pool" color="c8f5bf" x="825" y="75" />
		<entity schema="pm" name="targeted_primer_plate_layout" color="d2bff5" x="1815" y="645" />
		<entity schema="pm" name="tm300_8_tool" color="bfd4f5" x="1770" y="1215" />
		<entity schema="pm" name="tm50_8_tool" color="d2bff5" x="1815" y="480" />
		<entity schema="pm" name="water_lot" color="bfd4f5" x="1605" y="1050" />
	</layout>
	<layout id="Layout_342e9878" name="pm Layout with Groups" confirmed="y" >
		<entity schema="pm" name="condensed_plates" color="c8f5bf" x="900" y="1020" />
		<entity schema="pm" name="dna_plate" color="bfd4f5" x="165" y="1020" />
		<entity schema="pm" name="dna_plate_well_values" color="bfd4f5" x="390" y="1275" />
		<entity schema="pm" name="echo" color="f5ddbf" x="1575" y="255" />
		<entity schema="pm" name="extraction_kit_lot" color="bfd4f5" x="390" y="1020" />
		<entity schema="pm" name="extraction_robot" color="d2bff5" x="1605" y="480" />
		<entity schema="pm" name="extraction_tool" color="bfd4f5" x="165" y="1275" />
		<entity schema="pm" name="master_mix_lot" color="bfbff5" x="885" y="780" />
		<entity schema="pm" name="mosquito" color="bfd4f5" x="1395" y="480" />
		<entity schema="pm" name="plate_reader" color="c8f5bf" x="900" y="1320" />
		<entity schema="pm" name="plate_type" color="bfbff5" x="420" y="480" />
		<entity schema="pm" name="processing_robot" color="bfbff5" x="885" y="480" />
		<entity schema="pm" name="protocol_run_pool" color="c8f5bf" x="645" y="75" />
		<entity schema="pm" name="qpcr" color="bfd4f5" x="1395" y="840" />
		<entity schema="pm" name="run_pool" color="c8f5bf" x="645" y="255" />
		<entity schema="pm" name="sample" color="f5ddbf" x="255" y="45" />
		<entity schema="pm" name="sample_plate" color="bfbff5" x="225" y="480" />
		<entity schema="pm" name="sample_plate_layout" color="f5ddbf" x="420" y="45" />
		<entity schema="pm" name="sample_plate_study" color="bfbff5" x="420" y="705" />
		<entity schema="pm" name="shotgun_adapter_aliquot" color="bfd4f5" x="1125" y="840" />
		<entity schema="pm" name="shotgun_index" color="d2bff5" x="1665" y="1515" />
		<entity schema="pm" name="shotgun_index_aliquot" color="d2bff5" x="1125" y="1785" />
		<entity schema="pm" name="shotgun_index_tech" color="d2bff5" x="1365" y="1785" />
		<entity schema="pm" name="shotgun_library_prep_kit" color="bfd4f5" x="1770" y="1065" />
		<entity schema="pm" name="shotgun_normalized_plate_well_values" color="d2bff5" x="1365" y="1515" />
		<entity schema="pm" name="shotgun_plate" color="c8f5bf" x="645" y="1020" />
		<entity schema="pm" name="shotgun_plate_layout" color="f5ddbf" x="45" y="210" />
		<entity schema="pm" name="shotgun_pool" color="f5ddbf" x="1380" y="75" />
		<entity schema="pm" name="shotgun_pool_plate" color="f5ddbf" x="1575" y="75" />
		<entity schema="pm" name="shotgun_pool_plate_well_values" color="f5ddbf" x="1125" y="255" />
		<entity schema="pm" name="study" color="bfbff5" x="225" y="705" />
		<entity schema="pm" name="study_sample" color="f5ddbf" x="255" y="210" />
		<entity schema="pm" name="targeted_plate" color="bfbff5" x="645" y="480" />
		<entity schema="pm" name="targeted_plate_well_values" color="bfbff5" x="645" y="780" />
		<entity schema="pm" name="targeted_pool" color="c8f5bf" x="825" y="75" />
		<entity schema="pm" name="targeted_primer_plate_layout" color="d2bff5" x="1815" y="645" />
		<entity schema="pm" name="tm300_8_tool" color="bfd4f5" x="1770" y="1215" />
		<entity schema="pm" name="tm50_8_tool" color="d2bff5" x="1815" y="480" />
		<entity schema="pm" name="water_lot" color="bfd4f5" x="1605" y="1065" />
		<entity schema="pm" name="shotgun_normalized_plate" color="bfd4f5" x="1125" y="480" />
		<group name="targeted_plate" color="ececf7" >
			<entity schema="pm" name="targeted_plate" />
			<entity schema="pm" name="processing_robot" />
			<entity schema="pm" name="master_mix_lot" />
			<entity schema="pm" name="targeted_plate_well_values" />
		</group>
		<group name="shotgun_normalized_plate" color="ecf0f7" >
			<entity schema="pm" name="shotgun_normalized_plate" />
			<entity schema="pm" name="mosquito" />
			<entity schema="pm" name="qpcr" />
			<entity schema="pm" name="shotgun_adapter_aliquot" />
		</group>
		<group name="shotgun_plate" color="eef7ec" >
			<entity schema="pm" name="shotgun_plate" />
			<entity schema="pm" name="condensed_plates" />
			<entity schema="pm" name="plate_reader" />
		</group>
		<group name="dna_plate" color="ecf0f7" >
			<entity schema="pm" name="dna_plate" />
			<entity schema="pm" name="extraction_kit_lot" />
			<entity schema="pm" name="dna_plate_well_values" />
			<entity schema="pm" name="extraction_tool" />
		</group>
		<group name="sample_plate" color="ececf7" >
			<entity schema="pm" name="sample_plate" />
			<entity schema="pm" name="plate_type" />
			<entity schema="pm" name="sample_plate_study" />
			<entity schema="pm" name="study" />
		</group>
		<group name="sample" color="f7f3ec" >
			<entity schema="pm" name="sample" />
			<entity schema="pm" name="sample_plate_layout" />
			<entity schema="pm" name="shotgun_plate_layout" />
			<entity schema="pm" name="study_sample" />
		</group>
		<group name="protocol_run_pool" color="eef7ec" >
			<entity schema="pm" name="protocol_run_pool" />
			<entity schema="pm" name="targeted_pool" />
			<entity schema="pm" name="run_pool" />
		</group>
		<group name="shotgun_pool" color="f7f3ec" >
			<entity schema="pm" name="shotgun_pool" />
			<entity schema="pm" name="shotgun_pool_plate" />
			<entity schema="pm" name="echo" />
			<entity schema="pm" name="shotgun_pool_plate_well_values" />
		</group>
		<group name="extraction_robot" color="f0ecf7" >
			<entity schema="pm" name="extraction_robot" />
			<entity schema="pm" name="tm50_8_tool" />
			<entity schema="pm" name="targeted_primer_plate_layout" />
		</group>
		<group name="water_lot" color="ecf0f7" >
			<entity schema="pm" name="water_lot" />
			<entity schema="pm" name="shotgun_library_prep_kit" />
			<entity schema="pm" name="tm300_8_tool" />
		</group>
		<group name="shotgun_normalized_plate_well_values" color="f0ecf7" >
			<entity schema="pm" name="shotgun_normalized_plate_well_values" />
			<entity schema="pm" name="shotgun_index" />
			<entity schema="pm" name="shotgun_index_tech" />
			<entity schema="pm" name="shotgun_index_aliquot" />
		</group>
		<script name="Sql" id="Query_1feca705" >
			<string><![CDATA[CREATE TYPE pm.target_region AS ENUM ('16S', '18S', 'ITS');
CREATE TYPE pm.target_subfragment AS ENUM ('V4');

CREATE TYPE pm.seq_platform AS ENUM ('Illumina');
CREATE TYPE pm.seq_instrument_model AS ENUM ('MiSeq', 'HiSeq 2500', 'HiSeq 4000');

CREATE TYPE reagent_type AS ENUM ('MiSeq v3 150 cycle');
CREATE TYPE assay_type AS ENUM ('Kapa Hyper Plus', 'TrueSeq HT');

CREATE TABLE pm.targeted_primer_plate ( 
	targeted_primer_plate_id bigserial  NOT NULL,
	name                 varchar  NOT NULL,
	plate_type_id        bigint  NOT NULL,
	notes                varchar  ,
	linker_primer_sequence varchar  NOT NULL,
	target_gene          "pm"."target_region"  NOT NULL,
	target_subfragment   "pm"."target_subfragment"  NOT NULL,
	CONSTRAINT pk_targeted_primer_plate PRIMARY KEY ( targeted_primer_plate_id ),
	CONSTRAINT uq_targeted_primer_plate_name UNIQUE ( name ) 
 );

CREATE INDEX idx_targeted_primer_plate_plate_type_id ON pm.targeted_primer_plate ( plate_type_id );

ALTER TABLE pm.targeted_primer_plate ADD CONSTRAINT fk_template_plate_type_id FOREIGN KEY ( plate_type_id ) REFERENCES pm.plate_type( plate_type_id );]]></string>
		</script>
		<script name="targeted_primer_plate" id="Query_a092f1b" >
			<string><![CDATA[CREATE TABLE pm.targeted_primer_plate ( 
	targeted_primer_plate_id bigserial  NOT NULL,
	name                 varchar  NOT NULL,
	plate_type_id        bigint  NOT NULL,
	notes                varchar  ,
	linker_primer_sequence varchar  NOT NULL,
	target_gene          "pm"."target_region"  NOT NULL,
	target_subfragment   "pm"."target_subfragment"  NOT NULL,
	CONSTRAINT pk_targeted_primer_plate PRIMARY KEY ( targeted_primer_plate_id ),
	CONSTRAINT uq_targeted_primer_plate_name UNIQUE ( name ) 
 );

CREATE INDEX idx_targeted_primer_plate_plate_type_id ON pm.targeted_primer_plate ( plate_type_id );

ALTER TABLE pm.targeted_primer_plate ADD CONSTRAINT fk_template_plate_type_id FOREIGN KEY ( plate_type_id ) REFERENCES pm.plate_type( plate_type_id );

]]></string>
		</script>
	</layout>
	<layout id="Layout_3a424981" name="pm Layout with Relational Data Browse" >
		<entity schema="pm" name="condensed_plates" color="c8f5bf" x="735" y="1065" />
		<entity schema="pm" name="dna_plate_well_values" color="bfd4f5" x="1200" y="1320" />
		<entity schema="pm" name="echo" color="f5ddbf" x="795" y="135" />
		<entity schema="pm" name="extraction_robot" color="d2bff5" x="1875" y="510" />
		<entity schema="pm" name="extraction_tool" color="bfd4f5" x="975" y="1320" />
		<entity schema="pm" name="master_mix_lot" color="bfbff5" x="1215" y="825" />
		<entity schema="pm" name="mosquito" color="bfd4f5" x="1725" y="1065" />
		<entity schema="pm" name="plate_reader" color="c8f5bf" x="480" y="1350" />
		<entity schema="pm" name="processing_robot" color="bfbff5" x="1215" y="510" />
		<entity schema="pm" name="protocol_run_pool" color="c8f5bf" x="1455" y="105" />
		<entity schema="pm" name="qpcr" color="bfd4f5" x="1725" y="1410" />
		<entity schema="pm" name="run_pool" color="c8f5bf" x="1455" y="270" />
		<entity schema="pm" name="sample" color="f5ddbf" x="1650" y="510" />
		<entity schema="pm" name="sample_plate_layout" color="f5ddbf" x="1650" y="735" />
		<entity schema="pm" name="sample_plate_study" color="f5ddbf" x="1455" y="735" />
		<entity schema="pm" name="shotgun_adapter_aliquot" color="bfd4f5" x="1455" y="1410" />
		<entity schema="pm" name="shotgun_index" color="bfbff5" x="2475" y="1065" />
		<entity schema="pm" name="shotgun_index_aliquot" color="bfbff5" x="1935" y="1320" />
		<entity schema="pm" name="shotgun_index_tech" color="bfbff5" x="2175" y="1320" />
		<entity schema="pm" name="shotgun_library_prep_kit" color="d2bff5" x="690" y="510" />
		<entity schema="pm" name="shotgun_normalized_plate" color="bfd4f5" x="1455" y="1065" />
		<entity schema="pm" name="shotgun_normalized_plate_well_values" color="bfbff5" x="2175" y="1065" />
		<entity schema="pm" name="shotgun_plate_layout" color="c8f5bf" x="735" y="1350" />
		<entity schema="pm" name="shotgun_pool" color="c8f5bf" x="1650" y="105" />
		<entity schema="pm" name="shotgun_pool_plate" color="f5ddbf" x="525" y="135" />
		<entity schema="pm" name="shotgun_pool_plate_well_values" color="f5ddbf" x="525" y="285" />
		<entity schema="pm" name="study" color="f5ddbf" x="795" y="285" />
		<entity schema="pm" name="study_sample" color="d2bff5" x="525" y="510" />
		<entity schema="pm" name="targeted_pool" color="c8f5bf" x="1650" y="270" />
		<entity schema="pm" name="targeted_primer_plate_layout" color="d2bff5" x="2085" y="675" />
		<entity schema="pm" name="tm300_8_tool" color="d2bff5" x="330" y="660" />
		<entity schema="pm" name="tm50_8_tool" color="d2bff5" x="2085" y="510" />
		<entity schema="pm" name="water_lot" color="bfd4f5" x="1155" y="45" />
		<entity schema="pm" name="plate_type" color="bfd4f5" x="975" y="45" />
		<entity schema="pm" name="targeted_primer_plate" color="bfd4f5" x="1155" y="240" />
		<entity schema="pm" name="targeted_plate_well_values" color="bfbff5" x="975" y="825" />
		<entity schema="pm" name="extraction_kit_lot" color="bfd4f5" x="1260" y="1065" />
		<entity schema="study" name="service" color="c1d8ee" x="285" y="1080" />
		<entity schema="study" name="study_communication_backlog" color="c1d8ee" x="270" y="855" />
		<entity schema="study" name="study" color="c1d8ee" x="105" y="855" />
		<entity schema="study" name="study_sample" color="c1d8ee" x="135" y="1020" />
		<entity schema="study" name="sample" color="c1d8ee" x="105" y="1140" />
		<entity schema="users" name="user_access_level" color="c1d8ee" x="60" y="600" />
		<entity schema="users" name="access_level" color="c1d8ee" x="45" y="705" />
		<entity schema="pm" name="dna_plate" color="bfd4f5" x="975" y="1035" />
		<entity schema="pm" name="targeted_plate" color="bfbff5" x="975" y="510" />
		<entity schema="pm" name="sample_plate" color="f5ddbf" x="1455" y="510" />
		<entity schema="pm" name="shotgun_plate" color="c8f5bf" x="480" y="1065" />
		<entity schema="public" name="settings" color="b2cdf7" x="225" y="165" />
		<entity schema="users" name="user" color="c1d8ee" x="210" y="690" />
		<group name="targeted_plate" color="ececf7" >
			<entity schema="pm" name="targeted_plate" />
			<entity schema="pm" name="processing_robot" />
			<entity schema="pm" name="master_mix_lot" />
			<entity schema="pm" name="targeted_plate_well_values" />
		</group>
		<group name="sample_plate" color="f7f3ec" >
			<entity schema="pm" name="sample_plate" />
			<entity schema="pm" name="sample" />
			<entity schema="pm" name="sample_plate_layout" />
			<entity schema="pm" name="sample_plate_study" />
		</group>
		<group name="shotgun_normalized_plate" color="ecf0f7" >
			<entity schema="pm" name="shotgun_normalized_plate" />
			<entity schema="pm" name="mosquito" />
			<entity schema="pm" name="qpcr" />
			<entity schema="pm" name="shotgun_adapter_aliquot" />
		</group>
		<group name="shotgun_plate" color="eef7ec" >
			<entity schema="pm" name="shotgun_plate" />
			<entity schema="pm" name="condensed_plates" />
			<entity schema="pm" name="shotgun_plate_layout" />
			<entity schema="pm" name="plate_reader" />
		</group>
		<group name="dna_plate" color="ecf0f7" >
			<entity schema="pm" name="dna_plate" />
			<entity schema="pm" name="extraction_kit_lot" />
			<entity schema="pm" name="dna_plate_well_values" />
			<entity schema="pm" name="extraction_tool" />
		</group>
		<group name="study_sample" color="f0ecf7" >
			<entity schema="pm" name="study_sample" />
			<entity schema="pm" name="shotgun_library_prep_kit" />
			<entity schema="pm" name="tm300_8_tool" />
		</group>
		<group name="shotgun_pool_plate" color="f7f3ec" >
			<entity schema="pm" name="shotgun_pool_plate" />
			<entity schema="pm" name="echo" />
			<entity schema="pm" name="study" />
			<entity schema="pm" name="shotgun_pool_plate_well_values" />
		</group>
		<group name="plate_type" color="ecf0f7" >
			<entity schema="pm" name="plate_type" />
			<entity schema="pm" name="water_lot" />
			<entity schema="pm" name="targeted_primer_plate" />
		</group>
		<group name="protocol_run_pool" color="eef7ec" >
			<entity schema="pm" name="protocol_run_pool" />
			<entity schema="pm" name="shotgun_pool" />
			<entity schema="pm" name="targeted_pool" />
			<entity schema="pm" name="run_pool" />
		</group>
		<group name="extraction_robot" color="f0ecf7" >
			<entity schema="pm" name="extraction_robot" />
			<entity schema="pm" name="tm50_8_tool" />
			<entity schema="pm" name="targeted_primer_plate_layout" />
		</group>
		<group name="shotgun_normalized_plate_well_values" color="ececf7" >
			<entity schema="pm" name="shotgun_normalized_plate_well_values" />
			<entity schema="pm" name="shotgun_index" />
			<entity schema="pm" name="shotgun_index_tech" />
			<entity schema="pm" name="shotgun_index_aliquot" />
		</group>
		<script name="Sql" id="Query_3b26d8aa" confirmed="y" >
			<string><![CDATA[CREATE TABLE pm.targeted_primer_plate ( 
	targeted_primer_plate_id bigserial  NOT NULL,
	name                 varchar  NOT NULL,
	plate_type_id        bigint  NOT NULL,
	notes                varchar  ,
	linker_primer_sequence varchar  NOT NULL,
	target_gene          "pm"."target_region"  NOT NULL,
	target_subfragment   "pm"."target_subfragment"  NOT NULL,
	CONSTRAINT pk_targeted_primer_plate PRIMARY KEY ( targeted_primer_plate_id ),
	CONSTRAINT uq_targeted_primer_plate_name UNIQUE ( name ) 
 );

CREATE INDEX idx_targeted_primer_plate_plate_type_id ON pm.targeted_primer_plate ( plate_type_id );

ALTER TABLE pm.targeted_primer_plate ADD CONSTRAINT fk_template_plate_type_id FOREIGN KEY ( plate_type_id ) REFERENCES pm.plate_type( plate_type_id );]]></string>
		</script>
		<browser id="Browse_2c1a55b0" name="Sample Relational Data Browse" confirmed="y" >
			<browse_table schema="pm" entity="shotgun_normalized_plate" x="10" y="10" width="400" height="300" >
				<browse_table schema="pm" entity="echo" fk="fk_shotgun_normalized_plate_echo" x="420" y="10" width="400" height="300" record_view="y" >
					<browse_table schema="pm" entity="shotgun_normalized_plate" fk="fk_shotgun_normalized_plate_echo" x="830" y="10" width="400" height="300" />
				</browse_table>
			</browse_table>
		</browser>
	</layout>
</project>